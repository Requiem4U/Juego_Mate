import { P as E } from "./phaser-5d05247a.js"; function p (t, e, i, s, a, { frecuencia_frames: A = 8, repeticion: r = -1 } = {}) { t.anims.create({ key: i, frames: t.anims.generateFrameNumbers(e, { start: s, end: a }), frameRate: A, repeat: r }) } function S (t, e, { repeticiones: i = 1, width: s = 1, height: a = 1, cellWidth: A = 100, cellHeight: r = 100, posicionX: h = 100, posicionY: b = 100, escalaElemento: o = 1, origenX: n = .5, origenY: d = n, sizeWidth: v = 100, sizeHeight: _ = v } = {}) { let m = t.physics.add.staticGroup({ key: e, frameQuantity: i, gridAlign: { width: s, height: a, cellWidth: A, cellHeight: r, x: h, y: b } }); return m.children.iterate(B => { B.setScale(o), B.setOrigin(n, d), B.setSize(v, _) }), m } function w (t, { porcentaje: e = !0, sizeX: i = 1, sizeY: s = 1, offsetX: a = 0, offsetY: A = 0 } = {}) { if (e) { let r = { width: t.width, height: t.height }; t.setSize(r.width * i, r.height * s), t.setOffset(r.width * a, r.height * A) } else t.setSize(i, s), t.setOffset(a, A); return t } function y (t, e, i, { posicionX: s = 100, posicionY: a = s, anchoSalida: A = 100, altoSalida: r = A, color: h = 0, alfa: b = 0, origenX: o = .5, origenY: n = o, funcionesExtra: d = () => { }, valoresSiguienteEscena: v = void 0 } = {}) { let _ = t.add.rectangle(s, a, A, r, h, b).setOrigin(o, n); return t.physics.world.enable(_), t.physics.add.collider(e, _, () => { t.scene.start(i, v) }, null, t), _ } function M (t, e, i, { escalaPersonaje: s = 1, anchoEscena: a = t.game.canvas.width, altoEscena: A = t.game.canvas.height, norteX: r = a * .4925, norteY: h = A * .036, surX: b = a * .4925, surY: o = A * .925, esteX: n = a * .965, esteY: d = A * .5, oesteX: v = a * .035, oesteY: _ = A * .5, xPersonaje: m = a / 2, yPersonaje: B = A / 2 } = {}) { let g; switch (i) { case "arriba": g = t.physics.add.sprite(r, h, e).setScale(s); break; case "abajo": g = t.physics.add.sprite(b, o, e).setScale(s); break; case "der": g = t.physics.add.sprite(n, d, e).setScale(s); break; case "izq": g = t.physics.add.sprite(v, _, e).setScale(s); break; default: g = t.physics.add.sprite(m, B, e).setScale(s); break }return g.setCollideWorldBounds(!0), g } function Ue (t, e, { posicionX: i = e.x, posicionY: s = e.y, ancho: a = e.width, alto: A = e.height, color: r = 0, alfa: h = 0, origenX: b = e.originX, origenY: o = e.originY, escalaX: n = e.scaleX, escalaY: d = e.scaleY } = {}) { let v = t.add.rectangle(i, s, a, A, r, h).setOrigin(b, o); return v.setScale(n, d), t.physics.world.enable(v), v.body.immovable = !0, v } const bi = "/assets/Cesta_Vendedor_Style_Sheet-8cca04d2.png", xi = "/assets/Filberto_Style_Sheets_128x128-50501861.png", _i = "/assets/Globo_Dialogo_Guardar.png", Bi = "/assets/GloboDialogo.png", Ii = "/assets/Hombre_Style_Sheets_128x128-bcfb5315.png", vi = "/assets/Juan_C_Sprite_Style_Sheets-d01dadcd.png", Ci = "/assets/Mujer_Style_Sheets_128x128-28bcd267.png", Qi = "/assets/Novia_Sprite_Sheet-0597fa3f.png", Si = "/assets/Ojos_Gato_Vendedor_Style_Sheet.png", wi = "/assets/Vendedor_Style_Sheet_128x128.png", Di = "/assets/Vendedor_PP_Style_Sheet-2f78eb09.png", ki = "/assets/Banner_General_Textos-27eabb9f.png", Ri = "/assets/Baner_Contextos_Vendedor-9b7b4902.png", ji = "/assets/Fondo_A02-fa283a00.png", Mi = "/assets/Fondo_A03-3065baac.png", Ti = "/assets/Fondo_A04-4e574897.png", zi = "/assets/Fondo_A05-6de61fa0.png", Oi = "/assets/Fondo_A06-dc884a85.png", Yi = "/assets/Fondo_A08-a0479ade.png", Ji = "/assets/Fondo_A13-744647a4.png", Ni = "/assets/Fondo_A14-605a1c29.png", Ui = "/assets/Fondo_A16-ddf2ee85.png", Fi = "/assets/Fondo_A17-a476ebf2.png", Pi = "/assets/Fondo_A22-6f50e3d0.png", Gi = "/assets/Fondo_A23-112c6c37.png", Xi = "/assets/Fondo_A24-3897fcf5.png", Hi = "/assets/Fondo_A25-dab97a5c.png", Li = "/assets/Fondo_A26-94d5748f.png", qi = "/assets/Fondo_A28-1c8d791b.png", Ki = "/assets/Fondo_A30-3afa33cf.png", Zi = "/assets/Fondo_A31-8c2a1569.png", Vi = "/assets/Fondo_A32-d27e25d9.jpg", Wi = "/assets/Fondo_A33-1dbff442.png", $i = "/assets/Fondo_A34-f27845e5.png", ea = "/assets/Fondo_A35-51e3fb20.png", ta = "/assets/Fondo_Basta_Matematico-de43a34b.png", ia = "/assets/Fondo_Pantalla_Inicio-227ba21e.jpg", aa = "/assets/Fondo_Seleccionar_Personaje-4d3f0018.jpg", sa = "/assets/Fondo_Vendedor-d2df19be.png", Aa = "/assets/Fondo_Formularios-6373e6ef.png", oa = "/assets/InstruccionesPreguntas-44a257f9.png", ra = "/assets/Interior_Casa_Juan_Cupul-7b680aae.jpg", na = "/assets/MiniJuego_Pantalla_Inicio-962aef05.png", la = "/assets/Narracion-938edea5.jpg", ha = "/assets/Pantalla_Controles-cfc5b08e.png", da = "/assets/vidrio-c4641575.png", ca = "/assets/Casa_JP_Exterior-35d6d0e9.png", pa = "/assets/Casa_Milpa-6d1abfdf.png", ga = "/assets/Casa_Pueblo-dbb33c77.png", ua = "/assets/Machete_Juan.png", ma = "/assets/Arbol_1.png", fa = "/assets/Arbol_2-d8faaaaf.png", ya = "/assets/Arbol_3-ea343463.png", Ea = "/assets/Arbol_4-05cd2108.png", ba = "/assets/Arbol_5.png", xa = "/assets/Arbol_6.png", _a = "/assets/Arbol_7.png", Ba = "/assets/Arbol_8.png", Ia = "/assets/Arbol_Centro-dfccba0e.png", va = "/assets/Arbol_Naranjas-2d786c92.png", Ca = "/assets/Barda_1-ae673066.png", Qa = "/assets/Bomba_1.png", Sa = "/assets/Caja_Naranjas_1.png", wa = "/assets/Caja_Verduras_1.png", Da = "/assets/Caja_Verduras_2.png", ka = "/assets/Cama_1.png", Ra = "/assets/Craneo_1.png", ja = "/assets/Cubeta_1.png", Ma = "/assets/Cubeta_2.png", Ta = "/assets/Herramientas_1.png", za = "/assets/Lavadero_1.png", Oa = "/assets/Le√±a_1.png", Ya = "/assets/Letrero_1.png", Ja = "/assets/Maceta_1.png", Na = "/assets/Maiz_1.png", Ua = "/assets/Mesa_1.png", Fa = "/assets/mesa3.png", Pa = "/assets/Piedra_1.png", Ga = "/assets/Piedra_2.png", Xa = "/assets/Piedra_3.png", Ha = "/assets/Pozo_1.png", La = "/assets/Rabano_Blanco_1.png", qa = "/assets/Rabano_Rojo_1.png", Ka = "/assets/Ropero_1.png", Za = "/assets/Saco_1.png", Va = "/assets/Silla_1.png", Wa = "/assets/Tomates_1.png", $a = "/assets/Vela_1.png", es = "/assets/Zanahoria_1.png"; class ts extends E.Scene { constructor() { super({ key: "precarga_imagenes" }) } preload () { this.load.spritesheet("_sprite_cesta_vendedor", bi, { frameWidth: 208, frameHeight: 291 }), this.load.spritesheet("_sprites_filberto", xi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_globo_dialogo_guardar", _i, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprite_globo_dialogo", Bi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_hombre", Ii, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_juan_cupul", vi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_mujer", Ci, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_novia_juan", Qi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprite_ojos_gato", Si, { frameWidth: 208, frameHeight: 291 }), this.load.spritesheet("_sprite_vendedor_tienda", Di, { frameWidth: 208, frameHeight: 234 }), this.load.spritesheet("_sprite_vendedor", wi, { frameWidth: 128, frameHeight: 128 }), this.load.image("_banner_dialogos", ki), this.load.image("_banner_contextos", Ri), this.load.image("_fondo_area_02", ji), this.load.image("_fondo_area_03", Mi), this.load.image("_fondo_area_04", Ti), this.load.image("_fondo_area_05", zi), this.load.image("_fondo_area_06", Oi), this.load.image("_fondo_area_08", Yi), this.load.image("_fondo_area_13", Ji), this.load.image("_fondo_area_14", Ni), this.load.image("_fondo_area_16", Ui), this.load.image("_fondo_area_17", Fi), this.load.image("_fondo_area_22", Pi), this.load.image("_fondo_area_23", Gi), this.load.image("_fondo_area_24", Xi), this.load.image("_fondo_area_25", Hi), this.load.image("_fondo_area_26", Li), this.load.image("_fondo_area_28", qi), this.load.image("_fondo_area_30", Ki), this.load.image("_fondo_area_31", Zi), this.load.image("_fondo_area_32", Vi), this.load.image("_fondo_area_33", Wi), this.load.image("_fondo_area_34", $i), this.load.image("_fondo_area_35", ea), this.load.image("_fondo_basta_mate", ta), this.load.image("_fondo_pantalla_incio", ia), this.load.image("_fondo_vegetacion", aa), this.load.image("_fondo_vendedor_tienda", sa), this.load.image("_fondo_formularios", Aa), this.load.image("_fondo_instrucciones_preguntas", oa), this.load.image("_fondo_interior_casa_juan", ra), this.load.spritesheet("_sprite_minijuego_pantalla_inicio", na, { frameWidth: 768, frameHeight: 432 }), this.load.image("_pantalla_narracion", la), this.load.image("_pantalla_controles", ha), this.load.image("_vidrio", da), this.load.image("_casa_juan", ca), this.load.image("_casa_milpa", pa), this.load.image("_casa_pueblo", ga), this.load.image("_machete_1", ua), this.load.image("_arbol_1", ma), this.load.image("_arbol_2", fa), this.load.image("_arbol_3", ya), this.load.image("_arbol_4", Ea), this.load.image("_arbol_5", ba), this.load.image("_arbol_6", xa), this.load.image("_arbol_7", _a), this.load.image("_arbol_8", Ba), this.load.image("_arbol_centro", Ia), this.load.image("_arbol_naranjas", va), this.load.image("_barda_1", Ca), this.load.image("_bomba_1", Qa), this.load.image("_caja_naranjas_1", Sa), this.load.image("_caja_verduras_1", wa), this.load.image("_caja_verduras_2", Da), this.load.image("_cama_1", ka), this.load.spritesheet("_craneo_1", Ra, { frameWidth: 133, frameHeight: 243 }), this.load.image("_cubeta_1", ja), this.load.image("_cubeta_2", Ma), this.load.image("_herramientas_1", Ta), this.load.image("_lavadero_1", za), this.load.image("_lenia_1", Oa), this.load.image("_letrero_1", Ya), this.load.image("_meceta_1", Ja), this.load.image("_maiz_1", Na), this.load.image("_mesa_1", Ua), this.load.image("_mesa_2", Fa), this.load.image("_piedra_1", Pa), this.load.image("_piedra_2", Ga), this.load.image("_piedra_3", Xa), this.load.image("_pozo_1", Ha), this.load.image("_rabano_blanco_1", La), this.load.image("_rabano_rojo_1", qa), this.load.image("_ropero_1", Ka), this.load.image("_saco_1", Za), this.load.image("_silla_1", Va), this.load.image("_tomates_1", Wa), this.load.spritesheet("_vela_1", $a, { frameWidth: 120, frameHeight: 181 }), this.load.image("_zanahoria_1", es) } create () { p(this, "_sprites_hombre", "walkDown_hombre", 0, 3), p(this, "_sprites_hombre", "walkUp_hombre", 4, 7), p(this, "_sprites_hombre", "walkLeft_hombre", 8, 11), p(this, "_sprites_hombre", "walkRight_hombre", 12, 15), p(this, "_sprites_hombre", "idleFront_hombre", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "idleBack_hombre", 20, 23, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "idleLeft_hombre", 24, 27, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "idleRight_hombre", 28, 31, { frecuencia_frames: 2.1 }), p(this, "_sprites_mujer", "walkDown_mujer", 0, 3), p(this, "_sprites_mujer", "walkUp_mujer", 4, 7), p(this, "_sprites_mujer", "walkLeft_mujer", 8, 11), p(this, "_sprites_mujer", "walkRight_mujer", 12, 15), p(this, "_sprites_mujer", "idleFront_mujer", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_mujer", "idleBack_mujer", 20, 23, { frecuencia_frames: 2.1 }), p(this, "_sprites_mujer", "idleLeft_mujer", 24, 27, { frecuencia_frames: 2.1 }), p(this, "_sprites_mujer", "idleRight_mujer", 28, 31, { frecuencia_frames: 2.1 }), p(this, "_sprites_juan_cupul", "walkDown_juan", 0, 3), p(this, "_sprites_juan_cupul", "walkUp_juan", 4, 7), p(this, "_sprites_juan_cupul", "walkLeft_juan", 8, 11), p(this, "_sprites_juan_cupul", "walkRight_juan", 12, 15), p(this, "_sprites_juan_cupul", "idleFront_juan", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_juan_cupul", "idleBack_juan", 20, 23, { frecuencia_frames: 2.1 }), p(this, "_sprites_juan_cupul", "idleLeft_juan", 24, 27, { frecuencia_frames: 2.1 }), p(this, "_sprites_juan_cupul", "idleRight_juan", 28, 31, { frecuencia_frames: 2.1 }), p(this, "_sprites_filberto", "walkDown_filberto", 0, 3), p(this, "_sprites_filberto", "walkUp_filberto", 4, 7), p(this, "_sprites_filberto", "walkLeft_filberto", 8, 11), p(this, "_sprites_filberto", "walkRight_filberto", 12, 15), p(this, "_sprites_filberto", "idleFront_filberto", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_filberto", "idleBack_filberto", 20, 23, { frecuencia_frames: 2.1 }), p(this, "_sprites_filberto", "idleLeft_filberto", 24, 27, { frecuencia_frames: 2.1 }), p(this, "_sprites_filberto", "idleRight_filberto", 28, 31, { frecuencia_frames: 2.1 }), p(this, "_sprites_novia_juan", "walkDown_novia_juan", 0, 3), p(this, "_sprites_novia_juan", "walkUp_novia_juan", 4, 7), p(this, "_sprites_novia_juan", "walkLeft_novia_juan", 8, 11), p(this, "_sprites_novia_juan", "walkRight_novia_juan", 12, 15), p(this, "_sprites_novia_juan", "idleFront_novia_juan", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_novia_juan", "idleBack_novia_juan", 20, 23, { frecuencia_frames: 2.1 }), p(this, "_sprites_novia_juan", "idleLeft_novia_juan", 24, 27, { frecuencia_frames: 2.1 }), p(this, "_sprites_novia_juan", "idleRight_novia_juan", 28, 31, { frecuencia_frames: 2.1 }), p(this, "_sprite_globo_dialogo", "idle_dialogo", 0, 4, { frecuencia_frames: 5.5, repeticion: 0 }), p(this, "_sprite_vendedor", "idle_vendedor", 0, 9, 5), p(this, "_sprite_vendedor_tienda", "idle_vendedro_tienda", 0, 8, { frecuencia_frames: 7, repeticion: 0 }), p(this, "_sprite_ojos_gato", "animacion_ojos_gato", 0, 6, { frecuencia_frames: 6, repeticion: 0 }), p(this, "_sprite_cesta_vendedor", "idle_cesta", 0, 6, { frecuencia_frames: 5 }), p(this, "_sprite_minijuego_pantalla_inicio", "animacion_minijuego_inicio", 0, 18, { frecuencia_frames: 6 }), p(this, "_vela_1", "idle_vela_1", 0, 3, { frecuencia_frames: 5 }), p(this, "_craneo_1", "idle_craneo_1", 0, 3, { frecuencia_frames: 5 }), this.scene.start("LoginScene") } update () { } } let je = 200, fe = je * Math.sqrt(.4), k, z, se = "idleFront"; class D { constructor(e) { this.escena = e, k = e.input.keyboard.addKeys({ up: "UP", left: "LEFT", down: "DOWN", right: "RIGHT" }), z = { idle: { front: "idleFront", back: "idleBack", left: "idleLeft", right: "idleRight" }, caminata: { up: "walkUp", down: "walkDown", left: "walkLeft", right: "walkRight" } } } movimientoPersonaje (e) { switch (!0) { case Fe(k, k.up, k.left): se = z.idle.back, ye(e, -fe, -fe, z.caminata.up); break; case Fe(k, k.up, k.right): se = z.idle.back, ye(e, fe, -fe, z.caminata.up); break; case Fe(k, k.down, k.left): se = z.idle.front, ye(e, -fe, fe, z.caminata.down); break; case Fe(k, k.down, k.right): se = z.idle.front, ye(e, fe, fe, z.caminata.down); break; case Pe(k, k.right): se = z.idle.right, ye(e, je, 0, z.caminata.right); break; case Pe(k, k.left): se = z.idle.left, ye(e, -je, 0, z.caminata.left); break; case Pe(k, k.down): se = z.idle.front, ye(e, 0, je, z.caminata.down); break; case Pe(k, k.up): se = z.idle.back, ye(e, 0, -je, z.caminata.up); break; default: e.anims.play(se, !0) } } modificarCursoresMovimiento (e, i, s, a) { k = void 0, k = this.escena.input.keyboard.addKeys({ up: `${e}`, left: `${i}`, down: `${s}`, right: `${a}` }) } definirAnimaciones ({ idleFront: e = "idleFront", idleBack: i = "idleBack", idleLeft: s = "idleLeft", idleRight: a = "idleRight", walkUp: A = "walkUp", walkDown: r = "walkDown", walkLeft: h = "walkLeft", walkRight: b = "walkRight" }) { se = e, z.caminata = { up: A, down: r, left: h, right: b }, z.idle = { front: e, back: i, left: s, right: a } } cambiarVelocidadMovimeinto (e) { je = e } } function ye (t, e, i, s) { t.setVelocityX(e), t.setVelocityY(i), t.anims.play(s, !0) } function Fe (t, e, i) { return t && e && e.isDown && i && i.isDown } function Pe (t, e) { return t && e && e.isDown } let Ae = [[], [], [], []], Ge = [[], [], [], []], is = ["+", "-", "√ó", "√∑", "‚àö", "¬≤"], Se = [], jt, gt, ut; class yi {
    constructor(e, i = 4, s = 5) { this.escena = e, jt = i, gt = s } crearMatriz ({ width: e = this.escena.game.canvas.width, height: i = this.escena.game.canvas.height } = {}) {
        const s = e * .13, a = i * .175; for (let A = 0; A < gt; A++) {
            let r = Math.floor(Math.random() * (100 * A - 100 * (A - 1) + 1)) + 100 * (A - 1), h = is[Math.floor(Math.random() * 6)], b = h == "‚àö" ? "‚àöx" : h == "¬≤" ? "x" + h : h + r, o = s + e * .04 * (A * 4 + 1); Ge[0].push(this.escena.add.rectangle(o, a + i * .06, 200, 100, 12471347).setOrigin(.5)), A > 0 ? (Se.push(h == "‚àö" ? "‚àö" : h == "¬≤" ? h : h + r), Ae[0].push(this.escena.add.text(o, a + i * .06, b, { fontFamily: "Arial", fontSize: 34, color: "#ffffff" })), Ae[0][A].setOrigin(.5)) : (Ae[0].push(this.escena.add.text(o, a + i * .06, `N√∫mero
Inicial`, { fontFamily: "Arial", fontSize: 30, color: "#ffffff", align: "center" })), Ae[0][A].setOrigin(.5))
        } for (let A = 1; A < jt; A++) { let r = a + i * .06 * (A * 3 + 1), h = Math.floor(Math.random() * (333 * A - 333 * (A - 1) + 1)) + 333 * (A - 1); Ge[A].push(this.escena.add.rectangle(s + e * .04, r, 200, 100, 15843509).setOrigin(.5)), Ae[A].push(this.escena.add.text(s + e * .04, r, h, { fontFamily: "Arial", fontSize: 34, color: "#2c2c2c" })), Ae[A][0].setOrigin(.5); for (let b = 1; b < gt; b++) { let o = s + e * .04 * (b * 4 + 1); Ge[A].push(this.escena.add.rectangle(o, r, 200, 100, 11248241).setOrigin(.5)), Ae[A].push(this.escena.add.text(o, r, "", { fontFamily: "Arial", fontSize: 34, color: "#ffffff" })), Ae[A][b].setOrigin(.5) } } return { matrizOperaciones: Ae, matrizRectangulos: Ge }
    } comprobarRespuesta (e, i, s) { const a = Math.pow(10, 2); let A; switch (ut ? A = ut : A = Number.parseInt(Ae[i][0].text), Se[s - 1][0]) { case "‚àö": A = Math.floor(Math.sqrt(A) * a) / a, console.log("‚àö", A); break; case "¬≤": A = Math.floor(Math.pow(A, 2) * a) / a, console.log("¬≤", A); break; case "√∑": A = Math.floor(A / Number.parseInt(Se[s - 1].slice(1)) * a) / a, console.log("√∑", A); break; case "√ó": A = Math.floor(A * Number.parseInt(Se[s - 1].slice(1)) * a) / a, console.log("√ó", A); break; case "+": A = Math.floor((A + Number.parseInt(Se[s - 1].slice(1))) * a) / a, console.log("+", A); break; case "-": A = Math.floor((A - Number.parseInt(Se[s - 1].slice(1))) * a) / a, console.log("-", A); break }return A == e ? (ut = A, !0) : !1 }
} let Te, we, Xe, K, Z, Ee = "numerico"; const Mt = 5; let as = 4, Me, I = { col: 1, fila: 1 }, be; class ss extends E.Scene {
    constructor() { super({ key: "game" }) } preload () { } create () {
        this.Movimientos = new D(this); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_vegetacion").setDepth(-1), this.grupo1 = S(this, "_arbol_1", { repeticiones: 2, cellWidth: 4 }), this.idle = this.physics.add.sprite(e.x * .6, e.y * .8, "_sprites_mujer").setImmovable().setScale(3), this._sprite_vendedor = this.physics.add.sprite(e.x * 1.6, e.y * .8, "_sprite_vendedor").setOrigin(.48, .35).setScale(1.25, 1.25).setImmovable(), this.player = this.physics.add.sprite(e.x, e.y, "_sprites_hombre"), this.idle_dialogo = this.add.sprite(this._sprite_vendedor.x, this._sprite_vendedor.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8), p(this, "_sprites_mujer", "_idle_mujer", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "walkDown", 0, 3), p(this, "_sprites_hombre", "walkUp", 4, 7), p(this, "_sprites_hombre", "walkLeft", 8, 11), p(this, "_sprites_hombre", "walkRight", 12, 15), p(this, "_sprites_hombre", "idleFront", 16, 19, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "idleBack", 20, 23, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "idleLeft", 24, 27, { frecuencia_frames: 2.1 }), p(this, "_sprites_hombre", "idleRight", 28, 31, { frecuencia_frames: 2.1 }), p(this, "_sprite_vendedor", "idle_vendedor_estandar", 0, 9, { frecuencia_frames: 5 }), this._sprite_vendedor.anims.play("idle_vendedor_estandar"), this.idle_dialogo.visible = !1, this.physics.world.enable(this.player), this.player.setCollideWorldBounds(!0), this.physics.world.enable(this.grupo1), this.physics.add.collider(this.player, this.grupo1, () => { console.log(1) }, null, this), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), w(this.idle, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), this.g = !1, this.physics.add.overlap(this.player, this._sprite_vendedor, () => { this.g = !0 }, null, this), this.idle.anims.play("_idle_mujer"), this.timer = this.time.addEvent({ delay: 10, callback: () => { this.g ? this.idle_dialogo.anims.isPlaying ? this.g = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.g = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }), Te = this.add.text(e.x, e.y * 1.8, "Texto: ", { fontFamily: "Arial", fontSize: 34, color: "#ffffff" }), Te.setOrigin(.5), this.input.keyboard.on("keyup", function (a) { if (a.key === "Enter") { let A = Te.text.substring(7); console.log("Texto ingresado:", A), Te.text = "Texto: " } else Te.text += a.key }), Me = this.add.graphics({ lineStyle: { width: 2, color: 16777215 } }), we = this.add.rectangle(200, 200, 200, 100), Xe = this.add.rectangle(400, 200, 200, 100), Me.strokeRectShape(we), K = this.add.text(we.x, we.y, "", { fontFamily: "Arial", fontSize: 24, color: "#ffffff" }), Z = this.add.text(Xe.x, Xe.y, "", { fontFamily: "Arial", fontSize: 24, color: "#808080" }), this.input.keyboard.on("keyup", function (a) {
            switch (!0) {
                case (a.key === "Enter" && Ee === "numerico"): K.text += `
`; break; case (a.key === "Enter" && Ee === "texto"): Z.text += `
`; break; case (a.key === "Backspace" && Ee === "numerico"): K.text[K.text.length - 2] === `
`? K.text = K.text.slice(0, -2) : K.text = K.text.slice(0, -1); break; case (a.key === "Backspace" && Ee === "texto"): Z.text[Z.text.length - 2] === `
`? Z.text = Z.text.slice(0, -2) : Z.text = Z.text.slice(0, -1); break; case (Ee === "texto" && He(a.key)): Tt(Z, a.key); break; case (Ee === "numerico" && He(a.key, !0)): Tt(K, a.key); break; case a.key === "ArrowLeft": Ee = "numerico", zt(K, Z, we), K.setColor("#ffffff"), Z.setColor("#808080"), Me.strokeRectShape(we); break; case a.key === "ArrowRight": Ee = "texto", zt(Z, K, Xe); break
            }
        }), this.basta = new yi(this); let { matrizOperaciones: i, matrizRectangulos: s } = this.basta.crearMatriz(); s[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col], this.input.keyboard.on("keyup", function (a) { switch (!0) { case a.key === "ArrowDown": I.fila < i.length - 1 && (s[I.fila][I.col].fillColor = 8421504, I.fila++, s[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case a.key === "ArrowUp": I.fila > 1 && (s[I.fila][I.col].fillColor = 8421504, I.fila--, s[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case a.key === "ArrowLeft": I.col > 1 && (s[I.fila][I.col].fillColor = 8421504, I.col--, s[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case a.key === "ArrowRight": I.col < i[I.fila].length - 1 && (s[I.fila][I.col].fillColor = 8421504, I.col++, s[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case a.key === "Backspace": be.text = be.text.slice(0, -1); break } }), this.input.keyboard.on("keyup", function (a) { console.log(He(a.key, !0)), He(a.key, !0) && As(be, a.key) }), console.log(this.basta.comprobarRespuesta("10", 1)), os(this, this.idle, this.idle.x, this.idle.y, this.idle.x + 100, this.idle.y + 100, 3e3, "walkDown_mujer")
    } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > this.idle.y ? (this.player.setDepth(1), this.idle.setDepth(0)) : (this.player.setDepth(0), this.idle.setDepth(1)) }
} function He (t, e = !1) { let i; return e ? i = /^[0-9 +*/-]$/ : i = /^[A-Za-z.,;:¬°!¬ø? ]$/, i.test(t) } function Tt (t, e) {
    let s = t.text.split(`
`), a = s[s.length - 1]; s.length <= as && (a.length < Mt ? t.text += e : a.length == Mt ? t.text += `
`: t.text += e)
} function As (t, e) { let i = t.text.length; i == 4 ? t.text = e : i < 4 && (t.text += e) } function zt (t, e, i, { colorSelec: s = "#ffffff", colorDeselec: a = "#808080" } = {}) { e.setColor(a), t.setColor(s), Me.clear(), Me.lineStyle(2, Number.parseInt(s.substring(1), 16)), Me.strokeRectShape(i) } function os (t, e, i, s, a, A, r, h) { e.x = i, e.y = s, t.time.delayedCall(1e3, () => { t.tweens.add({ targets: e, x: a, y: A, duration: r, onComplete: () => { t.time.delayedCall(1e3, () => { t.tweens.add({ targets: e, x: a + (a - i), y: s, duration: r, onComplete: () => { e.anims.play("idleRight_mujer") } }), e.anims.play("walkUp_mujer") }), e.anims.play("idleFront_mujer") } }), e.anims.play(h) }) } class kt { constructor(e, i) { this.escena = e, this.timer = e.time.addEvent(i), this.configTimer = i } crearTimer () { return this.timer } parpadeoLinea (e) { e.visible = !e.visible } reiniciar () { this.timer.reset(this.configTimer) } eliminarTimer () { this.timer.remove() } } function ct (t, e) { return t.time.addEvent(e) } let ze = { movimiento: { flechas: void 0, letras: void 0 }, acciones: { confirmar: void 0 } }, oe = { mujer: void 0, hombre: void 0 }, xe = { mujer: void 0, hombre: void 0 }, X = { mujer: void 0, hombre: void 0 }, Le = "Mujer", qe, Ke, Ot, rs = "Escoge tu personaje... (Usa A y D para seleccionar. Usa F para confirmar)"; class nA extends E.Scene { constructor() { super({ key: "seleccion_personaje" }) } init () { Le = "mujer" } preload () { } create () { ze.movimiento.flechas = this.input.keyboard.createCursorKeys(), ze.acciones.confirmar = this.input.keyboard.addKey("F"); let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.add.image(e.x / 2, e.y / 2, "_fondo_vegetacion").setScale(.8).setDepth(-1), this.add.image(e.x / 2, e.y * .8, "_banner_dialogos").setScale(.8, 1), this.idle_Mujer = this.add.sprite(e.x * .32, e.y * .37, "_sprites_mujer").setScale(2.5), this.idle_Hombre = this.add.sprite(e.x * .66, e.y * .37, "_sprites_hombre").setScale(2.5), this.idle_Mujer.anims.play("idleFront_mujer"), this.idle_Hombre.anims.play("idleFront_hombre"), qe = { fontFamily: "Arial", fontSize: 35, fill: "white", align: "center" }, this.add.text(e.x * .1, e.y * .71, rs, qe).setOrigin(0), oe.mujer = this.add.text(e.x * .3, e.y * .84, "Mujer", qe), oe.mujer.setOrigin(.5), xe.mujer = oe.mujer.getBounds(), X.mujer = this.add.graphics(), X.mujer.fillStyle(16777215, 1), X.mujer.fillRect(oe.mujer.x - xe.mujer.width / 2, oe.mujer.y + xe.mujer.height - 10, xe.mujer.width, 5), oe.hombre = this.add.text(e.x * .66, e.y * .84, "Hombre", qe), oe.hombre.setOrigin(.5), xe.hombre = oe.hombre.getBounds(), X.hombre = this.add.graphics(), X.hombre.fillStyle(16777215, 1), X.hombre.fillRect(oe.hombre.x - xe.hombre.width / 2, oe.hombre.y + xe.hombre.height - 10, xe.hombre.width, 5), X.hombre.visible = !1, Ke = X.mujer, Ot = { delay: 700, callback: () => { this.manejadorParpade.parpadeoLinea(Ke) }, callbackScope: this, loop: !0 }, this.manejadorParpade = new kt(this, Ot), this.manejadorParpade.crearTimer() } update () { ze.movimiento.flechas.right.isDown ? (X.mujer.visible = !1, X.hombre.visible = !0, Le = "hombre", Ke = X.hombre, this.manejadorParpade.reiniciar()) : ze.movimiento.flechas.left.isDown ? (X.mujer.visible = !0, X.hombre.visible = !1, Le = "mujer", Ke = X.mujer, this.manejadorParpade.reiniciar()) : ze.acciones.confirmar.isDown && (this.manejadorParpade.eliminarTimer(), this.scene.start("confirmacion_seleccion_personaje", { personaje: Le })) } } class ns extends E.Scene { constructor() { super({ key: "pantalla_inicio" }) } preload () { } create () { this.Movimientos = new D(this); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x * .99, e.y * .975, "_fondo_pantalla_incio").setScale(.8), this.minijuego = this.physics.add.sprite(e.x * 1.0325, e.y * .476, "minijuego_incio").setScale(.65), this.minijuego.anims.play("animacion_minijuego_inicio"), this.player = this.physics.add.sprite(e.x * 1.0325, e.y * .7, "_sprites_juan_cupul").setScale(.8), this.player.anims.play("walkRight_juan"), this.add.image(e.x, e.y, "_vidrio").setScale(.8), this.btn_jugar = this.add.circle(e.x * 1.18, e.y * 1.38, 45, 0, 0), this.physics.world.enable(this.btn_jugar), this.btn_jugar.body.setCircle(35), this.btn_jugar.setInteractive(), this.btn_jugar.on("pointerdown", function (i) { this.scene.start("area_32_interior") }, this), this.btn_salir = this.add.circle(e.x * 1.345, e.y * 1.245, 45, 0, 0), this.physics.world.enable(this.btn_salir), this.btn_salir.body.setCircle(35), this.btn_salir.setInteractive(), this.btn_salir.on("pointerdown", function (i) { this.scene.start("LoginScene") }, this) } update () { } } let Oe = { movimiento: { flechas: void 0, letras: void 0 }, acciones: { confirmar: void 0 } }, he = "", _e = { aceptar: void 0, cancelar: void 0 }, H = { aceptar: void 0, cancelar: void 0 }, re = { aceptar: void 0, cancelar: void 0 }, ls = "¬øEst√°s seguro de tu elecci√≥n? (Usa F para confirmar)", Ze, Ve, We, Yt; class lA extends E.Scene { constructor() { super({ key: "confirmacion_seleccion_personaje" }) } init (e) { e && (he = e.personaje, Ve = !0) } preload () { } create () { Oe.movimiento.flechas = this.input.keyboard.createCursorKeys(), Oe.acciones.confirmar = this.input.keyboard.addKey("F"); let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.add.image(e.x / 2, e.y / 2, "_fondo_vegetacion").setScale(.8).setDepth(-1), this.add.image(e.x / 2, e.y * .8, "_banner_dialogos").setScale(.8, 1), this.caminata_Frente_P = this.add.sprite(e.x * .2, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Der_P = this.add.sprite(e.x * .4, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Espalda_P = this.add.sprite(e.x * .6, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Izq_P = this.add.sprite(e.x * .8, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Frente_P.play("walkDown_" + he), this.caminata_Der_P.play("walkRight_" + he), this.caminata_Espalda_P.play("walkUp_" + he), this.caminata_Izq_P.play("walkLeft_" + he), Ze = { fontFamily: "Arial", fontSize: 35, fill: "white", align: "center" }, this.add.text(e.x * .1, e.y * .71, ls, Ze).setOrigin(0), re.aceptar = this.add.text(e.x * .3, e.y * .84, "S√≠", Ze), re.aceptar.setOrigin(.5), _e.aceptar = re.aceptar.getBounds(), H.aceptar = this.add.graphics(), H.aceptar.fillStyle(16777215, 1), H.aceptar.fillRect(re.aceptar.x - _e.aceptar.width / 2, re.aceptar.y + _e.aceptar.height - 10, _e.aceptar.width, 5), re.cancelar = this.add.text(e.x * .66, e.y * .84, "No", Ze), re.cancelar.setOrigin(.5), _e.cancelar = re.cancelar.getBounds(), H.cancelar = this.add.graphics(), H.cancelar.fillStyle(16777215, 1), H.cancelar.fillRect(re.cancelar.x - _e.cancelar.width / 2, re.cancelar.y + _e.cancelar.height - 10, _e.cancelar.width, 5), H.cancelar.visible = !1, We = H.aceptar, this.manejadorParpade = new kt(this, Yt), Yt = { delay: 700, callback: () => { this.manejadorParpade.parpadeoLinea(We) }, callbackScope: this, loop: !0 }, this.timer = this.manejadorParpade.crearTimer() } update () { Oe.movimiento.flechas.right.isDown ? (H.aceptar.visible = !1, H.cancelar.visible = !0, Ve = !1, We = H.cancelar, this.manejadorParpade.reiniciar()) : Oe.movimiento.flechas.left.isDown ? (H.aceptar.visible = !0, H.cancelar.visible = !1, Ve = !0, We = H.aceptar, this.manejadorParpade.reiniciar()) : Oe.acciones.confirmar.isDown && (Ve ? (this.timer.remove(), this.scene.start("area_32_interior")) : (this.timer.remove(), this.scene.start("seleccion_personaje"))) } } let de = { movimiento: { flechas: void 0 }, acciones: { confirmar: void 0, cacelar: void 0 } }, ce = { comprar: void 0, preguntas: void 0, cancelar: void 0 }, Q = [void 0, void 0, void 0], V = [void 0, void 0, void 0], mt = ["Basta Matem√°tico", "Preguntas", "Cancelar"], T, Ye, De = { parpadeo: void 0, animacion: { vendedor: void 0, canasta: void 0 } }, ke, Je = { key: "a", posicion: { x: 10, y: 100 } }; class hs extends E.Scene { constructor() { super({ key: "vendedor_pantalla_principal" }) } init (e) { e && (Je = e) } preload () { } create () { de.movimiento.flechas = this.input.keyboard.createCursorKeys(), de.acciones.confirmar = this.input.keyboard.addKey("ENTER"), de.acciones.cacelar = this.input.keyboard.addKey("ESC"); let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.idle_vendedor_pp = this.add.sprite(e.x * .25, e.y * .4, "_sprite_vendedor_tienda").setScale(3, 3), this.canasta = this.add.sprite(e.x * .25, e.y * .36, "_sprite_cesta_vendedor").setScale(3.5, 3.5), this.ojos_gato = this.add.sprite(e.x * .25, e.y * .36, "_sprite_ojos_gato").setScale(3.5, 3.5), this.add.image(e.x / 2, e.y / 2, "_fondo_vendedor_tienda").setScale(.8, .735).setDepth(-1), this.add.image(e.x / 2, e.y * .8, "_banner_dialogos").setAlpha(.7).setScale(.8, 1).setDepth(1), this.add.image(e.x * .75, e.y * .35, "_banner_contextos").setScale(.8, .8).setDepth(1), this.idle_vendedor_pp.anims.play("idle_vendedro_tienda"), this.canasta.anims.play("idle_cesta"), Ye = { fontFamily: "Arial", fontSize: 35, fill: "white", align: "center" }, this.add.text(e.x / 2, e.y * .8, "Bienvenido... Tengo algo que podria interesarte.", Ye).setOrigin(.5).setDepth(2), V[0] = this.add.text(e.x * .6, e.y * .2, mt[0], Ye).setDepth(2).setOrigin(0), ce.comprar = V[0].getBounds(), Q[0] = this.add.graphics(), Q[0].fillStyle(16777215, 1), Q[0].fillRect(V[0].x, V[0].y + ce.comprar.height, ce.comprar.width, 5), Q[0].setDepth(2), ke = Q[0], V[1] = this.add.text(e.x * .6, e.y * .3, mt[1], Ye).setDepth(2).setOrigin(0), ce.preguntas = V[1].getBounds(), Q[1] = this.add.graphics(), Q[1].fillStyle(16777215, 1), Q[1].fillRect(V[1].x, V[1].y + ce.preguntas.height, ce.preguntas.width, 5), Q[1].setDepth(2), Q[1].visible = !1, V[2] = this.add.text(e.x * .6, e.y * .4, mt[2], Ye).setDepth(2).setOrigin(0), ce.cancelar = V[2].getBounds(), Q[2] = this.add.graphics(), Q[2].fillStyle(16777215, 1), Q[2].fillRect(V[2].x, V[2].y + ce.cancelar.height, ce.cancelar.width, 5), Q[2].setDepth(2), Q[2].visible = !1, De.parpadeo = { delay: 700, callback: () => { this.manejadorParpadeo.parpadeoLinea(ke) }, callbackScope: this, loop: !0 }, this.manejadorParpadeo = new kt(this, De.parpadeo), this.timer = this.manejadorParpadeo.crearTimer(), De.animacion.vendedor = { delay: 7e3, callback: () => { this.idle_vendedor_pp.anims.play("idle_vendedro_tienda") }, callbackScope: this, loop: !0 }, this.timer = ct(this, De.animacion.vendedor), De.animacion.canasta = { delay: 3150, callback: () => { this.ojos_gato.anims.play("animacion_ojos_gato") }, callbackScope: this, loop: !0 }, this.timer = ct(this, De.animacion.canasta), T = 0, this.timer = this.time.addEvent({ delay: 150, startAt: 150, callback: () => { this.seleccion() }, callbackScope: this, loop: !0 }) } seleccion () { switch (!0) { case de.movimiento.flechas.up.isDown: T == 0 ? (Q[T].visible = !1, T = 2, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()) : (Q[T--].visible = !1, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()); break; case de.movimiento.flechas.down.isDown: T == 2 ? (Q[T].visible = !1, T = 0, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()) : (Q[T++].visible = !1, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()); break; case (de.acciones.confirmar.isDown && T == 0): this.scene.start("basta_matematico", Je); break; case (de.acciones.confirmar.isDown && T == 1): this.scene.start("pantalla_preguntas", Je); break; case (de.acciones.confirmar.isDown && T == 2 || de.acciones.cacelar.isDown): this.timer.remove(), this.scene.start(Je.key, { entrada: "vendedor", posicion: Je.posicion }); break } } update () { } } const Y = "https://api-rest-render-8ynf.onrender.com", J = `
    width: 150px;
    height: 40px;
    font-size: 20px;
    font-weight: bold;
    padding: 5px;
    background-color: #ffffff;
    border: 2px solid #0000000;
    border-radius: 6px;
    color: #000000;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
`, P = `
    width: 300px; 
    height: 30px; 
    font-size: 18px; 
    color: #000
    padding: 5px; 
    border: 2px solid #000;
    border-radius: 6px;
`, G = `
    width: 300px;
    height: 100px; 
    font-size: 20px;
    padding: 5px;
    border: 2px solid #000;
    border-radius: 6px;
    resize: none;
`, ds = `
    width: 400px;
    height: 150px; 
    font-size: 20px;
    padding: 5px;
    border: 2px solid #000;
    border-radius: 6px;
    resize: none;
`; let $e = { parpadeo: void 0, animacion: { vendedor: void 0, canasta: void 0 } }; const wt = []; let ie, R, ft, W, ee, Be, N, ve, yt; class cs extends E.Scene {
    constructor() { super({ key: "pantalla_preguntas" }) } init (e) { e && (yt = e) } preload () { } create () { ie ? (R = Nt(), ft = R.contexto, W = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: R.respQuien.split(","), respuesta: R.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: R.respQue.split(","), respuesta: R.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: R.respOperaciones.split(","), respuesta: R.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: R.preguntaProblema, respuestas: R.respProblema.split(","), respuesta: R.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena()) : fetch(Y + "/api/vendedor-preguntas", { method: "GET", headers: { "Content-Type": "application/json" } }).then(e => e.json()).then(e => { e && (e.data.forEach(i => { wt.push({ contexto: i.attributes.contexto, respQuien: i.attributes.quien, respQue: i.attributes.que, respOperaciones: i.attributes.operaciones, preguntaProblema: i.attributes.pregunta, respProblema: i.attributes.resultado }) }), ie = [...wt], R = Nt(), ft = R.contexto, W = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: R.respQuien.split(","), respuesta: R.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: R.respQue.split(","), respuesta: R.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: R.respOperaciones.split(","), respuesta: R.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: R.preguntaProblema, respuestas: R.respProblema.split(","), respuesta: R.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena()) }).catch(e => { console.error(e) }) } update () { } crearEscena () {
        ve = !1, Be = 0, N = 0; let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.idle_vendedor_pp = this.add.sprite(e.x * .25, e.y * .4, "_sprite_vendedor_tienda").setScale(3, 3), this.canasta = this.add.sprite(e.x * .25, e.y * .36, "_sprite_cesta_vendedor").setScale(3.5, 3.5), this.ojos_gato = this.add.sprite(e.x * .25, e.y * .36, "_sprite_ojos_gato").setScale(3.5, 3.5), this.add.image(e.x / 2, e.y / 2, "_fondo_vendedor_tienda").setScale(.8, 1).setDepth(-1), this.add.image(e.x / 2, e.y * .82, "_banner_dialogos").setScale(.8, 1.1).setDepth(1), this.add.image(e.x * .75, e.y * .35, "_banner_contextos").setScale(.8, .8).setDepth(1), this.idle_vendedor_pp.anims.play("idle_vendedro_tienda"), this.canasta.anims.play("idle_cesta"), this.add.text(e.x * .75, e.y * .35, ft, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: 525, useAdvancedWrap: !0 } }).setOrigin(.5).setDepth(2), $e.animacion.vendedor = { delay: 7e3, callback: () => { this.idle_vendedor_pp.anims.play("idle_vendedro_tienda") }, callbackScope: this, loop: !0 }, this.timer = ct(this, $e.animacion.vendedor), $e.animacion.canasta = { delay: 3150, callback: () => { this.ojos_gato.anims.play("animacion_ojos_gato") }, callbackScope: this, loop: !0 }, this.timer = ct(this, $e.animacion.canasta); for (let i = 0; i <= 3; i++)W[i].areaTexto = this.add.text(e.x * .1, e.y * .71, W[i].pregunta, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: e.x * .8, useAdvancedWrap: !0 } }).setDepth(2), W[i].areaTexto.visible = !1; W[Be].areaTexto.visible = !0, ee = ps(this, Et(W[0].respuestas)), ee[N].setColor("#FFFFFF"), this.retro = { texto: void 0, background: void 0 }, this.retro.texto = this.add.text(e.x * .13, e.y * .77, `La respuesta ha sido incorrecta.
Analiza de nuevo el problema e intentalo de nuevo`, { fontFamily: "Arial", fontSize: 32, color: "#FFFFFF" }).setOrigin(0).setDepth(7), this.retro.texto.visible = !1, this.retro.background = this.add.image(e.x / 2, e.y * .82, "_banner_dialogos").setScale(.8, 1.1).setDepth(6), this.retro.background.visible = !1, this.input.keyboard.on("keyup", function (i) { if (ve) switch (!0) { case i.key == "ArrowLeft": ee[N].setColor("#cacaca"), N <= 0 ? N = 3 : N -= 1, ee[N].setColor("#FFFFFF"); break; case i.key == "ArrowRight": ee[N].setColor("#cacaca"), N >= 3 ? N = 0 : N += 1, ee[N].setColor("#FFFFFF"); break; case i.key == "Enter": ee[N].text.split(") ")[1] == W[Be].respuesta ? Be < 3 ? (ve = !1, W[Be++].areaTexto.visible = !1, W[Be].areaTexto.visible = !0, Jt(Et(W[Be].respuestas), ee), N = 0, ee.forEach(s => { s.setColor("#cacaca") }), ee[N].setColor("#ffffff"), this.time.delayedCall(2e3, () => { ve = !0 })) : (this.retro.texto.text = "¬°¬°¬°Felicidades!!! Haz logrado resolver todo correctamente.", this.retro.texto.visible = !0, this.retro.background.visible = !0, this.time.delayedCall(4e3, () => { this.scene.start("vendedor_pantalla_principal", yt) })) : (ve = !1, this.retro.texto.visible = !0, this.retro.background.visible = !0, Jt(Et(W[Be].respuestas), ee), this.time.delayedCall(4e3, () => { ve = !0, this.retro.background.visible = !1, this.retro.texto.visible = !1 })); break; case i.key == "Escape": this.scene.start("vendedor_pantalla_principal", yt); break } }, this), this.time.delayedCall(4e3, () => { ve = !0 })
    }
} function ps (t, e) { const i = t.game.canvas.width, s = t.game.canvas.height, a = i * .08; let A = []; for (let r = 0; r <= 3; r++) { let h = a + i * .05 * (r * 4 + 1); A.push(t.add.text(h, s * .89, r + 1 + ") " + e[r], { fontFamily: "Arial", fontSize: 30, color: "#cacaca", align: "left", wordWrap: { width: 220, useAdvancedWrap: !0 } }).setOrigin(0, .5).setDepth(3)) } return A } function Et (t) { let e = t, i = t.length, s, a; for (; i !== 0;)a = Math.floor(Math.random() * i), i--, s = e[i], e[i] = e[a], e[a] = s; return e } function Jt (t, e) { for (let i = 0; i <= 3; i++)e[i].text = i + 1 + ") " + t[i] } function Nt () { let t, e; return ie.length != 0 ? (t = Math.floor(Math.random() * ie.length), e = ie[t], ie.splice(t, 1)) : (ie = [...wt], console.log(ie), t = Math.floor(Math.random() * ie.length), e = ie[t], ie.splice(t, 1)), e } let O, $, u = { col: 1, fila: 1 }, te, Ut = 0; class gs extends E.Scene { constructor() { super({ key: "basta_matematico" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.basta = new yi(this); const e = this.basta.crearMatriz(); O = e.matrizOperaciones, $ = e.matrizRectangulos, $[u.fila][u.col].fillColor = 15195555, O[u.fila][u.col].setTint(2894892), te = O[u.fila][u.col], this.input.keyboard.on("keyup", function (i) { switch (!0) { case i.key === "ArrowDown": u.fila < O.length - 1 && ($[u.fila][u.col].fillColor = 11248241, O[u.fila][u.col].setTint(16185078), u.fila++, $[u.fila][u.col].fillColor = 15195555, O[u.fila][u.col].setTint(2894892), te = O[u.fila][u.col]); break; case i.key === "ArrowUp": u.fila > 1 && ($[u.fila][u.col].fillColor = 11248241, O[u.fila][u.col].setTint(16185078), u.fila--, $[u.fila][u.col].fillColor = 15195555, O[u.fila][u.col].setTint(2894892), te = O[u.fila][u.col]); break; case i.key === "ArrowLeft": u.col > 1 && ($[u.fila][u.col].fillColor = 11248241, O[u.fila][u.col].setTint(16185078), u.col--, $[u.fila][u.col].fillColor = 15195555, O[u.fila][u.col].setTint(2894892), te = O[u.fila][u.col]); break; case i.key === "ArrowRight": u.col < O[u.fila].length - 1 && ($[u.fila][u.col].fillColor = 11248241, O[u.fila][u.col].setTint(16185078), u.col++, $[u.fila][u.col].fillColor = 15195555, O[u.fila][u.col].setTint(2894892), te = O[u.fila][u.col]); break; case i.key === "Backspace": te.text = te.text.slice(0, -1); break } }), this.input.keyboard.on("keyup", i => { if (us(i.key, !0) && ms(te, i.key), i.key === "Enter") { const s = te.text, a = O.findIndex(h => h.includes(te)), A = O[u.fila].indexOf(te); console.log(`Fila: ${a}, Columna: ${A}, Valor: ${s}`), this.basta.comprobarRespuesta(s, a, A) ? (console.log("Respuesta correcta"), $[a][A].fillColor = 65280, Ut++, Ut === 12 && (console.log("¬°Todas las respuestas correctas!"), this.scene.start("area_04", { entrada: "arriba" }))) : (console.log("Respuesta incorrecta"), $[a][A].fillColor = 16711680) } }) } update () { } } function us (t, e = !1) { let i; return e ? i = /^[0-9 +*/.-]$/ : i = /^[A-Za-z.,;:¬°!¬ø? ]$/, i.test(t) } function ms (t, e) { let i = t.text.length; i == 6 ? t.text = e : i < 6 && (t.text += e) } class fs extends E.Scene {
    constructor() { super({ key: "LoginScene" }) } preload () { } create () {
        this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = "width: 200px; height: 30px; font-size: 16px; padding: 5px; background-color: white; border: 1px solid black;", i = `
            width: 210px;
            height: 50px;
            font-size: 20px;
            font-weight: bold;
            padding: 5px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            color: #000;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        `; this.add.text(774, 180, "Bienvenido a Conquista Matem√°tica", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 240, "Introduzca sus datos para iniciar sesi√≥n", { fontSize: "28px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(530, 320, "Usuario:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(774, 335).createFromHTML(`<input id="user" type="text" style="${e}">`), this.add.text(500, 400, "Contrase√±a:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(774, 415).createFromHTML(`<input id="contra" type="password" style="${e}">`); const s = this.add.dom(774, 500).createFromHTML(`<button style="${i}">Login</button>`); s.addListener("click"), s.on("click", function () { const A = document.querySelector("#user"), r = document.querySelector("#contra"), h = A.value, b = r.value; let o = "", n = ""; if (h.trim() === "" || b.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } fetch(Y + "/api/usuarios", { method: "GET", headers: { "Content-Type": "application/json;charset=UTF-8" } }).then(d => { if (d.ok) return d.json(); throw new Error("Error en la autenticaci√≥n") }).then(d => { const v = d.data.find(_ => _.attributes.nombre === h && _.attributes.contrasena === b); if (v) o = v.attributes.tipo, n = v.id; else { alert("Usuario y/o contrase√±a incorrectos."); return } switch (o) { case "estudiante": localStorage.setItem("userId", n), localStorage.setItem("userTipo", o), this.scene.start("pantalla_inicio"); break; case "profesor": localStorage.setItem("userId", n), localStorage.setItem("userTipo", o), this.scene.start("EleccionScene"); break; case "admin": localStorage.setItem("userId", n), localStorage.setItem("userTipo", o), this.scene.start("Eleccion_Admin"); break; default: console.error("Error de autenticaci√≥n del tipo"); return } }).catch(d => { console.error(d) }) }, this); const a = this.add.dom(774, 560).createFromHTML(`<button style="${i}">Registro</button>`); a.addListener("click"), a.on("click", function () { this.scene.start("RegistroScene") }, this)
    }
} class ys extends E.Scene { constructor() { super({ key: "RegistroScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = "width: 200px; height: 30px; font-size: 16px; padding: 5px; background-color: white; border: 1px solid black;"; this.add.text(774, 100, "Bienvenido a Ecos de la Historia", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus datos para crear su cuenta", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(530, 185, "Usuario:", { fontSize: "25px", color: "#000000" }), this.add.dom(774, 200).createFromHTML(`<input id="user" type="text" style="${e}">`), this.add.text(500, 240, "Contrase√±a:", { fontSize: "25px", color: "#000000" }), this.add.dom(774, 250).createFromHTML(`<input id="contra" type="password" style="${e}">`), this.add.text(580, 290, "Tipo:", { fontSize: "25px", color: "#000000" }), this.add.dom(774, 300).createFromHTML(`<input id="tipo" type="text" style="${e}">`); const i = this.add.dom(774, 350).createFromHTML(`<button style="${J}">Registrar</button>`); i.addListener("click"), i.on("click", function () { const a = document.querySelector("#user"), A = document.querySelector("#contra"), r = document.querySelector("#tipo"), h = a.value, b = A.value, o = r.value.toLowerCase(); if (h.trim() === "" || b.trim() === "") { alert("Por favor, ingrese nombre de usuario y contrase√±a."); return } switch (b.length < 5 && alert("La contrase√±a debe tener al menos 5 caracteres"), o) { case "estudiante": console.log("Tipo correcto"); break; case "profesor": console.log("Tipo Correcto"); break; default: alert("Tipo solo acepta la palabra estudiante y profesor"); return }const n = { data: { nombre: h, contrasena: b, tipo: o } }; fetch(`${Y}/api/usuarios?filters[nombre][$eq]=${h}`).then(d => { if (d.ok) return d.json(); throw new Error("Error al verificar si el usuario existe") }).then(d => { if (d.data.length > 0) { console.log("El usuario ya existe: ", h, " No se puede registrar."), alert("El usuario ya existe: ", h, " No se puede registrar."); return } else return fetch(`${Y}/api/usuarios`, { method: "POST", body: JSON.stringify(n), headers: { "Content-Type": "application/json" } }) }).then(d => { if (d && d.ok) return d.json(); throw new Error("Error en el registro") }).then(d => { console.log("Registro exitoso:", d), this.scene.start("LoginScene") }).catch(d => { console.error("Error al registrar usuario:", d) }) }, this); const s = this.add.dom(774, 400).createFromHTML(`<button style="${J}">Volver</button>`); s.addListener("click"), s.on("click", function () { this.scene.start("LoginScene") }, this) } } const Ei = "/assets/info-260416de.png"; class Es extends E.Scene { constructor() { super({ key: "agregarScene" }) } preload () { this.load.image("imagenInfo", Ei) } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = this.add.image(1250, 150, "imagenInfo"); e.setInteractive(), e.setDisplaySize(100, 100), e.setTint(16777215), e.on("pointerdown", () => { this.scene.start("instrucciones_preguntas") }), this.add.text(774, 160, "Sea bienvenido maestro(a)", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 190, "Introduzca los datos para agregar m√°s preguntas", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(280, 260, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(630, 330).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${ds}"></textarea>`), this.add.text(870, 260, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1160, 290).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${G}"></textarea>`), this.add.text(255, 432, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 444).createFromHTML(`<input id="quien" type="text" placeholder="A qui√©n se refiere el contexto : Juan" style="${P}">`), this.add.text(255, 488, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 500).createFromHTML(`<input id="que" type="text" placeholder="A qu√© se refiere el contexto : Bomba" style="${P}">`), this.add.text(250, 570, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", wordWrap: { width: 260, useAdvancedWrap: !0 }, fontStyle: "bold", color: "#000000" }), this.add.dom(700, 600).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${G}"></textarea>`), this.add.text(950, 400, "Cu√°l es la respuesta al problema:", { fontSize: "25px", wordWrap: { width: 350, useAdvancedWrap: !0 }, fontStyle: "bold", color: "#000000" }), this.add.dom(1100, 560).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${G}"></textarea>`); const i = this.add.dom(774, 690).createFromHTML(`<button style="${J}">Agregar</button>`); i.addListener("click"), i.on("click", function () { const a = document.querySelector("#contexto"), A = document.querySelector("#pregunta"), r = document.querySelector("#que"), h = document.querySelector("#quien"), b = document.querySelector("#operaciones"), o = document.querySelector("#respuesta"), n = a.value, d = A.value, v = r.value, _ = h.value, m = b.value, B = o.value; if (n.trim() === "" || d.trim() === "" || v.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (et(v) === !1 || et(_) === !1 || et(m) === !1 || et(B) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const g = { data: { pregunta: d, que: v, quien: _, operaciones: m, resultado: B, contexto: n } }; fetch(`${Y}/api/vendedor-preguntas`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(g) }).then(x => { if (x.ok) return x.json(); throw new Error("Error en el registro") }).then(x => { console.log("Registro exitoso:", x), this.scene.start("EleccionScene") }).catch(x => { console.error("Error al registrar usuario:", x) }) }, this); const s = this.add.dom(320, 150).createFromHTML(`<button style="${J}">Volver</button>`); s.addListener("click"), s.on("click", function () { localStorage.getItem("userTipo") === "admin" ? this.scene.start("Eleccion_Admin") : this.scene.start("EleccionScene") }, this) } } function et (t) { return t.split(",").length - 1 !== 3 ? !1 : (console.log("N√∫mero correcto de comas."), !0) } class bs extends E.Scene {
    constructor() { super({ key: "EleccionScene" }) } preload () { } create () {
        this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = `
            width: 220px;
            height: 50px;
            font-size: 20px;
            font-weight: bold;
            padding: 5px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            color: #000000;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        `; this.add.text(774, 180, "Bienvenido a Conquista Matem√°tica", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 240, "¬øQue desea hacer?", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5); const i = this.add.dom(774, 350).createFromHTML(`<button style="${e}">Jugar</button>`); i.addListener("click"), i.on("click", function () { this.scene.start("pantalla_inicio") }, this); const s = this.add.dom(774, 420).createFromHTML(`<button style="${e}">Agregar Preguntas</button>`); s.addListener("click"), s.on("click", function () { this.scene.start("agregarScene") }, this); const a = this.add.dom(774, 490).createFromHTML(`<button style="${e}">Ver Preguntas</button>`); a.addListener("click"), a.on("click", function () { this.scene.start("ver_preguntas") }, this); const A = this.add.dom(774, 560).createFromHTML(`<button style="${e}">Cerrar Sesi√≥n</button>`); A.addListener("click"), A.on("click", function () { localStorage.clear(), this.scene.start("LoginScene") }, this)
    }
} const Rt = "/assets/edit-27c8725e.png", pt = "/assets/cleare-6490d46e.png"; class xs extends E.Scene { constructor() { super({ key: "ver_preguntas" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(1), this.add.text(774, 100, "Preguntas", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/vendedor-preguntas`).then(i => i.json()).then(i => { const s = this.add.dom(60, 125).createElement("div"), a = document.createElement("table"), A = ["Contexto", "Pregunta", "Qu√©", "Qui√©n", "Operaciones", "Resultado", " ", " "], r = document.createElement("tr"); A.forEach(o => { const n = document.createElement("th"); n.textContent = o, r.appendChild(n) }), a.appendChild(r), i.data.forEach(o => { const n = o.attributes, d = document.createElement("tr");[n.contexto, n.pregunta, n.que, n.quien, n.operaciones, n.resultado].forEach(x => { const C = document.createElement("td"); C.textContent = x, d.appendChild(C) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = Rt, m.style.width = "50px", m.style.height = "50px", m.style.cursor = "pointer", m.onclick = () => { console.log("Hiciste clic en la primera imagen de la fila con ID:", o.id); const x = JSON.stringify(o), C = localStorage.setItem("itemModificar", x); console.log(C), this.scene.start("modificarScene") }, _.appendChild(m), d.appendChild(_); const B = document.createElement("td"), g = document.createElement("img"); g.src = pt, g.style.width = "70px", g.style.height = "70px", g.style.cursor = "pointer", g.onclick = () => { const x = o.id; fetch(`${Y}/api/vendedor-preguntas/${x}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(C => { C.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${x}`), this.scene.start("ver_preguntas")) : console.error(`No se pudo eliminar el elemento con ID: ${x}`) }).catch(C => { console.error("Error al intentar eliminar:", C) }) }, B.appendChild(g), d.appendChild(B), a.appendChild(d) }), s.node.style.marginTop = "20px", s.node.style.fontFamily = "Arial, sans-serif", s.node.style.maxWidth = "1450px", s.node.style.height = "500px", s.node.style.overflowY = "auto"; const h = a.getElementsByTagName("td"); Array.from(h).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.maxWidth = "500px", o.style.backgroundColor = "rgba(255, 255, 255, 0.5)" }); const b = a.getElementsByTagName("th"); Array.from(b).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.backgroundColor = "#f2f2f2", o.style.fontStyle = "bold" }), s.node.appendChild(a) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); e.addListener("click"), e.on("click", function () { localStorage.getItem("userTipo") === "admin" ? this.scene.start("Eleccion_Admin") : this.scene.start("EleccionScene") }, this) } } class _s extends E.Scene {
    constructor() { super({ key: "Eleccion_Admin" }) } preload () { } create () {
        this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = `
            width: 220px;
            height: 60px;
            font-size: 20px;
            font-weight: bold;
            padding: 5px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            color: #000000;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        `; this.add.text(774, 180, "Bienvenido a Conquista Matem√°tica", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 240, "¬øQue desea hacer?", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5); const i = this.add.dom(774, 350).createFromHTML(`<button style="${e}">Jugar</button>`); i.addListener("click"), i.on("click", function () { this.scene.start("pantalla_inicio") }, this); const s = this.add.dom(620, 427.5).createFromHTML(`<button style="${e}">Agregar Preguntas</button>`); s.addListener("click"), s.on("click", function () { this.scene.start("agregarScene") }, this); const a = this.add.dom(905, 427.5).createFromHTML(`<button style="${e}">Ver Preguntas</button>`); a.addListener("click"), a.on("click", function () { this.scene.start("ver_preguntas") }, this); const A = this.add.dom(620, 505).createFromHTML(`<button style="${e}">Agregar QTE</button>`); A.addListener("click"), A.on("click", function () { this.scene.start("agregarQTEScene") }, this); const r = this.add.dom(905, 505).createFromHTML(`<button style="${e}">Ver QTE</button>`); r.addListener("click"), r.on("click", function () { this.scene.start("ver_QTE") }, this); const h = this.add.dom(620, 582.5).createFromHTML(`<button style="${e}">Posiciones Guardadas</button>`); h.addListener("click"), h.on("click", function () { this.scene.start("ver_posicion") }, this); const b = this.add.dom(905, 582.5).createFromHTML(`<button style="${e}">Ver Usuarios</button>`); b.addListener("click"), b.on("click", function () { this.scene.start("ver_usuarios") }, this); const o = this.add.dom(774, 660).createFromHTML(`<button style="${e}">Cerrar Sesi√≥n</button>`); o.addListener("click"), o.on("click", function () { localStorage.clear(), this.scene.start("LoginScene") }, this)
    }
} class Bs extends E.Scene { constructor() { super({ key: "ver_usuarios" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756), this.add.text(774, 180, "Usuarios", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/usuarios`).then(i => i.json()).then(i => { const s = this.add.dom(500, 210).createElement("div"), a = document.createElement("table"), A = ["ID", "Nombre", "Contrase√±a", "Tipo de usuario", " ", " "], r = document.createElement("tr"); A.forEach(o => { const n = document.createElement("th"); n.textContent = o, r.appendChild(n) }), a.appendChild(r), i.data.forEach(o => { const n = o.attributes, d = document.createElement("tr");[o.id, n.nombre, n.contrasena, n.tipo].forEach(B => { const g = document.createElement("td"); g.textContent = B, d.appendChild(g) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = pt, m.style.width = "70px", m.style.height = "70px", m.style.cursor = "pointer", m.onclick = () => { const B = o.id; fetch(`${Y}/api/usuarios/${B}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(g => { g.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${B}`), this.scene.start("ver_usuarios")) : console.error(`No se pudo eliminar el elemento con ID: ${B}`) }).catch(g => { console.error("Error al intentar eliminar:", g) }) }, _.appendChild(m), d.appendChild(_), a.appendChild(d) }), s.node.style.marginTop = "20px", s.node.style.fontFamily = "Arial, sans-serif", s.node.style.maxWidth = "1450px", s.node.style.height = "450px", s.node.style.overflowY = "auto"; const h = a.getElementsByTagName("td"); Array.from(h).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.maxWidth = "500px", o.style.backgroundColor = "rgba(255, 255, 255, 0.5)" }); const b = a.getElementsByTagName("th"); Array.from(b).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.backgroundColor = "#f2f2f2", o.style.fontStyle = "bold" }), s.node.appendChild(a) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); e.addListener("click"), e.on("click", function () { localStorage.getItem("userTipo") === "admin" ? this.scene.start("Eleccion_Admin") : this.scene.start("EleccionScene") }, this) } } class Is extends E.Scene { constructor() { super({ key: "instrucciones_preguntas" }) } preload () { } create () { let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(e.x, e.y - 30, "_fondo_instrucciones_preguntas").setOrigin(.5).setScale(.956); const i = this.add.dom(774, 750).createFromHTML(`<button style="${J}">Volver</button>`); i.addListener("click"), i.on("click", function () { localStorage.getItem("itemModificar") ? this.scene.start("modificarScene") : this.scene.start("agregarScene") }, this) } } class vs extends E.Scene { constructor() { super({ key: "modificarScene" }) } preload () { this.load.image("imagenInfo", Ei) } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = localStorage.getItem("itemModificar"), i = JSON.parse(e), s = this.add.image(1400, 100, "imagenInfo"); s.setInteractive(), s.setDisplaySize(100, 100), s.on("pointerdown", () => { this.scene.start("instrucciones_preguntas") }), this.add.text(774, 100, "Para modificar ", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus correcciones", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(380, 185, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 230).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${G}">${i.attributes.contexto}</textarea>`), this.add.text(850, 185, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 230).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${G}">${i.attributes.pregunta}</textarea>`), this.add.text(230, 365, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 380).createFromHTML(`<input id="quien" type="text" value=${i.attributes.quien} placeholder="A qui√©n se refiere el contexto : Juan" style="${P}">`), this.add.text(255, 410, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 430).createFromHTML(`<input id="que" type="text" value=${i.attributes.que} placeholder="A qu√© se refiere el contexto : Bomba" style="${P}">`), this.add.text(65, 465, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 510).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${G}">${i.attributes.operaciones}</textarea>`), this.add.text(985, 365, "Cu√°l es la respuesta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 450).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${G}">${i.attributes.resultado}</textarea>`); const a = this.add.dom(774, 650).createFromHTML(`<button style="${J}">Modificar</button>`); a.addListener("click"), a.on("click", function () { const r = document.querySelector("#contexto"), h = document.querySelector("#pregunta"), b = document.querySelector("#que"), o = document.querySelector("#quien"), n = document.querySelector("#operaciones"), d = document.querySelector("#respuesta"), v = r.value, _ = h.value, m = b.value, B = o.value, g = n.value, x = d.value; if (v.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "" || g.trim() === "" || x.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (tt(m) === !1 || tt(B) === !1 || tt(g) === !1 || tt(x) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const C = { data: { pregunta: _, que: m, quien: B, operaciones: g, resultado: x, contexto: v } }; fetch(`${Y}/api/vendedor-preguntas/${i.id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(C) }).then(me => { if (me.ok) return me.json(); throw new Error("Error al actualizar el recurso") }).then(me => { console.log("Registro exitoso:", me), localStorage.removeItem("itemModificar"), this.scene.start("ver_preguntas") }).catch(me => { console.error("Error al actualizar el recurso:", me) }) }, this); const A = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); A.addListener("click"), A.on("click", function () { localStorage.removeItem("itemModificar"), this.scene.start("ver_preguntas") }, this) } } function tt (t) { return t.split(",").length - 1 !== 3 ? !1 : (console.log("N√∫mero correcto de comas."), !0) } class Cs extends E.Scene { constructor() { super({ key: "ver_posicion" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756), this.add.text(774, 180, "Posiciones Guardadas", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/posicions`).then(i => i.json()).then(i => { const s = this.add.dom(500, 225).createElement("div"), a = document.createElement("table"), A = ["Evento", "QTE", "Jugador", "Posicion X", "Posicion Y", " ", " "], r = document.createElement("tr"); A.forEach(o => { const n = document.createElement("th"); n.textContent = o, r.appendChild(n) }), a.appendChild(r), i.data.forEach(o => { const n = o.attributes, d = document.createElement("tr");[n.evento, n.QTE, n.jugador, n.posicionX, n.posicionY].forEach(x => { const C = document.createElement("td"); C.textContent = x, d.appendChild(C) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = Rt, m.style.width = "50px", m.style.height = "50px", m.style.cursor = "pointer", m.onclick = () => { const x = JSON.stringify(o); localStorage.setItem("itemModificarPosicion", x), this.scene.start("modificarPosicionScene") }, _.appendChild(m), d.appendChild(_); const B = document.createElement("td"), g = document.createElement("img"); g.src = pt, g.style.width = "70px", g.style.height = "70px", g.style.cursor = "pointer", g.onclick = () => { const x = o.id; fetch(`${Y}/api/posicions/${x}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(C => { C.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${x}`), this.scene.start("ver_posicion")) : console.error(`No se pudo eliminar el elemento con ID: ${x}`) }).catch(C => { console.error("Error al intentar eliminar:", C) }) }, B.appendChild(g), d.appendChild(B), a.appendChild(d) }), s.node.style.marginTop = "20px", s.node.style.fontFamily = "Arial, sans-serif", s.node.style.maxWidth = "1400px", s.node.style.height = "400px", s.node.style.overflowY = "auto"; const h = a.getElementsByTagName("td"); Array.from(h).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.maxWidth = "500px", o.style.backgroundColor = "rgba(255, 255, 255, 0.5)" }); const b = a.getElementsByTagName("th"); Array.from(b).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.backgroundColor = "#f2f2f2", o.style.fontStyle = "bold" }), s.node.appendChild(a) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 680).createFromHTML(`<button style="${J}">Volver</button>`); e.addListener("click"), e.on("click", function () { this.scene.start("Eleccion_Admin") }, this) } } class Qs extends E.Scene { constructor() { super({ key: "modificarPosicionScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = localStorage.getItem("itemModificarPosicion"), i = JSON.parse(e); this.add.text(774, 100, "Para modificar ", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus correcciones", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(400, 365, "Evento:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 380).createFromHTML(`<input id="evento" type="text" value=${i.attributes.evento} placeholder="Evento" style="${P}">`), this.add.text(400, 410, "QTE:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 430).createFromHTML(`<input id="QTE" type="text" value=${i.attributes.QTE} placeholder="QTE" style="${P}">`), this.add.text(400, 465, "Jugador:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 480).createFromHTML(`<input id="jugador"  placeholder="Jugador" value=${i.attributes.jugador} style="${P}"></input>`), this.add.text(985, 355, "Posici√≥n en X:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 400).createFromHTML(`<input id="posicionX" type="number" step="any" value=${i.attributes.posicionX} placeholder="Posici√≥n en x" style="${P}"></input>`), this.add.text(985, 435, "Posici√≥n en Y:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 480).createFromHTML(`<input id="posicionY" type="number" step="any" value=${i.attributes.posicionY} placeholder="Posici√≥n en y" style="${P}"></input>`); const s = this.add.dom(774, 650).createFromHTML(`<button style="${J}">Modificar</button>`); s.addListener("click"), s.on("click", function () { const A = document.querySelector("#evento"), r = document.querySelector("#QTE"), h = document.querySelector("#jugador"), b = document.querySelector("#posicionX"), o = document.querySelector("#posicionY"), n = A.value, d = r.value, v = h.value, _ = b.value, m = o.value; if (n.trim() === "" || d.trim() === "" || v.trim() === "" || _.trim() === "" || m.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } const B = { data: { evento: n, QTE: d, jugador: v, posicionX: _, posicionY: m } }; fetch(`${Y}/api/posicions/${i.id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(B) }).then(g => { if (g.ok) return g.json(); throw new Error("Error al actualizar el recurso") }).then(g => { console.log("Registro exitoso:", g), localStorage.removeItem("itemModificarPosicion"), this.scene.start("ver_posicion") }).catch(g => { console.error("Error al actualizar el recurso:", g) }) }, this); const a = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); a.addListener("click"), a.on("click", function () { localStorage.removeItem("itemModificarPosicion"), this.scene.start("ver_posicion") }, this) } } class Ss extends E.Scene { constructor() { super({ key: "ver_QTE" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(1), this.add.text(774, 100, "QTEs", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/preguntas?pagination[page]=1&pagination[pageSize]=80`).then(i => i.json()).then(i => { const s = this.add.dom(20, 125).createElement("div"), a = document.createElement("table"), A = ["QTE", "Contexto", "Pregunta", "Qu√©", "Qui√©n", "Operaciones", "Resultado", " ", " "], r = document.createElement("tr"); A.forEach(o => { const n = document.createElement("th"); n.textContent = o, r.appendChild(n) }), a.appendChild(r), i.data.forEach(o => { const n = o.attributes, d = document.createElement("tr");[n.QTE, n.contexto, n.pregunta, n.que, n.quien, n.operaciones, n.respuesta].forEach(x => { const C = document.createElement("td"); C.textContent = x, d.appendChild(C) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = Rt, m.style.width = "50px", m.style.height = "50px", m.style.cursor = "pointer", m.onclick = () => { const x = JSON.stringify(o); localStorage.setItem("itemModificarQTE", x), this.scene.start("modificarQTEScene") }, _.appendChild(m), d.appendChild(_); const B = document.createElement("td"), g = document.createElement("img"); g.src = pt, g.style.width = "70px", g.style.height = "70px", g.style.cursor = "pointer", g.onclick = () => { const x = o.id; fetch(`${Y}/api/preguntas/${x}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(C => { C.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${x}`), this.scene.start("ver_QTE")) : console.error(`No se pudo eliminar el elemento con ID: ${x}`) }).catch(C => { console.error("Error al intentar eliminar:", C) }) }, B.appendChild(g), d.appendChild(B), a.appendChild(d) }), s.node.style.marginTop = "20px", s.node.style.fontFamily = "Arial, sans-serif", s.node.style.maxWidth = "1525px", s.node.style.height = "500px", s.node.style.overflowY = "auto"; const h = a.getElementsByTagName("td"); Array.from(h).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.maxWidth = "200px", o.style.backgroundColor = "rgba(255, 255, 255, 0.5)", o.style.overflow = "auto" }); const b = a.getElementsByTagName("th"); Array.from(b).forEach(o => { o.style.border = "1px solid #dddddd", o.style.padding = "8px", o.style.backgroundColor = "#f2f2f2", o.style.fontStyle = "bold" }), s.node.appendChild(a) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); e.addListener("click"), e.on("click", function () { this.scene.start("Eleccion_Admin") }, this) } } class ws extends E.Scene { constructor() { super({ key: "agregarQTEScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.text(774, 100, "Agregar m√°s preguntas a los QTE", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca los datos para agregar m√°s preguntas", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(80, 185, "QTE:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(204, 230).createFromHTML(`<input id="QTE" placeholder="QTE-1" style="${P}"></input>`), this.add.text(380, 185, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 230).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${G}"></textarea>`), this.add.text(850, 185, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 230).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${G}"></textarea>`), this.add.text(230, 365, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 380).createFromHTML(`<input id="quien" type="text" placeholder="A qui√©n se refiere el contexto : Juan" style="${P}">`), this.add.text(255, 410, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 430).createFromHTML(`<input id="que" type="text" placeholder="A qu√© se refiere el contexto : Bomba" style="${P}">`), this.add.text(65, 465, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 510).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${G}"></textarea>`), this.add.text(985, 365, "Cu√°l es la respuesta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 450).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${G}"></textarea>`); const e = this.add.dom(774, 650).createFromHTML(`<button style="${J}">Agregar</button>`); e.addListener("click"), e.on("click", function () { const s = document.querySelector("#QTE"), a = document.querySelector("#contexto"), A = document.querySelector("#pregunta"), r = document.querySelector("#que"), h = document.querySelector("#quien"), b = document.querySelector("#operaciones"), o = document.querySelector("#respuesta"), n = s.value, d = a.value, v = A.value, _ = r.value, m = h.value, B = b.value, g = o.value; if (n.trim() === "" || d.trim() === "" || v.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "" || g.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (it(_) === !1 || it(m) === !1 || it(B) === !1 || it(g) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const x = { data: { QTE: n, contexto: d, pregunta: v, que: _, quien: m, operaciones: B, respuesta: g } }; fetch(`${Y}/api/preguntas`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(x) }).then(C => { if (C.ok) return C.json(); throw new Error("Error en el registro") }).then(C => { console.log("Registro exitoso:", C), this.scene.start("Eleccion_Admin") }).catch(C => { console.error("Error al registrar usuario:", C) }) }, this); const i = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); i.addListener("click"), i.on("click", function () { this.scene.start("Eleccion_Admin") }, this) } } function it (t) { return t.split(",").length - 1 === 3 } class Ds extends E.Scene { constructor() { super({ key: "modificarQTEScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = localStorage.getItem("itemModificarQTE"), i = JSON.parse(e); this.add.text(774, 100, "Para modificar ", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus correcciones", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(80, 185, "QTE:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(204, 230).createFromHTML(`<input id="QTE" value=${i.attributes.QTE}  placeholder="QTE-1" style="${P}"></input>`), this.add.text(380, 185, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 230).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${G}">${i.attributes.contexto}</textarea>`), this.add.text(850, 185, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 230).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${G}">${i.attributes.pregunta}</textarea>`), this.add.text(230, 365, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 380).createFromHTML(`<input id="quien" type="text" value=${i.attributes.quien} placeholder="A qui√©n se refiere el contexto : Juan" style="${P}">`), this.add.text(255, 410, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 430).createFromHTML(`<input id="que" type="text" value=${i.attributes.que} placeholder="A qu√© se refiere el contexto : Bomba" style="${P}">`), this.add.text(65, 465, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 510).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${G}">${i.attributes.operaciones}</textarea>`), this.add.text(985, 365, "Cu√°l es la respuesta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 450).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${G}">${i.attributes.respuesta}</textarea>`); const s = this.add.dom(774, 650).createFromHTML(`<button style="${J}">Modificar</button>`); s.addListener("click"), s.on("click", function () { const A = document.querySelector("#QTE"), r = document.querySelector("#contexto"), h = document.querySelector("#pregunta"), b = document.querySelector("#que"), o = document.querySelector("#quien"), n = document.querySelector("#operaciones"), d = document.querySelector("#respuesta"), v = A.value, _ = r.value, m = h.value, B = b.value, g = o.value, x = n.value, C = d.value; if (v.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "" || g.trim() === "" || x.trim() === "" || C.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (at(B) === !1 || at(g) === !1 || at(x) === !1 || at(C) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const me = { data: { QTE: v, contexto: _, pregunta: m, que: B, quien: g, operaciones: x, respuesta: C } }; fetch(`${Y}/api/preguntas/${i.id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(me) }).then(Qe => { if (Qe.ok) return Qe.json(); throw new Error("Error al actualizar el recurso") }).then(Qe => { console.log("Registro exitoso:", Qe), localStorage.removeItem("itemModificarQTE"), this.scene.start("ver_QTE") }).catch(Qe => { console.error("Error al actualizar el recurso:", Qe) }) }, this); const a = this.add.dom(774, 700).createFromHTML(`<button style="${J}">Volver</button>`); a.addListener("click"), a.on("click", function () { localStorage.removeItem("itemModificar"), this.scene.start("ver_QTE") }, this) } } function at (t) { return t.split(",").length - 1 === 3 } let Ft; class ks extends E.Scene { constructor() { super({ key: "area_02" }) } init (e) { e && (Ft = e.entrada) } preload () { } create () { console.log("area 02"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_02").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Ft, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_03", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), y(this, this.player, "area_33", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.grupo1 = S(this, "_arbol_7", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * 1.5, cellWidth: 350, escalaElemento: .75, sizeWidth: 450, sizeHeight: 100, origenX: .65, origenY: 1.1 }), this.grupo2 = S(this, "_arbol_7", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * .2, cellWidth: 350, escalaElemento: .75, sizeWidth: 50, sizeHeight: 60, origenX: .65, origenY: 1.1 }), this.grupo1.setDepth(3), this.grupo2.setDepth(1), this.r2 = this.add.rectangle(e.x, e.y * .3, e.x * 2, e.y * .2), this.physics.world.enable([this.grupo1, this.grupo2, this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 248 ? (this.player.setDepth(2), this.grupo2.setDepth(1)) : (this.player.setDepth(1), this.grupo2.setDepth(2)) } } let Pt; class Rs extends E.Scene { constructor() { super({ key: "area_03" }) } init (e) { e && (Pt = e.entrada) } preload () { } create () { console.log("area 03"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_03").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Pt, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_04", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), y(this, this.player, "area_02", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.grupo1 = S(this, "_arbol_6", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * 1.5, cellWidth: 350, escalaElemento: .75, sizeWidth: 450, sizeHeight: 100, origenX: .65, origenY: 1.1 }), this.grupo2 = S(this, "_arbol_6", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * .2, cellWidth: 350, escalaElemento: .75, sizeWidth: 50, sizeHeight: 60, origenX: .65, origenY: 1.1 }), this.grupo1.setDepth(3), this.grupo2.setDepth(1), this.r2 = this.add.rectangle(e.x, e.y * .3, e.x * 2, e.y * .2), this.physics.world.enable([this.grupo1, this.grupo2, this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Gt; class js extends E.Scene { constructor() { super({ key: "area_04" }) } init (e) { e && (Gt = e.entrada) } preload () { } create () { console.log("area 04"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_04").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Gt, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_32", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "camino" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), y(this, this.player, "area_05", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), y(this, this.player, "area_03", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.grupo1 = S(this, "_arbol_5", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * 1.5, cellWidth: 350, escalaElemento: .75, sizeWidth: 450, sizeHeight: 100, origenX: .65, origenY: 1.1 }), this.grupo2 = S(this, "_arbol_5", { width: 4, repeticiones: 4, posicionX: e.x * .05, posicionY: e.y * .2, cellWidth: 400, escalaElemento: .75, sizeWidth: 50, sizeHeight: 60, origenX: .65, origenY: 1.1 }), this.grupo1.setDepth(3), this.grupo2.setDepth(1), this.r1 = this.add.rectangle(e.x * .44, 0, e.x * .865, e.y * .19), this.r2 = this.add.rectangle(e.x * 1.56, 0, e.x * .865, e.y * .19), this.physics.world.enable([this.grupo1, this.grupo2, this.r2, this.r1]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Xt; class Ms extends E.Scene { constructor() { super({ key: "area_05" }) } init (e) { e && (Xt = e.entrada) } preload () { } create () { console.log("area 05"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_05").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Xt, { escalaPersonaje: 1.25, esteY: e.y * 1.55 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_06", { posicionX: e.x * 2.015, posicionY: e.y * 1.55, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), y(this, this.player, "area_04", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.grupo1 = S(this, "_arbol_2", { width: 2, repeticiones: 2, posicionX: e.x * .05, posicionY: e.y * .08, cellWidth: 350, escalaElemento: .8, sizeWidth: 50, sizeHeight: 60, origenX: .6, origenY: 1.07 }), this.grupo2 = S(this, "_arbol_2", { width: 2, repeticiones: 2, posicionX: e.x * 1.03, posicionY: e.y * .6, cellWidth: 350, escalaElemento: .8, sizeWidth: 50, sizeHeight: 60, origenX: .6, origenY: 1.07 }), this.grupo1.setDepth(1), this.grupo2.setDepth(1), this.add.image(e.x * .2, e.y * 1.5, "_arbol_5").setScale(.8).setDepth(3), this.add.image(e.x * .6, e.y * 1.7, "_arbol_5").setScale(.8).setDepth(3), this.r1 = this.add.rectangle(e.x, e.y * 1.98, e.x * 2, e.y * .2), this.r2 = this.add.rectangle(e.x, e.y * .3, e.x * 2, e.y * .2), this.physics.world.enable([this.grupo1, this.grupo2, this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r1, this.r2], null) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Ht; class Ts extends E.Scene { constructor() { super({ key: "area_06" }) } init (e) { e && (Ht = e.entrada) } preload () { } create () { console.log("area 06"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_06").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Ht, { escalaPersonaje: 1.25, oesteY: e.y * 1.55 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_08", { posicionX: e.x * .95, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), y(this, this.player, "area_05", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.55, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.add.image(e.x * .53, e.y * .51, "_casa_pueblo").setScale(.82).setDepth(0), this.add.image(e.x * 1.48, e.y * .52, "_casa_pueblo").setScale(.82).setDepth(0), this.add.image(e.x * 1, e.y * 1, "_barda_1").setScale(.82).setDepth(0), this.r2 = this.add.rectangle(e.x, e.y * 1.18, e.x * 2, e.y * .2), this.physics.world.enable([this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Lt; class zs extends E.Scene { constructor() { super({ key: "area_08" }) } init (e) { e && (Lt = e.entrada) } preload () { } create () { console.log("area 08"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_08").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Lt, { escalaPersonaje: 1.25 }), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_06", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_14", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.r1 = this.add.rectangle(e.x * .378, e.y * .8, e.x * .73, e.y * 1.55), this.r2 = this.add.rectangle(e.x * 1.622, e.y * .8, e.x * .73, e.y * 1.55), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let qt; class Os extends E.Scene { constructor() { super({ key: "area_13" }) } init (e) { e && (qt = e.entrada) } preload () { } create () { console.log("area 13"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_13").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", qt, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_16", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), y(this, this.player, "area_14", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), this.CasaPueblo = this.physics.add.image(e.x * .41, e.y * .51, "_casa_pueblo").setScale(.82).setDepth(0).setImmovable(), this.arbol1 = this.physics.add.image(e.x * .08, e.y * 1, "_arbol_5").setScale(.82).setDepth(1).setImmovable(), this.arbol2 = this.physics.add.image(e.x * 1.7, e.y * 1.5, "_arbol_5").setScale(.82).setDepth(1).setImmovable(), this.cuveta1 = this.physics.add.image(e.x * 1.4, e.y * 1.7, "_cubeta_2").setScale(.82).setDepth(1).setImmovable(), this.pozo1 = this.physics.add.image(e.x * 1.25, e.y * 1.65, "_pozo_1").setScale(.82).setDepth(1).setImmovable(), this.lavadero1 = this.physics.add.image(e.x * .25, e.y * 1.8, "_lavadero_1").setScale(.82).setDepth(1).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .25), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .75), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .25), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .75), this.pozo1.setSize(this.pozo1.width, this.pozo1.height * .45), this.pozo1.setOffset(0, this.pozo1.height * .35), this.r2 = this.add.rectangle(e.x * 1.225, e.y * .4, e.x, e.y * .8), this.physics.world.enable([this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.CasaPueblo, this.arbol1, this.lavadero1, this.cuveta1, this.arbol2, this.pozo1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 696 ? (this.pozo1.setDepth(0), this.cuveta1.setDepth(0)) : (this.pozo1.setDepth(2), this.cuveta1.setDepth(2)) } } let Kt; class Ys extends E.Scene { constructor() { super({ key: "area_14" }) } init (e) { e && (Kt = e.entrada) } preload () { } create () { console.log("area 14"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_14").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Kt, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_08", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_17", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), y(this, this.player, "area_13", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbol1 = this.physics.add.image(e.x * .6, e.y * .2, "_arbol_5").setScale(.82).setDepth(0).setImmovable(), this.arbol2 = this.physics.add.image(e.x * .35, e.y * 1.44, "_arbol_5").setScale(.82).setDepth(2).setImmovable(), this.arbusto1 = this.physics.add.image(e.x * .2, e.y * .5, "_arbol_1").setScale(.82).setDepth(0).setImmovable(), this.arbusto2 = this.physics.add.image(e.x * .7, e.y * 1.65, "_arbol_1").setScale(.82).setDepth(0).setImmovable(), this.add.image(e.x * 1.27, e.y * .4, "_arbol_5").setScale(.82).setDepth(1), this.add.image(e.x * 1.4, e.y * 1.74, "_arbol_1").setScale(.82).setDepth(1), this.add.image(e.x * 1.8, e.y * 1.74, "_arbol_1").setScale(.82).setDepth(1), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbusto1.setSize(this.arbusto1.width, this.arbusto1.height * .5), this.arbusto1.setOffset(0, this.arbusto1.height * .5), this.arbusto2.setSize(this.arbusto2.width, this.arbusto2.height * .5), this.arbusto2.setOffset(0, this.arbusto2.height * .5), this.r2 = this.add.rectangle(e.x * 1.58, e.y, e.x * .75, e.y * 2), this.physics.world.enable([this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbusto1, this.arbusto2, this.r2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 287 ? (this.arbol1.setDepth(0), this.arbusto1.setDepth(0)) : (this.arbol1.setDepth(2), this.arbusto1.setDepth(2)), this.player.y > 748 ? this.arbusto2.setDepth(0) : this.arbusto2.setDepth(2) } } let Zt; class Js extends E.Scene { constructor() { super({ key: "area_16" }) } init (e) { e && (Zt = e.entrada) } preload () { } create () { console.log("area 16"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_16").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Zt, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_13", { posicionX: e.x * 1.015, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_22", { posicionX: e.x * 1.015, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), y(this, this.player, "area_17", { posicionX: e.x * 2.015, posicionY: e.y, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), this.arbol1 = this.physics.add.image(e.x * 1.322, e.y * .145, "_arbol_5").setScale(.82).setDepth(2).setImmovable(), this.cuveta1 = this.physics.add.image(e.x * 1.37, e.y * .7, "_cubeta_2").setScale(.82).setDepth(2).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.r1 = this.add.rectangle(e.x * .425, e.y * .57, e.x * .85, e.y), this.r2 = this.add.rectangle(e.x * .46, e.y * 1.601, e.x * .85, e.y * .8), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2, this.arbol1, this.cuveta1]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 265 ? (this.arbol1.setDepth(0), this.cuveta1.setDepth(0)) : (this.arbol1.setDepth(2), this.cuveta1.setDepth(2)) } } let Vt; class Ns extends E.Scene { constructor() { super({ key: "area_17" }) } init (e) { e && (Vt = e.entrada) } preload () { } create () { console.log("area 17"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_17").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Vt, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_14", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_23", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), y(this, this.player, "area_16", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbol1 = this.physics.add.image(e.x * 1.65, e.y * 1.44, "_arbol_5").setScale(.82).setDepth(1).setImmovable(), this.arbol2 = this.physics.add.image(e.x * 1.343, e.y * .14, "_arbol_2").setScale(.9, .82).setDepth(1).setImmovable(), this.arbol3 = this.physics.add.image(e.x * 1.926, e.y * .137, "_arbol_2").setScale(.9, .82).setDepth(1).setImmovable(), this.caja = this.physics.add.image(e.x * 1.28, e.y * 1.74, "_caja_naranjas_1").setScale(.82).setDepth(1).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbol3.setSize(this.arbol3.width * .2, this.arbol3.height * .15), this.arbol3.setOffset(this.arbol3.width * .38, this.arbol3.height * .85), this.caja.setSize(this.caja.width, this.caja.height * .7), this.caja.setOffset(0, this.caja.height * .15), this.r1 = this.add.rectangle(e.x * .425, e.y * .32, e.x * .85, e.y * .7), this.r2 = this.add.rectangle(e.x * 1.625, e.y * .65, e.x * .485, e.y * .35), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbol3, this.caja, this.r1, this.r2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 295 ? (this.arbol2.setDepth(0), this.arbol3.setDepth(0)) : (this.arbol2.setDepth(2), this.arbol3.setDepth(2)), this.player.y < 600 ? this.caja.setDepth(2) : this.caja.setDepth(0) } } let Wt; class Us extends E.Scene { constructor() { super({ key: "area_22" }) } init (e) { e && (Wt = e.entrada) } preload () { } create () { console.log("area 22"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_22").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Wt, { escalaPersonaje: 1.25 }), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_16", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_26", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.r1 = this.add.rectangle(e.x * .77, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.22, e.y, 100, e.y * 2), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let $t; class Fs extends E.Scene { constructor() { super({ key: "area_23" }) } init (e) { e && ($t = e.entrada) } preload () { } create () { console.log("area 23"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_23").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", $t, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_17", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_24", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), this.CasaPueblo = this.physics.add.image(e.x * 1.6, e.y * 0, "_casa_pueblo").setScale(.82).setDepth(0).setImmovable(), this.Maseta1 = this.physics.add.image(e.x * 1.34, e.y * .55, "_meceta_1").setScale(.82).setDepth(0).setImmovable(), this.Maseta2 = this.physics.add.image(e.x * 1.86, e.y * .55, "_meceta_1").setScale(.82).setDepth(0).setImmovable(), this.Maseta1.setSize(this.Maseta1.width, this.Maseta1.height * .8), this.Maseta1.setOffset(0, 0), this.Maseta2.setSize(this.Maseta2.width, this.Maseta2.height * .8), this.Maseta2.setOffset(0, 0), this.r1 = this.add.rectangle(e.x * .79, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.25, e.y * 1.4, e.x * 1.5, 100), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.CasaPueblo, this.Maseta1, this.Maseta2, this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let ei; class Ps extends E.Scene { constructor() { super({ key: "area_24" }) } init (e) { e && (ei = e.entrada) } preload () { } create () { console.log("area 24"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_24").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ei, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_31", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_28", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), y(this, this.player, "area_25", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), y(this, this.player, "area_23", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbolCentro = this.physics.add.image(e.x * 1, e.y * .92, "_arbol_centro").setScale(.82).setDepth(2).setImmovable(), this.arbolCentro.setSize(this.arbolCentro.width * .46, this.arbolCentro.height * .272), this.arbolCentro.setOffset(this.arbolCentro.width * .265, this.arbolCentro.height * .52), this.c1 = this.add.circle(e.x * .495, e.y * 1.08, 50), this.c2 = this.add.circle(e.x * 1.336, e.y * 1.08, 50), this.physics.world.enable([this.c1, this.c2]), this.c1.body.immovable = !0, this.c1.body.setCircle(115), this.c2.body.immovable = !0, this.c2.body.setCircle(115), this.physics.add.collider(this.player, [this.arbolCentro, this.c1, this.c2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 428 ? this.arbolCentro.setDepth(2) : this.arbolCentro.setDepth(0) } } let ti; class Gs extends E.Scene { constructor() { super({ key: "area_25" }) } init (e) { e && (ti = e.entrada) } preload () { } create () { console.log("area 25"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_25").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ti, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_24", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbusto1 = this.physics.add.image(e.x * .4, e.y * .5, "_arbol_1").setScale(.82).setDepth(0).setImmovable(), this.arbusto2 = this.physics.add.image(e.x * .4, e.y * 1.6, "_arbol_1").setScale(.82).setDepth(2).setImmovable(), this.add.image(e.x * 1.85, e.y * 1.6, "_arbol_1").setScale(.82), this.add.image(e.x * 1.85, e.y * .25, "_arbol_1").setScale(.82), this.add.image(e.x * 1.2, e.y * 1.7, "_arbol_1").setScale(.82), this.add.image(e.x * 1.2, e.y * .15, "_arbol_1").setScale(.82), this.arbusto1.setSize(this.arbusto1.width, this.arbusto1.height * .5), this.arbusto1.setOffset(0, this.arbusto1.height * .5), this.arbusto2.setSize(this.arbusto2.width, this.arbusto2.height * .5), this.arbusto2.setOffset(0, this.arbusto2.height * .5), this.r2 = this.add.rectangle(e.x * 1.1, e.y, 100, e.y * 2), this.c1 = this.add.circle(e.x * .98, e.y * 1.05, 275), this.physics.world.enable([this.r2, this.c1]), this.r2.body.immovable = !0, this.c1.body.immovable = !0, this.c1.body.setCircle(275), this.physics.add.collider(this.player, [this.arbusto1, this.arbusto2, this.r2, this.c1]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 156 ? this.arbusto1.setDepth(2) : this.arbusto1.setDepth(0), this.player.y < 592 ? this.arbusto2.setDepth(2) : this.arbusto2.setDepth(0) } } let ii; class Xs extends E.Scene { constructor() { super({ key: "area_26" }) } init (e) { e && (ii = e.entrada) } preload () { } create () { console.log("area 26"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_26").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ii, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_22", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_30", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.arbol1 = this.physics.add.image(e.x * .6, e.y * .4, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol2 = this.physics.add.image(e.x * 1.7, e.y * .2, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol3 = this.physics.add.image(e.x * 1.85, e.y * 1.2, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol4 = this.physics.add.image(e.x * .2, e.y * 1, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol5 = this.physics.add.image(e.x * 1.4, e.y * 1.45, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol6 = this.physics.add.image(e.x * .6, e.y * 1.45, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.letrero1 = this.physics.add.image(e.x * 1.34, e.y * .45, "_letrero_1").setScale(.55).setDepth(2).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbol3.setSize(this.arbol3.width * .2, this.arbol3.height * .15), this.arbol3.setOffset(this.arbol3.width * .38, this.arbol3.height * .85), this.arbol4.setSize(this.arbol4.width * .2, this.arbol4.height * .15), this.arbol4.setOffset(this.arbol4.width * .38, this.arbol4.height * .85), this.arbol5.setSize(this.arbol5.width * .2, this.arbol5.height * .15), this.arbol5.setOffset(this.arbol5.width * .38, this.arbol5.height * .85), this.arbol6.setSize(this.arbol6.width * .2, this.arbol6.height * .15), this.arbol6.setOffset(this.arbol6.width * .38, this.arbol6.height * .85), this.letrero1.setSize(this.letrero1.width * .3, this.letrero1.height * .55), this.letrero1.setOffset(this.letrero1.width * .38, this.letrero1.height * .45), this.r1 = this.add.rectangle(e.x * .05, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.97, e.y, 100, e.y * 2), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbol3, this.arbol4, this.arbol5, this.arbol6, this.letrero1, this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 191 ? this.arbol2.setDepth(2) : this.arbol2.setDepth(0), this.player.y < 193 ? this.letrero1.setDepth(2) : this.letrero1.setDepth(0), this.player.y < 270 ? this.arbol1.setDepth(2) : this.arbol1.setDepth(0), this.player.y < 508 ? this.arbol4.setDepth(2) : this.arbol4.setDepth(0), this.player.y < 587 ? this.arbol3.setDepth(2) : this.arbol3.setDepth(0) } } let ai; class Hs extends E.Scene { constructor() { super({ key: "area_28" }) } init (e) { e && (ai = e.entrada) } preload () { } create () { console.log("area 28"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_28").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ai, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_24", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), this.r1 = this.add.rectangle(e.x, e.y * .94, e.x * 2, 100), this.physics.world.enable(this.r1), this.r1.body.immovable = !0, this.physics.add.collider(this.player, this.r1) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let si; class Ls extends E.Scene { constructor() { super({ key: "area_30" }) } init (e) { e && (si = e.entrada) } preload () { } create () { console.log("area 30"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_30").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", si, { escalaPersonaje: 1.25, surX: e.x * .28 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_26", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), y(this, this.player, "area_34", { posicionX: e.x * .28, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.arbusto1 = this.physics.add.image(e.x * .35, e.y * .45, "_arbol_8").setScale(.82).setDepth(2).setImmovable(), this.arbusto2 = this.physics.add.image(e.x * 1.15, e.y * 1.4, "_arbol_8").setScale(.82).setDepth(2).setImmovable(), this.arbusto3 = this.physics.add.image(e.x * 1.65, e.y * 1.05, "_arbol_8").setScale(.82).setDepth(2).setImmovable(), this.arbol1 = this.physics.add.image(e.x * .6, e.y * .1, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol2 = this.physics.add.image(e.x * .1, e.y * .5, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol3 = this.physics.add.image(e.x * 1.8, e.y * .2, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol4 = this.physics.add.image(e.x * 1.3, e.y * .7, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol5 = this.physics.add.image(e.x * .8, e.y * 1.6, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.add.image(e.x * 1.6, e.y * 1.9, "_arbol_7").setScale(.82).setDepth(2), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbol3.setSize(this.arbol3.width * .2, this.arbol3.height * .15), this.arbol3.setOffset(this.arbol3.width * .38, this.arbol3.height * .85), this.arbol4.setSize(this.arbol4.width * .2, this.arbol4.height * .15), this.arbol4.setOffset(this.arbol4.width * .38, this.arbol4.height * .85), this.arbol5.setSize(this.arbol5.width * .2, this.arbol5.height * .15), this.arbol5.setOffset(this.arbol5.width * .38, this.arbol5.height * .85), this.arbusto1.setSize(this.arbusto1.width, this.arbusto1.height * .5), this.arbusto1.setOffset(0, this.arbusto1.height * .5), this.arbusto2.setSize(this.arbusto2.width, this.arbusto2.height * .5), this.arbusto2.setOffset(0, this.arbusto2.height * .5), this.arbusto3.setSize(this.arbusto3.width, this.arbusto3.height * .5), this.arbusto3.setOffset(0, this.arbusto3.height * .5), this.r1 = this.add.rectangle(e.x * .05, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.97, e.y, 100, e.y * 2), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbol3, this.arbol4, this.arbol5, this.arbusto1, this.arbusto2, this.arbusto3, this.r1, this.r2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 151 ? (this.arbol1.setDepth(2), this.arbusto1.setDepth(2)) : (this.arbol1.setDepth(0), this.arbusto1.setDepth(0)), this.player.y < 191 ? this.arbol3.setDepth(2) : this.arbol3.setDepth(0), this.player.y < 310 ? this.arbol2.setDepth(2) : this.arbol2.setDepth(0), this.player.y < 376 ? this.arbusto3.setDepth(2) : this.arbusto3.setDepth(0), this.player.y < 389 ? this.arbol4.setDepth(2) : this.arbol4.setDepth(0), this.player.y < 611 ? this.arbusto2.setDepth(2) : this.arbusto2.setDepth(0) } } let Ai; class qs extends E.Scene { constructor() { super({ key: "area_31" }) } init (e) { e && (Ai = e.entrada) } preload () { } create () { console.log("area 31"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_31").setScale(.855, .785).setDepth(-1), this.add.image(e.x * .35, e.y * .6, "_arbol_2").setScale(.6).setDepth(-1), this.add.image(e.x * 1.65, e.y, "_arbol_2").setScale(.6).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Ai, { escalaPersonaje: 1.25 }), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_24", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.r1 = this.add.rectangle(e.x * .48, e.y * 1.8, 200, 200), this.r2 = this.add.rectangle(e.x * 1.55, e.y * 1.8, 200, 200), this.r3 = this.add.rectangle(e.x * .69, e.y * 1.92, e.x * .4, 50), this.r4 = this.add.rectangle(e.x * 1.335, e.y * 1.92, e.x * .45, 50), this.r5 = this.add.rectangle(e.x * .69, e.y * 1.65, e.x * .4, 50), this.r6 = this.add.rectangle(e.x * 1.335, e.y * 1.65, e.x * .45, 50), this.entradaIglesia = this.add.rectangle(e.x, e.y * 1.62, e.x * .25, 50), this.physics.world.enable([this.r1, this.r2, this.r3, this.r4, this.r5, this.r6, this.entradaIglesia]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.r3.body.immovable = !0, this.r4.body.immovable = !0, this.r5.body.immovable = !0, this.r6.body.immovable = !0, this.entradaIglesia.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2, this.r3, this.r4, this.r5, this.r6]), this.physics.add.collider(this.player, this.entradaIglesia) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let bt = [], oi = "", xt = !1, f, ne, pe = { novia: void 0, filberto: void 0 }, _t, st = { acciones: { interactuar: void 0, pasarDialogo: void 0 } }, At = !1, Bt = !1; class Ks extends E.Scene {
    constructor() { super({ key: "area_32" }) } init (e) { e && (oi = e.entrada) } preload () { } create () {
        console.log("area 32"), st.acciones.interactuar = this.input.keyboard.addKey("F"), st.acciones.pasarDialogo = this.input.keyboard.addKey("SPACE"), pe.filberto = [`Filiberto Tun:

Buenos d√≠as, Juan, te traigo buenas noticias o tal vez no tan buenas para ti.`, `Juan Cupul:

Buenos d√≠as, Filiberto, que quieres decirme con eso.`, `Filiberto Tun:

El plan se llevar√° a cabo pronto, pero para tu mala suerte ser√° ma√±ana y se
decidi√≥ que cuidar√≠as de la bomba esta noche.`, `Juan Cupul:

¬°¬°En serio!! ... Pero ma√±ana es mi boda‚Ä¶ `, `Filiberto Tun:

Ya lo se ... Lo siento `, `Juan Cupul:

No te preocupes entiendo la importancia de esto y por eso lo hare, solo necesito
explicarle esto a mi novia.`, `Filiberto Tun:

Entiendo, me adelantar√©. Te veo en la milpa del Oeste.`, `Juan Cupul:

Ah√≠ estar√©.`], pe.filberto = [`Filiberto Tun:

Buenos d√≠as, Juan, te traigo buenas noticias o tal vez no tan buenas para ti.`], pe.novia = [`${ri(40)}Juan le explica a Dolores lo que sucede...`, `Mar√≠a Dolores:

Ya veo, entonces eso es lo que paso.`, `Juan Cupul:

Lo siento, ma√±ana se supone que ser√≠a importante.`, `Mar√≠a Dolores:

No te preocupes, se lo importante que es esto, te estar√© esperando aqu√≠.`, `Juan Cupul:

¬°¬°Gracias!!`, `Filiberto Tun:

JeJe cuando te sientas cansado puedes volver aqu√≠, te dir√© lo que necesites.`, `Juan Cupul:

Nos vemos luego. Regresare.`, `Juan Cupul:

Te lo prometo.`, `Mar√≠a Dolores:

Nos vemos.`, `${ri(40)}Ve a la casa de la milpa que est√° al Oeste`], _t = pe.filberto.length, this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), f = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }, this.add.image(f.x, f.y, "_fondo_area_32").setScale(.8, .735).setDepth(-1), this.arbolesGrupo1 = S(this, "_arbol_1", { repeticiones: 8, width: 8, cellWidth: 190, cellHeight: 120, posicionX: 15, posicionY: 10, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo2 = S(this, "_arbol_1", { repeticiones: 8, height: 8, cellWidth: 190, cellHeight: 120, posicionX: -5, posicionY: 130, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo3 = S(this, "_arbol_1", { repeticiones: 8, height: 8, cellWidth: 190, cellHeight: 120, posicionX: 1460, posicionY: 130, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo4 = S(this, "_arbol_1", { repeticiones: 3, width: 3, cellWidth: 190, cellHeight: 120, posicionX: 90, posicionY: 750, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo5 = S(this, "_arbol_1", { repeticiones: 3, width: 3, cellWidth: 190, cellHeight: 120, posicionX: 890, posicionY: 750, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), bt.push(this.add.rectangle(f.x * .62, f.y * .92, f.x * .5, f.y * .95, 65535, 0)), bt.push(this.add.rectangle(f.x * 1.35, f.y * .92, f.x * .5, f.y * .95, 65535, 0)), this.limitesCasa = this.physics.add.group(bt), this.limitesCasa.children.iterate(e => { e.body.immovable = !0 }), this.physics.world.enable(this.limitesCasa), this.add.image(f.x * .985, f.y * .699, "_casa_juan").setScale(.8), this.cubeta = this.physics.add.image(f.x * 1.88, f.y * 1.12, "_cubeta_1").setScale(.65).setImmovable(!0), this.pozo = this.physics.add.image(f.x * 1.8, f.y * 1.18, "_pozo_1").setScale(.8).setImmovable(!0), oi === "casa" ? this.player = this.physics.add.sprite(f.x * .985, f.y * 1.35, "_sprites_juan_cupul").setScale(1.25) : this.player = this.physics.add.sprite(f.x * .985, f.y * 1.85, "_sprites_juan_cupul").setScale(1.25), this.player.setCollideWorldBounds(!0), this.player.setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), this.physics.world.enable([this.arbolesGrupo1, this.arbolesGrupo2, this.arbolesGrupo3, this.arbolesGrupo4, this.arbolesGrupo5]), this.physics.add.collider(this.player, [this.arbolesGrupo1, this.arbolesGrupo2, this.arbolesGrupo3, this.arbolesGrupo4, this.arbolesGrupo5, this.limitesCasa, this.pozo, this.cubeta], null, null, this), this.salidathis = y(this, this.player, "area_04", { posicionX: f.x * 1.015, posicionY: f.y * 2.05, altoSalida: f.y * .15, anchoSalida: f.x * .35, valoresSiguienteEscena: { entrada: "arriba" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.puerta = y(this, this.player, "area_32_interior", { posicionX: f.x * .985, posicionY: f.y * 1.08, anchoSalida: f.x * .25, altoSalida: f.y * .4, valoresSiguienteEscena: { entradaPuerta: !0 } }), Bt || Zs(this, { x: f.x * 1.3, y: f.y * 1.55 }), this.indexTexto = 0, this.movimientoLimitado = !1, this.teclaPrecionada = !1, this.timer2 = this.time.addEvent({}), this.permitirCambio = !1, this.contrlesEnPantalla = !1, this.interaccionFilberto = !1
    } update () { this.player.setVelocity(0), this.movimientoLimitado || this.Movimientos.movimientoPersonaje(this.player), st.acciones.interactuar.isDown && (Bt || (this.interaccionFilberto || this.interaccionNoviaJuan) && (!this.bannerTxt && !this.finTexto && (this.movimientoLimitado = !0, this.bannerTxt = this.add.image(f.x * 1.015, f.y * 1.72, "_banner_dialogos").setScale(.8, .9).setDepth(5)), !ne && !this.finTexto && (xt ? (ne = this.add.text(f.x * .2, f.y * 1.55, pe.novia[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })) : (ne = this.add.text(f.x * .2, f.y * 1.55, pe.filberto[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))))), st.acciones.pasarDialogo.isDown && (this.finTexto ? (ne && ne.destroy(), this.bannerTxt && this.bannerTxt.destroy(), xt || (xt = !0, this.movimientoLimitado = !0, this.time.delayedCall(400, () => { this.tweens.add({ targets: this.filberto, x: f.x * 1.015, y: f.y * 1.55, duration: 800, onComplete: () => { this.time.delayedCall(150, () => { this.tweens.add({ targets: this.filberto, x: f.x * 1.015, y: f.y * 2, duration: 800, onComplete: () => { this.filberto.destroy(), this.areaFilberto.destroy(), this.crearPersonajeNovia() } }), this.filberto.anims.play("walkDown_filberto") }), this.filberto.anims.play("idleFront_filberto") } }), this.filberto.anims.play("walkLeft_filberto") }, [], this)), At && (Bt = !0), this.time.delayedCall(800, () => { _t = pe.novia.length, At ? this.movimientoLimitado = !1 : (At = !0, ne = void 0, this.bannerTxt = void 0, this.indexTexto = 0, this.permitirCambio = !1, this.finTexto = !1), console.log(ne) }, [], this)) : ne && this.permitirCambio && (this.permitirCambio = !1, At ? ne.text = pe.novia[this.indexTexto++] : ne.text = pe.filberto[this.indexTexto++], this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))), this.indexTexto <= _t ? this.finTexto = !1 : this.finTexto = !0, this.filberto && this.player.y < this.filberto.y ? this.filberto.setDepth(2) : this.filberto && this.filberto.setDepth(0), this.novia_juan && this.player.y < this.novia_juan.y ? this.novia_juan.setDepth(2) : this.novia_juan && this.novia_juan.setDepth(0) } crearPersonajeNovia () { this.novia_juan = this.physics.add.sprite(f.x, f.y, "_sprites_novia_juan").setScale(1.25), this.novia_juan.anims.play("idleBack_novia_juan"), this.areaNovia = Ue(this, this.novia_juan, { ancho: this.novia_juan.width * .8, alto: this.novia_juan.height * .4 }), this.idle_dialogo = this.add.sprite(this.novia_juan.x, this.novia_juan.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), this.idle_dialogo.visible = !1, this.physics.add.overlap(this.player, this.novia_juan, () => { this.idle_dialogo.x = this.novia_juan.x, this.idle_dialogo.y = this.novia_juan.y * .93, this.areaNovia.x = this.novia_juan.x, this.areaNovia.y = this.novia_juan.y + this.novia_juan.width * .3, this.interaccionNoviaJuan = !0 }, null, this), this.physics.add.collider(this.player, this.areaNovia), this.timerInteraccion = this.time.addEvent({ delay: 10, callback: () => { this.interaccionNoviaJuan ? this.idle_dialogo.anims.isPlaying ? this.interaccionNoviaJuan = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.interaccionNoviaJuan = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }), this.time.delayedCall(100, () => { this.tweens.add({ targets: this.novia_juan, x: f.x * 1.015, y: f.y * 1.4, duration: 2e3, onComplete: () => { this.time.delayedCall(150, () => { this.tweens.add({ targets: this.novia_juan, x: f.x * 1.08, y: f.y * 1.4, duration: 400, onComplete: () => { this.novia_juan.anims.play("idleFront_novia_juan"), this.movimientoLimitado = !1 } }), this.novia_juan.anims.play("walkRight_novia_juan") }), this.novia_juan.anims.play("idleRight_novia_juan") } }), this.novia_juan.anims.play("walkDown_novia_juan") }) }
} function ri (t) {
    return `

`+ " ".repeat(t)
} function Zs (t, e = { x: 100, y: 100 }) { t.filberto = t.physics.add.sprite(e.x, e.y, "_sprites_filberto").setScale(1.25), t.filberto.anims.play("idleLeft_filberto"), t.idle_dialogo = t.add.sprite(t.filberto.x, t.filberto.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), t.idle_dialogo.visible = !1, t.areaFilberto = Ue(t, t.filberto, { ancho: t.filberto.width * .8, alto: t.filberto.height * .4 }), t.physics.add.overlap(t.player, t.filberto, () => { t.idle_dialogo.x = t.filberto.x, t.idle_dialogo.y = t.filberto.y * .93, t.areaFilberto.x = t.filberto.x, t.areaFilberto.y = t.filberto.y + t.filberto.width * .3, t.interaccionFilberto = !0 }, null, t), t.physics.add.collider(t.player, t.areaFilberto), t.timerInteraccion = t.time.addEvent({ delay: 10, callback: () => { t.interaccionFilberto ? (t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !0, t.idle_dialogo.anims.play("idle_dialogo")), t.interaccionFilberto = !1) : t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !1, t.idle_dialogo.anims.stop()) }, callbackScope: t, loop: !0 }) } const Vs = !1, Ws = "Hola", $s = { ayudaControlesNPC: Vs, entrada: Ws }; let ni = $s.ayudaControlesNPC; class eA { constructor() { } ayudaControlesNPC_Disponible () { return ni } actualzizarAyudaControlesNPC_Disponible () { ni = !0 } } let ot = { acciones: { interactuar: void 0, pasarDialogo: void 0 } }, Re = [], li = [], hi = !1, Ce, rt = { controles: void 0, novia: void 0 }, di, It = !1, c, F; class tA extends E.Scene {
    constructor() { super({ key: "area_32_interior" }) } init (e) { e && (hi = e.entradaPuerta) } preload () { } create () {
        this.datosJg = new eA, ot.acciones.interactuar = this.input.keyboard.addKey("F"), ot.acciones.pasarDialogo = this.input.keyboard.addKey("SPACE"), rt.novia = [`Mar√≠a Dolores:

(sorprendida) Buenos d√≠as, veo que apenas te levantas.`, `Juan Cupul:

Buenos d√≠as, los preparativos para la boda de ma√±ana me dejaron despierto hasta tarde.`, `Mar√≠a Dolores:

Bueno, no te sobre esfuerces, no queremos que ma√±ana no estes disponible.`, `Juan Cupul:

No te preocupes, es lo que menos quiero.`, `Mar√≠a Dolores:

Bueno, ven a desayunar que Filiberto ha llegado y dice que quiere hablar contigo.`, `Juan Cupul:

Ya voy, debe de ser importante.`, `Mar√≠a Dolores:

No olvides que puedes moverte con las flechas del teclado.`, `Juan Cupul:

Gracias.`], di = rt.novia.length - 1, this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), c = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }, this.pantallControles = this.add.image(c.x, c.y, "_pantalla_controles").setDepth(6).setScale(.6), this.pantallControles.visible = !1, this.pantallNarracion = this.add.image(c.x, c.y, "_pantalla_narracion").setDepth(6).setScale(.8), this.pantallNarracion.visible = !1, this.add.image(c.x, c.y, "_fondo_interior_casa_juan").setScale(.8, .735), this.cama = this.physics.add.image(c.x * .5, c.y * 1.1, "_cama_1").setScale(1.7, 1.6), this.mesa_1 = this.physics.add.image(c.x * 1.4, c.y * 1.2, "_mesa_1").setScale(1.3, 1.4), this.mesa_2 = this.physics.add.image(c.x * 1.4, c.y * .69, "_mesa_2").setScale(1.25, 1), this.mesa_2.setSize(this.mesa_2.width * .9, this.mesa_2.height * .5), this.mesa_2.setOffset(this.mesa_2.width * .05, this.mesa_2.height * .18), this.ropero = this.physics.add.image(c.x, c.y * .55, "_ropero_1").setScale(1.4, 1.2), this.machete = this.physics.add.image(c.x * 1.5, c.y * 1.7, "_machete_1").setImmovable().setScale(.6, .7), li.push(this.cama, this.mesa_1, this.mesa_2, this.ropero), this.decoracionesCasa = this.physics.add.group(li), this.decoracionesCasa.children.iterate(e => { e.body.immovable = !0 }), hi ? (F = this.physics.add.sprite(c.x * 1.015, c.y * 1.68, "_sprites_juan_cupul").setScale(1.25), F.anims.play("idleFront_juan"), this.datosJg.actualzizarAyudaControlesNPC_Disponible()) : (F = this.physics.add.sprite(c.x * .8, c.y, "_sprites_juan_cupul").setScale(1.25), F.anims.play("idleRight_juan")), F.setDepth(1), w(F, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), this.physics.add.collider(F, this.machete, (e, i) => { this.movimientoLimitado = !0, i.destroy(), this.time.delayedCall(200, () => this.movimientoLimitado = !1, [], this) }, null, this), Re.push(this.add.rectangle(c.x * .2, c.y, c.x * .15, c.y * 2, 65535, 0)), Re.push(this.add.rectangle(c.x * 1.8, c.y, c.x * .15, c.y * 2, 65280, 0)), Re.push(this.add.rectangle(c.x, c.y * .42, c.x * 2, c.y * .5, 16777215, 0)), Re.push(this.add.rectangle(c.x * .51, c.y * 1.8, c.x * .8, c.y * .15, 0, 0)), Re.push(this.add.rectangle(c.x * 1.52, c.y * 1.8, c.x * .8, c.y * .15, 0, 0)), this.limitesCasa = this.physics.add.group(Re), this.physics.world.enable(this.limitesCasa), this.limitesCasa.children.iterate(e => { e.body.immovable = !0 }), this.physics.add.collider(F, this.limitesCasa, null, null, this), this.physics.add.collider(F, this.decoracionesCasa, null, null, this), this.interaccionNoviaJuan = !1, this.datosJg.ayudaControlesNPC_Disponible() ? (ci(this, { x: c.x * 1.1, y: c.y }), this.novia_juan.anims.play("idleFront_novia_juan")) : (this.time.delayedCall(800, () => { this.pantallNarracion.visible = !0, this.i = !1, this.a = this.add.text(c.x, c.y * 1.7, "Presiona cualquier tecla", { fontFamily: "Arial", fontSize: 32, color: "#000000", align: "left" }).setOrigin(.5), this.a.setDepth(5), this.t = this.time.addEvent({ loop: !0, callbackScope: this, callback: () => { this.a.visible = !this.a.visible }, delay: 650 }), this.time.delayedCall(4e3, () => { this.i = !0 }), this.input.keyboard.on("keydown", () => { this.i && (this.i = !1, this.a.destroy(), this.t.destroy(), this.pantallNarracion.visible = !1, this.time.delayedCall(1500, () => { this.pantallControles.visible = !0, this.i = !1, this.a = this.add.text(c.x, c.y * 1.7, "Presiona cualquier tecla", { fontFamily: "Arial", fontSize: 32, color: "#000000", align: "left" }).setOrigin(.5), this.a.setDepth(5), this.t = this.time.addEvent({ loop: !0, callbackScope: this, callback: () => { this.a.visible = !this.a.visible }, delay: 650 }), this.time.delayedCall(4e3, () => { this.i = !0 }), this.input.keyboard.on("keyup", () => { this.i && (this.i = !1, this.a.destroy(), this.t.destroy(), this.pantallControles.visible = !1, this.time.delayedCall(1500, () => { ci(this, { x: c.x * 1.015, y: c.y * 1.68 }), iA(this, this.novia_juan, c) }, [], this)) }, this) }, [], this)) }, this) }, [], this), this.finTexto = !1, this.input.keyboard.on("keyup", e => { e.key == "Escape" && this.scene.start("pantalla_inicio") })), y(this, F, "area_32", { posicionX: c.x * 1.015, posicionY: c.y * 1.87, anchoSalida: c.x * .25, altoSalida: c.y * .15, valoresSiguienteEscena: { entrada: "casa" }, funcionesExtra: () => { this.timerTexto && this.timerTexto.destroy() } }), this.indexTexto = 0, this.movimientoLimitado = !1, this.teclaPrecionada = !1, this.permitirCambio = !1, this.contrlesEnPantalla = !1
    } update () { F.setVelocity(0), this.datosJg.ayudaControlesNPC_Disponible() && !this.movimientoLimitado && this.Movimientos.movimientoPersonaje(F), ot.acciones.interactuar.isDown && this.interaccionNoviaJuan && (It ? this.contrlesEnPantalla || (this.finTexto = !1, this.movimientoLimitado = !0, this.pantallControles.visible = !0, this.time.delayedCall(3e3, () => { this.contrlesEnPantalla = !0 })) : (!this.bannerTxt && !this.finTexto && (this.movimientoLimitado = !0, this.bannerTxt = this.add.image(c.x * 1.015, c.y * 1.72, "_banner_dialogos").setScale(.8, .9)), !Ce && !this.finTexto && (Ce = this.add.text(c.x * .2, c.y * 1.55, rt.novia[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })))), ot.acciones.pasarDialogo.isDown && (this.contrlesEnPantalla && (this.pantallControles.visible = !1, this.movimientoLimitado = !1, this.finTexto = !0), this.finTexto ? (Ce && Ce.destroy(), this.bannerTxt && this.bannerTxt.destroy(), this.movimientoLimitado = !1, this.time.delayedCall(800, () => { It = !0, this.contrlesEnPantalla = !1, It || (Ce = void 0, this.bannerTxt = void 0, this.indexTexto = 0, this.permitirCambio = !1, this.movimientoLimitado = !1, this.finTexto = !1) }, [], this), this.datosJg.ayudaControlesNPC_Disponible() || (this.movimientoLimitado = !0, this.datosJg.actualzizarAyudaControlesNPC_Disponible())) : Ce && this.permitirCambio && (this.permitirCambio = !1, Ce.text = rt.novia[this.indexTexto++], this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))), this.indexTexto < di ? this.finTexto = !1 : this.finTexto = !0, this.novia_juan && F.y < this.novia_juan.y ? this.novia_juan.setDepth(2) : this.novia_juan && this.novia_juan.setDepth(0) }
} function ci (t, e = { x: 100, y: 100 }) { t.novia_juan = t.physics.add.sprite(e.x, e.y, "_sprites_novia_juan").setScale(1.25), t.novia_juan.anims.play("idleBack_novia_juan"), t.areaNovia = Ue(t, t.novia_juan, { ancho: t.novia_juan.width * .8, alto: t.novia_juan.height * .4 }), t.idle_dialogo = t.add.sprite(t.novia_juan.x, t.novia_juan.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), t.idle_dialogo.visible = !1, t.physics.add.overlap(F, t.novia_juan, () => { t.idle_dialogo.x = t.novia_juan.x, t.idle_dialogo.y = t.novia_juan.y * .93, t.areaNovia.x = t.novia_juan.x, t.areaNovia.y = t.novia_juan.y + t.novia_juan.width * .3, t.interaccionNoviaJuan = !0 }, null, this), t.physics.add.collider(F, t.areaNovia), t.timerInteraccion = t.time.addEvent({ delay: 10, callback: () => { t.interaccionNoviaJuan ? (t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !0, t.idle_dialogo.anims.play("idle_dialogo")), t.interaccionNoviaJuan = !1) : t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !1, t.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }) } function iA (t, e, i) { t.time.delayedCall(100, () => { t.tweens.add({ targets: e, x: i.x * 1.015, y: i.y, duration: 2e3, onComplete: () => { t.time.delayedCall(150, () => { t.tweens.add({ targets: e, x: i.x * .93, y: i.y, duration: 700, onComplete: () => { e.anims.play("idleLeft_novia_juan") } }), e.anims.play("walkLeft_novia_juan") }), e.anims.play("idleLeft_novia_juan") } }), e.anims.play("walkUp_novia_juan") }) } let pi; class aA extends E.Scene { constructor() { super({ key: "area_33" }) } init (e) { e && (pi = e.entrada) } preload () { } create () { console.log("area 33"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_33").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", pi, { escalaPersonaje: 1.25, esteY: e.y * 1.085, oesteY: e.y * 1.085 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_02", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .236, valoresSiguienteEscena: { entrada: "izq" } }), y(this, this.player, "area_35", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .236, valoresSiguienteEscena: { entrada: "der" } }), this.rabanosRojos = S(this, "_rabano_rojo_1", { repeticiones: 6, width: 3, height: 2, cellWidth: 140, cellHeight: 120, posicionX: e.x * .28, posicionY: e.y * .28, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.rabanosBlancos = S(this, "_rabano_blanco_1", { repeticiones: 6, width: 3, height: 2, cellWidth: 140, cellHeight: 120, posicionX: e.x * 1.02, posicionY: e.y * 1.3, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(2), this.tomates1 = S(this, "_tomates_1", { repeticiones: 2, width: 5, cellWidth: 170, posicionX: e.x * 1, posicionY: e.y * .2, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.tomates2 = S(this, "_tomates_1", { repeticiones: 2, width: 5, cellWidth: 170, posicionX: e.x * 1.1, posicionY: e.y * .46, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.zanahorias = S(this, "_zanahoria_1", { repeticiones: 6, width: 3, height: 2, cellWidth: 140, cellHeight: 120, posicionX: e.x * .26, posicionY: e.y * 1.25, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(2), this.physics.world.enable([this.tomates1, this.tomates2, this.rabanosBlancos, this.rabanosRojos, this.zanahorias]), this.tomates1.getChildren().forEach(i => { i.body.immovable = !0 }), this.tomates2.getChildren().forEach(i => { i.body.immovable = !0 }), this.rabanosBlancos.getChildren().forEach(i => { i.body.immovable = !0 }), this.rabanosRojos.getChildren().forEach(i => { i.body.immovable = !0 }), this.zanahorias.getChildren().forEach(i => { i.body.immovable = !0 }), this.CajaVerduras1 = this.physics.add.image(e.x * 1.75, e.y * 1.6, "_caja_verduras_1").setScale(.7).setDepth(2).setImmovable(), this.CajaVerduras1.setSize(this.CajaVerduras1.width * .65, this.CajaVerduras1.height * .4), this.CajaVerduras1.setOffset(0, this.CajaVerduras1.height * .6), this.CajaVerduras2 = this.physics.add.image(e.x * 1.7, e.y * .28, "_caja_verduras_1").setScale(.7).setDepth(0).setImmovable(), this.CajaVerduras2.setSize(this.CajaVerduras2.width * .65, this.CajaVerduras2.height * .4), this.CajaVerduras2.setOffset(0, this.CajaVerduras2.height * .6), this.CajaVerduras3 = this.physics.add.image(e.x * 1.85, e.y * .5, "_caja_verduras_1").setScale(.7).setDepth(0).setImmovable(), this.CajaVerduras3.setSize(this.CajaVerduras3.width * .65, this.CajaVerduras3.height * .4), this.CajaVerduras3.setOffset(0, this.CajaVerduras3.height * .6), this.physics.add.collider(this.player, [this.CajaVerduras1, this.CajaVerduras2, this.CajaVerduras3, this.rabanosBlancos, this.rabanosRojos, this.zanahorias, this.tomates1, this.tomates2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 180 ? (this.rabanosRojos.setDepth(2), this.tomates1.setDepth(2), this.tomates2.setDepth(2)) : this.player.y > 716 ? (this.rabanosBlancos.setDepth(0), this.zanahorias.setDepth(0)) : (this.rabanosRojos.setDepth(0), this.tomates1.setDepth(0), this.tomates2.setDepth(0), this.rabanosBlancos.setDepth(2), this.zanahorias.setDepth(2)), this.player.y < 170 ? this.CajaVerduras3.setDepth(2) : this.CajaVerduras3.setDepth(0), this.player.y < 82 ? this.CajaVerduras2.setDepth(2) : this.CajaVerduras2.setDepth(0), this.player.y < 605 ? this.CajaVerduras1.setDepth(2) : this.CajaVerduras1.setDepth(0) } } let gi = { acciones: { confirmar: void 0 } }, Ne = { key: "area_04", posicion: { x: 0, y: 0 }, entrada_a_escena: void 0 }; class sA extends E.Scene { constructor() { super({ key: "area_34" }) } init (e) { e && (Ne.entrada_a_escena = e.entrada, e.posicion && (Ne.posicion = e.posicion)) } preload () { } create () { console.log("area 34"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), gi.acciones.confirmar = this.input.keyboard.addKey("F"); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_34").setScale(.854, .78).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Ne.entrada_a_escena, { escalaPersonaje: 1.25, xPersonaje: Ne.posicion.x, yPersonaje: Ne.posicion.y, norteX: e.x * .28 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_30", { posicionX: e.x * .28, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), this.sprite_vendedor = this.physics.add.sprite(e.x * 1.35, e.y * 1.2, "_sprite_vendedor").setOrigin(.48, .35).setScale(2), this.idle_dialogo = this.add.sprite(this.sprite_vendedor.x, this.sprite_vendedor.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8), this.sprite_vendedor.anims.play("idle_vendedor"), this.sprite_vendedor.setSize(this.sprite_vendedor.width * .9, this.sprite_vendedor.height * .7), this.sprite_vendedor.setOffset(this.sprite_vendedor.width * .025, this.sprite_vendedor.height * .35), this.idle_dialogo.visible = !1, this.interaccionVendedor = !1, this.physics.add.overlap(this.player, this.sprite_vendedor, () => { this.interaccionVendedor = !0 }, null, this), this.colisionVendedor = Ue(this, this.sprite_vendedor, { ancho: this.sprite_vendedor.width * .65, alto: this.sprite_vendedor.height * .45, posicionX: this.sprite_vendedor.x * .998, posicionY: this.sprite_vendedor.y * 1.18 }), this.physics.add.collider(this.player, this.colisionVendedor, null, null, this), this.timer = this.time.addEvent({ delay: 10, callback: () => { this.interaccionVendedor ? this.idle_dialogo.anims.isPlaying ? this.interaccionVendedor = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.interaccionVendedor = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }), this.piedra1 = this.physics.add.image(e.x * .13, e.y * 1.7, "_piedra_3").setOrigin(.5).setScale(.8).setImmovable(), this.piedra2 = this.physics.add.image(e.x * .655, e.y * 1.111, "_piedra_2").setOrigin(.5).setScale(.8).setImmovable(), this.piedra3 = this.physics.add.image(e.x * 1.805, e.y * 1.72, "_piedra_1").setOrigin(.5).setScale(.8).setImmovable(), this.physics.world.enable(this.piedra1), this.physics.world.enable(this.piedra2), this.physics.world.enable(this.piedra3), this.vela1 = this.physics.add.sprite(e.x * .08, e.y * .65, "_vela_1").setOrigin(.5).setScale(.75).setImmovable(), this.vela1.anims.play("idle_vela_1"), this.vela1.setSize(this.vela1.width * .95, this.vela1.height * .5), this.vela1.setOffset(0, this.vela1.height * .4), this.vela2 = this.physics.add.sprite(e.x * .67, e.y * .89, "_vela_1").setOrigin(.5).setScale(.8), this.vela2.anims.play("idle_vela_1"), this.vela3 = this.physics.add.sprite(e.x * .13, e.y * 1.51, "_vela_1").setOrigin(.5).setScale(.8), this.vela3.anims.play("idle_vela_1"), this.vela4 = this.physics.add.sprite(e.x * 1.58, e.y * 1.61, "_vela_1").setOrigin(.5).setScale(.8).setImmovable(), this.vela4.anims.play("idle_vela_1"), this.vela5 = this.physics.add.sprite(e.x * 1.015, e.y * 1.6, "_vela_1").setOrigin(.5).setScale(.8).setImmovable(), this.vela5.anims.play("idle_vela_1"), this.vela6 = this.physics.add.sprite(e.x * 1.85, e.y * 1.5, "_craneo_1").setOrigin(.5).setScale(.8), this.vela6.anims.play("idle_craneo_1"), this.r1 = this.add.rectangle(e.x * 1.3, e.y * 1.25, e.x * .8, e.y * .4), this.r2 = this.add.rectangle(e.x * .75, e.y * .53, e.x * .4, e.y), this.r3 = this.add.rectangle(e.x * .85, e.y * 1.4, e.x * .3, e.y * .5), this.r4 = this.add.rectangle(e.x * .02, e.y, 40, e.y * 2), this.r5 = this.add.rectangle(e.x, e.y * 1.98, e.x * 2, 40), this.physics.world.enable([this.r1, this.r2, this.r3, this.r4, this.r5]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.r3.body.immovable = !0, this.r4.body.immovable = !0, this.r5.body.immovable = !0, this.physics.add.collider(this.player, [this.piedra1, this.piedra2, this.piedra3, this.vela1, this.vela4, this.vela5, this.r1, this.r2, this.r3, this.r4, this.r5]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), gi.acciones.confirmar.isDown && this.interaccionVendedor && this.scene.start("vendedor_pantalla_principal", { key: "area_34", posicion: { x: this.player.x, y: this.player.y } }), this.player.y < 202 ? this.vela1.setDepth(2) : this.vela1.setDepth(0), this.player.y < 586 ? (this.vela3.setDepth(2), this.piedra1.setDepth(2)) : (this.vela3.setDepth(0), this.piedra1.setDepth(0)) } } let ui, l, ge, Ie = { filberto1: void 0, filberto2: void 0 }, vt, nt = { acciones: { interactuar: void 0, pasarDialogo: void 0 } }, lt = !1, ht = !1, Ct = !1, dt = !1; const Dt = []; let ae, j, Qt, L, q, ue, U, le; class AA extends E.Scene {
    constructor() { super({ key: "area_35" }) } init (e) { e && (ui = e.entrada) } preload () { } create () {
        console.log("area 35"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), l = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }, this.add.image(l.x, l.y, "_fondo_area_35").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ui, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), y(this, this.player, "area_33", { posicionX: l.x * 2.015, posicionY: l.y, anchoSalida: l.y * .15, altoSalida: l.x * .236, valoresSiguienteEscena: { entrada: "izq" } }), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * .1, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.grupoMaiz2 = S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .67, posicionY: l.y * .18, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * .36, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * 1.1, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(4), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .67, posicionY: l.y * 1.28, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(4), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * 1.46, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(4), this.r1 = this.add.rectangle(l.x * .67, 0, l.x * 1.2, l.y * .75, 0, 0).setOrigin(0), this.r2 = this.add.rectangle(l.x * .67, l.y * 1.26, l.x * 1.2, l.y * .7, 0, 0).setOrigin(0), this.casa = this.physics.add.image(l.x * .318, l.y * .85, "_casa_milpa").setScale(.82).setDepth(1).setImmovable(), this.casa.setSize(this.casa.width, this.casa.height * .75), this.casa.setOffset(0, this.casa.height * .25), this.saco = this.physics.add.image(l.x * .5, l.y * 1.45, "_saco_1").setScale(.82).setDepth(2).setImmovable(), this.caja = this.physics.add.image(l.x * .37, l.y * 1.455, "_caja_verduras_2").setScale(.75).setDepth(2).setImmovable(), this.lenia = this.physics.add.image(l.x * .2, l.y * 1.48, "_lenia_1").setScale(.7).setDepth(2).setImmovable(), this.herramientas = this.physics.add.image(l.x * .24, l.y * 1.8, "_herramientas_1").setScale(.75).setDepth(2).setImmovable(), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2, this.casa, this.saco, this.caja, this.lenia, this.herramientas, this.bomba]), nt.acciones.interactuar = this.input.keyboard.addKey("F"), nt.acciones.pasarDialogo = this.input.keyboard.addKey("SPACE"), ht || (this.crearPersonajeFilberto(), this.bomba = this.physics.add.image(l.x * .8, l.y, "_bomba_1").setDepth(0).setScale(.75).setImmovable(), this.bomba.setSize(this.bomba.width, this.bomba.height * .5), this.bomba.setOffset(0, this.bomba.height * .5), this.physics.add.collider(this.player, this.bomba)), Ie.filberto1 = [`Juan Cupul:

¬øQu√© haces?`, `Filiberto Tun:

Estaba checando la bomba para ver si estaba lista.`, `Juan Cupul:

¬øEn serio?, ¬øY entonces c√≥mo est√°?`, `Filiberto Tun:

Supongo que bien...`, `Filiberto Tun:

Oye necesito tu ayuda con algo.`], Ie.filberto2 = [`Filiberto Tun:

Vaya esa respuesta fue r√°pida, ¬øqu√© hiciste?`, `Juan Cupul:

Simplemente pens√© en el problema, me surgieron diferentes respuestas y escog√≠ la correcta.`, `Filiberto Tun:

Vaya eso es incre√≠ble.`, `Juan Cupul:

Eso no es nada.`, `Filiberto Tun:

Bueno ir√© a ver al brujo que esta al sur para asegurar un buen presagio. Acompa√±ame.`, `Juan Cupul:

Solo terminare de verificar algunas cosas aqu√≠, te alcanzo luego.`, "Visita al brujo que est√° en el monte al SUR del pueblo."], vt = Ie.filberto1.length, this.indexTexto = 0, this.movimientoLimitado = !1, this.teclaPrecionada = !1, this.timer2 = this.time.addEvent({}), this.permitirCambio = !1, this.contrlesEnPantalla = !1, this.interaccionFilberto = !1
    } update () { this.player.setVelocity(0), !this.movimientoLimitado && !dt && this.Movimientos.movimientoPersonaje(this.player), nt.acciones.interactuar.isDown && !ht && !dt && this.interaccionFilberto && (!this.bannerTxt && !this.finTexto && (this.movimientoLimitado = !0, this.bannerTxt = this.add.image(l.x * 1.015, l.y * 1.72, "_banner_dialogos").setScale(.8, .9).setDepth(5)), !ge && !this.finTexto && (Ct ? (ge = this.add.text(l.x * .2, l.y * 1.55, Ie.filberto2[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left", wordWrap: { width: l.x * 1.7, useAdvancedWrap: !0 } }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })) : (ge = this.add.text(l.x * .2, l.y * 1.55, Ie.filberto1[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })))), nt.acciones.pasarDialogo.isDown && (this.finTexto ? (this.finTexto = !1, ge && ge.destroy(), this.bannerTxt && this.bannerTxt.destroy(), Ct || (Ct = !0, this.time.delayedCall(850, () => { this.crearQTE() }, [], this)), lt && !ht && (ht = !0, this.movimientoLimitado = !0, this.time.delayedCall(400, () => { this.areaFilberto.destroy(), this.tweens.add({ targets: this.filberto, x: l.x * 2, y: l.y, duration: 4e3, onComplete: () => { this.time.delayedCall(150, () => { this.filberto.destroy() }), this.filberto.anims.play("idleRight_filberto") } }), this.filberto.anims.play("walkRight_filberto") }, [], this)), this.time.delayedCall(800, () => { vt = Ie.filberto2.length, lt ? this.movimientoLimitado = !1 : (lt = !0, ge = void 0, this.bannerTxt = void 0, this.indexTexto = 0, this.permitirCambio = !1), console.log("b") }, [], this)) : ge && this.permitirCambio && (this.permitirCambio = !1, lt ? ge.text = Ie.filberto2[this.indexTexto++] : ge.text = Ie.filberto1[this.indexTexto++], this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))), this.indexTexto <= vt ? this.finTexto = !1 : this.finTexto = !0, this.player.y > 577 ? (this.player.setDepth(3), this.casa.setDepth(1)) : (this.player.setDepth(1), this.casa.setDepth(2)), this.filberto && this.player.y < this.filberto.y ? this.filberto.setDepth(2) : this.filberto && this.filberto.setDepth(0), this.bomba && this.player.y < this.bomba.y ? this.bomba.setDepth(2) : this.bomba && this.bomba.setDepth(0) } crearEscena () {
        le = !1, ue = 0, U = 0, this.bannerPreguntas = this.add.image(l.x, l.y * 1.64, "_banner_dialogos").setScale(.8, 1.1).setDepth(5), this.bannerContexto = this.add.image(l.x * 1.5, l.y * .7, "_banner_contextos").setScale(.8, .8).setDepth(5), this.contextoP = this.add.text(l.x * 1.5, l.y * .7, Qt, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: 525, useAdvancedWrap: !0 } }).setOrigin(.5).setDepth(6); for (let e = 0; e <= 3; e++)L[e].areaTexto = this.add.text(l.x * .2, l.y * 1.42, L[e].pregunta, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: l.x * 1.6, useAdvancedWrap: !0 } }).setDepth(6), L[e].areaTexto.visible = !1; L[ue].areaTexto.visible = !0, q = oA(this, St(L[0].respuestas)), q[U].setColor("#FFFFFF"), this.retro = { texto: void 0, background: void 0 }, this.retro.texto = this.add.text(l.x * .26, l.y * 1.54, `La respuesta ha sido incorrecta.
Analiza de nuevo el problema e intentalo de nuevo`, { fontFamily: "Arial", fontSize: 32, color: "#FFFFFF" }).setOrigin(0).setDepth(7), this.retro.texto.visible = !1, this.retro.background = this.add.image(l.x, l.y * 1.64, "_banner_dialogos").setScale(.8, 1.1).setDepth(6), this.retro.background.visible = !1, this.input.keyboard.on("keyup", function (e) { if (le) switch (!0) { case e.key == "ArrowLeft": q[U].setColor("#cacaca"), U <= 0 ? U = 3 : U -= 1, q[U].setColor("#FFFFFF"); break; case e.key == "ArrowRight": q[U].setColor("#cacaca"), U >= 3 ? U = 0 : U += 1, q[U].setColor("#FFFFFF"); break; case e.key == "Enter": q[U].text.split(") ")[1] == L[ue].respuesta ? ue < 3 ? (le = !1, L[ue++].areaTexto.visible = !1, L[ue].areaTexto.visible = !0, mi(St(L[ue].respuestas), q), U = 0, q.forEach(i => { i.setColor("#cacaca") }), q[U].setColor("#ffffff"), this.time.delayedCall(2e3, () => { le = !0 })) : (dt = !1, le = !1, this.retro.background.visible = !1, this.retro.texto.visible = !1, this.bannerPreguntas.destroy(), this.bannerContexto.destroy(), this.contextoP.destroy(), L.forEach(i => i.areaTexto.destroy()), q.forEach(i => i.destroy()), this.input.keyboard.removeListener("keyup")) : ue < 3 ? (le = !1, this.retro.texto.visible = !0, this.retro.background.visible = !0, mi(St(L[ue].respuestas), q), this.time.delayedCall(4e3, () => { le = !0, this.retro.background.visible = !1, this.retro.texto.visible = !1 })) : (le = !1, this.retro.texto.text = "Has fallado. Intentalo de nuevo", this.retro.texto.visible = !0, this.retro.background.visible = !0, this.time.delayedCall(4e3, () => { le = !0, this.retro.background.visible = !1, this.retro.texto.visible = !1, this.bannerPreguntas.destroy(), this.bannerContexto.destroy(), this.contextoP.destroy(), L.forEach(i => i.areaTexto.destroy()), q.forEach(i => i.destroy()), this.input.keyboard.removeListener("keyup"), this.crearQTE() })); break; case e.key == "Escape": break } }, this), this.time.delayedCall(4e3, () => { le = !0 })
    } crearQTE () { ae ? (j = fi(), Qt = j.contexto, L = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: j.respQuien.split(","), respuesta: j.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: j.respQue.split(","), respuesta: j.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: j.respOperaciones.split(","), respuesta: j.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: j.preguntaProblema, respuestas: j.respProblema.split(","), respuesta: j.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena()) : (console.log(1), fetch(Y + "/api/preguntas?filters[QTE][$eq]=QTE-1", { method: "GET", headers: { "Content-Type": "application/json" } }).then(e => e.json()).then(e => { e && (e.data.forEach(i => { Dt.push({ contexto: i.attributes.contexto, respQuien: i.attributes.quien, respQue: i.attributes.que, respOperaciones: i.attributes.operaciones, preguntaProblema: i.attributes.pregunta, respProblema: i.attributes.respuesta }) }), ae = [...Dt], j = fi(), Qt = j.contexto, L = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: j.respQuien.split(","), respuesta: j.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: j.respQue.split(","), respuesta: j.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: j.respOperaciones.split(","), respuesta: j.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: j.preguntaProblema, respuestas: j.respProblema.split(","), respuesta: j.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena(), dt = !0) }).catch(e => { this.movimientoLimitado = !1, console.error(e) })) } crearPersonajeFilberto () { this.filberto = this.physics.add.sprite(l.x, l.y, "_sprites_filberto").setScale(1.25), this.filberto.anims.play("idleLeft_filberto"), this.idle_dialogo = this.add.sprite(this.filberto.x, this.filberto.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), this.idle_dialogo.visible = !1, this.areaFilberto = Ue(this, this.filberto, { ancho: this.filberto.width * .8, alto: this.filberto.height * .4 }), this.physics.add.overlap(this.player, this.filberto, () => { this.idle_dialogo.x = this.filberto.x, this.idle_dialogo.y = this.filberto.y * .93, this.areaFilberto.x = this.filberto.x, this.areaFilberto.y = this.filberto.y + this.filberto.width * .3, this.interaccionFilberto = !0 }, null, this), this.physics.add.collider(this.player, this.areaFilberto), this.timerInteraccion = this.time.addEvent({ delay: 10, callback: () => { this.interaccionFilberto ? this.idle_dialogo.anims.isPlaying ? this.interaccionFilberto = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.interaccionFilberto = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }) }
} function oA (t, e) { const i = t.game.canvas.width, s = t.game.canvas.height, a = i * .08; let A = []; for (let r = 0; r <= 3; r++) { let h = a + i * .05 * (r * 4 + 1); A.push(t.add.text(h, s * .89, r + 1 + ") " + e[r], { fontFamily: "Arial", fontSize: 30, color: "#cacaca", align: "left", wordWrap: { width: 220, useAdvancedWrap: !0 } }).setOrigin(0, .5).setDepth(6)) } return A } function St (t) { let e = t, i = t.length, s, a; for (; i !== 0;)a = Math.floor(Math.random() * i), i--, s = e[i], e[i] = e[a], e[a] = s; return e } function mi (t, e) { for (let i = 0; i <= 3; i++)e[i].text = i + 1 + ") " + t[i] } function fi () { let t, e; return ae.length != 0 ? (t = Math.floor(Math.random() * ae.length), e = ae[t], ae.splice(t, 1)) : (ae = [...Dt], console.log(ae), t = Math.floor(Math.random() * ae.length), e = ae[t], ae.splice(t, 1)), e } const hA = [ts, ss, vs, Bs, Is, fs, ys, Es, bs, xs, _s, ns, cs, gs, ks, Rs, js, Ms, Ts, zs, Os, Ys, , Js, Ns, Us, Fs, Ps, Gs, Xs, Hs, Ls, qs, Ks, tA, aA, sA, AA, hs, Cs, Qs, Ss, ws, Ds]; export { hA as _lista_escenas };
