import { P as b } from "./phaser-5d05247a.js"; function c (t, e, i, a, s, { frecuencia_frames: o = 8, repeticion: r = -1 } = {}) { t.anims.create({ key: i, frames: t.anims.generateFrameNumbers(e, { start: a, end: s }), frameRate: o, repeat: r }) } function S (t, e, { repeticiones: i = 1, width: a = 1, height: s = 1, cellWidth: o = 100, cellHeight: r = 100, posicionX: h = 100, posicionY: y = 100, escalaElemento: A = 1, origenX: n = .5, origenY: d = n, sizeWidth: C = 100, sizeHeight: _ = C } = {}) { let m = t.physics.add.staticGroup({ key: e, frameQuantity: i, gridAlign: { width: a, height: s, cellWidth: o, cellHeight: r, x: h, y } }); return m.children.iterate(B => { B.setScale(A), B.setOrigin(n, d), B.setSize(C, _) }), m } function w (t, { porcentaje: e = !0, sizeX: i = 1, sizeY: a = 1, offsetX: s = 0, offsetY: o = 0 } = {}) { if (e) { let r = { width: t.width, height: t.height }; t.setSize(r.width * i, r.height * a), t.setOffset(r.width * s, r.height * o) } else t.setSize(i, a), t.setOffset(s, o); return t } function E (t, e, i, { posicionX: a = 100, posicionY: s = a, anchoSalida: o = 100, altoSalida: r = o, color: h = 0, alfa: y = 0, origenX: A = .5, origenY: n = A, funcionesExtra: d = () => { }, valoresSiguienteEscena: C = void 0 } = {}) { let _ = t.add.rectangle(a, s, o, r, h, y).setOrigin(A, n); return t.physics.world.enable(_), t.physics.add.collider(e, _, () => { t.scene.start(i, C) }, null, t), _ } function M (t, e, i, { escalaPersonaje: a = 1, anchoEscena: s = t.game.canvas.width, altoEscena: o = t.game.canvas.height, norteX: r = s * .4925, norteY: h = o * .036, surX: y = s * .4925, surY: A = o * .925, esteX: n = s * .965, esteY: d = o * .5, oesteX: C = s * .035, oesteY: _ = o * .5, xPersonaje: m = s / 2, yPersonaje: B = o / 2 } = {}) { let g; switch (i) { case "arriba": g = t.physics.add.sprite(r, h, e).setScale(a); break; case "abajo": g = t.physics.add.sprite(y, A, e).setScale(a); break; case "der": g = t.physics.add.sprite(n, d, e).setScale(a); break; case "izq": g = t.physics.add.sprite(C, _, e).setScale(a); break; default: g = t.physics.add.sprite(m, B, e).setScale(a); break }return g.setCollideWorldBounds(!0), g } function He (t, e, { posicionX: i = e.x, posicionY: a = e.y, ancho: s = e.width, alto: o = e.height, color: r = 0, alfa: h = 0, origenX: y = e.originX, origenY: A = e.originY, escalaX: n = e.scaleX, escalaY: d = e.scaleY } = {}) { let C = t.add.rectangle(i, a, s, o, r, h).setOrigin(y, A); return C.setScale(n, d), t.physics.world.enable(C), C.body.immovable = !0, C } const vi = "/assets/Cesta_Vendedor_Style_Sheet-8cca04d2.png", Qi = "/assets/Filberto_Style_Sheets_128x128-50501861.png", Le = "/assets/Gallina_Sheet_1.png", Si = "/assets/Globo_Dialogo_Guardar.png", wi = "/assets/GloboDialogo.png", Di = "/assets/Guardar_Pio_Sheet.png", ki = "/assets/Hombre_Style_Sheets_128x128-bcfb5315.png", Ri = "/assets/Juan_C_Sprite_Style_Sheets-d01dadcd.png", ji = "/assets/Mujer_Style_Sheets_128x128-28bcd267.png", Mi = "/assets/Novia_Sprite_Sheet-0597fa3f.png", Ti = "/assets/Ojos_Gato_Vendedor_Style_Sheet.png", zi = "/assets/Pavo_Sheet_1.png", Oi = "/assets/Pollito_Sheet_1.png", Yi = "/assets/Puerquito_Sheet_1.png", Ni = "/assets/Puerquito_Sheet_2.png", Ui = "/assets/Vendedor_Style_Sheet_128x128.png", Ji = "/assets/Vendedor_PP_Style_Sheet-2f78eb09.png", Pi = "/assets/Banner_General_Textos-27eabb9f.png", Fi = "/assets/Baner_Contextos_Vendedor-9b7b4902.png", Gi = "/assets/Fondo_A02-fa283a00.png", Xi = "/assets/Fondo_A03-3065baac.png", Hi = "/assets/Fondo_A04-4e574897.png", Li = "/assets/Fondo_A05-6de61fa0.png", Ki = "/assets/Fondo_A06-dc884a85.png", qi = "/assets/Fondo_A08-a0479ade.png", Zi = "/assets/Fondo_A13-744647a4.png", Vi = "/assets/Fondo_A14-605a1c29.png", Wi = "/assets/Fondo_A16-ddf2ee85.png", $i = "/assets/Fondo_A17-a476ebf2.png", ea = "/assets/Fondo_A22-6f50e3d0.png", ta = "/assets/Fondo_A23-112c6c37.png", ia = "/assets/Fondo_A24-3897fcf5.png", aa = "/assets/Fondo_A25-dab97a5c.png", sa = "/assets/Fondo_A26-94d5748f.png", Aa = "/assets/Fondo_A28-1c8d791b.png", oa = "/assets/Fondo_A30-3afa33cf.png", ra = "/assets/Fondo_A31-8c2a1569.png", na = "/assets/Fondo_A32-d27e25d9.jpg", la = "/assets/Fondo_A33-1dbff442.png", ha = "/assets/Fondo_A34-f27845e5.png", da = "/assets/Fondo_A35-51e3fb20.png", ca = "/assets/Fondo_Basta_Matematico-de43a34b.png", pa = "/assets/Fondo_Pantalla_Inicio-227ba21e.jpg", ga = "/assets/Fondo_Seleccionar_Personaje-4d3f0018.jpg", ua = "/assets/Fondo_Formularios-6373e6ef.png", ma = "/assets/InstruccionesPreguntas-44a257f9.png", fa = "/assets/Interior_Casa_Juan_Cupul-7b680aae.jpg", ya = "/assets/Fondo_Vendedor-d2df19be.png", Ea = "/assets/Instrucciones_Basta_1-1b0689f7.jpg", ba = "/assets/Instrucciones_Basta_2-e266549e.jpg", xa = "/assets/Instrucciones_Basta_3-15aa52e7.jpg", _a = "/assets/Instrucciones_Basta_4-723cf249.jpg", Ba = "/assets/MiniJuego_Pantalla_Inicio-962aef05.png", Ia = "/assets/Narracion-938edea5.jpg", Ca = "/assets/Pantalla_Controles-cfc5b08e.png", va = "/assets/vidrio-c4641575.png", Qa = "/assets/Casa_JP_Exterior-35d6d0e9.png", Sa = "/assets/Casa_Milpa-6d1abfdf.png", wa = "/assets/Casa_Pueblo-dbb33c77.png", Da = "/assets/Machete_Juan.png", ka = "/assets/Arbol_1.png", Ra = "/assets/Arbol_2-d8faaaaf.png", ja = "/assets/Arbol_3-ea343463.png", Ma = "/assets/Arbol_4-05cd2108.png", Ta = "/assets/Arbol_5.png", za = "/assets/Arbol_6.png", Oa = "/assets/Arbol_7.png", Ya = "/assets/Arbol_8.png", Na = "/assets/Arbol_Centro-dfccba0e.png", Ua = "/assets/Arbol_Naranjas-2d786c92.png", Ja = "/assets/Barda_1-ae673066.png", Pa = "/assets/Bomba_1.png", Fa = "/assets/Caja_Naranjas_1.png", Ga = "/assets/Caja_Verduras_1.png", Xa = "/assets/Caja_Verduras_2.png", Ha = "/assets/Cama_1.png", La = "/assets/Craneo_1.png", Ka = "/assets/Cubeta_1.png", qa = "/assets/Cubeta_2.png", Za = "/assets/Herramientas_1.png", Va = "/assets/Lavadero_1.png", Wa = "/assets/Le√±a_1.png", $a = "/assets/Letrero_1.png", es = "/assets/Maceta_1.png", ts = "/assets/Maiz_1.png", is = "/assets/Mesa_1.png", as = "/assets/mesa3.png", ss = "/assets/Piedra_1.png", As = "/assets/Piedra_2.png", os = "/assets/Piedra_3.png", rs = "/assets/Pozo_1.png", ns = "/assets/Rabano_Blanco_1.png", ls = "/assets/Rabano_Rojo_1.png", hs = "/assets/Ropero_1.png", ds = "/assets/Saco_1.png", cs = "/assets/Silla_1.png", ps = "/assets/Tomates_1.png", gs = "/assets/Vela_1.png", us = "/assets/Zanahoria_1.png"; class ms extends b.Scene { constructor() { super({ key: "precarga_imagenes" }) } preload () { this.load.spritesheet("_sprite_cesta_vendedor", vi, { frameWidth: 208, frameHeight: 291 }), this.load.spritesheet("_sprites_filberto", Qi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_gallina_1", Le, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_gallina_2", Le, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_gallina_3", Le, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_gallina_4", Le, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_globo_dialogo_guardar", Si, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprite_globo_dialogo", wi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_guardar_pio", Di, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_hombre", ki, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_juan_cupul", Ri, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_mujer", ji, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprites_novia_juan", Mi, { frameWidth: 128, frameHeight: 128 }), this.load.spritesheet("_sprite_ojos_gato", Ti, { frameWidth: 208, frameHeight: 291 }), this.load.spritesheet("_sprites_pavo_1", zi, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_pollito_1", Oi, { frameWidth: 64, frameHeight: 64 }), this.load.spritesheet("_sprites_puerquito_1", Yi, { frameWidth: 96, frameHeight: 96 }), this.load.spritesheet("_sprites_puerquito_2", Ni, { frameWidth: 96, frameHeight: 96 }), this.load.spritesheet("_sprite_vendedor_tienda", Ji, { frameWidth: 208, frameHeight: 234 }), this.load.spritesheet("_sprite_vendedor", Ui, { frameWidth: 128, frameHeight: 128 }), this.load.image("_banner_dialogos", Pi), this.load.image("_banner_contextos", Fi), this.load.image("_fondo_area_02", Gi), this.load.image("_fondo_area_03", Xi), this.load.image("_fondo_area_04", Hi), this.load.image("_fondo_area_05", Li), this.load.image("_fondo_area_06", Ki), this.load.image("_fondo_area_08", qi), this.load.image("_fondo_area_13", Zi), this.load.image("_fondo_area_14", Vi), this.load.image("_fondo_area_16", Wi), this.load.image("_fondo_area_17", $i), this.load.image("_fondo_area_22", ea), this.load.image("_fondo_area_23", ta), this.load.image("_fondo_area_24", ia), this.load.image("_fondo_area_25", aa), this.load.image("_fondo_area_26", sa), this.load.image("_fondo_area_28", Aa), this.load.image("_fondo_area_30", oa), this.load.image("_fondo_area_31", ra), this.load.image("_fondo_area_32", na), this.load.image("_fondo_area_33", la), this.load.image("_fondo_area_34", ha), this.load.image("_fondo_area_35", da), this.load.image("_fondo_basta_mate", ca), this.load.image("_fondo_pantalla_incio", pa), this.load.image("_fondo_vegetacion", ga), this.load.image("_fondo_vendedor_tienda", ya), this.load.image("_fondo_formularios", ua), this.load.image("_fondo_instrucciones_preguntas", ma), this.load.image("_fondo_interior_casa_juan", fa), this.load.image("_instruccion_basta_1", Ea), this.load.image("_instruccion_basta_2", ba), this.load.image("_instruccion_basta_3", xa), this.load.image("_instruccion_basta_4", _a), this.load.spritesheet("_sprite_minijuego_pantalla_inicio", Ba, { frameWidth: 768, frameHeight: 432 }), this.load.image("_pantalla_narracion", Ia), this.load.image("_pantalla_controles", Ca), this.load.image("_vidrio", va), this.load.image("_casa_juan", Qa), this.load.image("_casa_milpa", Sa), this.load.image("_casa_pueblo", wa), this.load.image("_machete_1", Da), this.load.image("_arbol_1", ka), this.load.image("_arbol_2", Ra), this.load.image("_arbol_3", ja), this.load.image("_arbol_4", Ma), this.load.image("_arbol_5", Ta), this.load.image("_arbol_6", za), this.load.image("_arbol_7", Oa), this.load.image("_arbol_8", Ya), this.load.image("_arbol_centro", Na), this.load.image("_arbol_naranjas", Ua), this.load.image("_barda_1", Ja), this.load.image("_bomba_1", Pa), this.load.image("_caja_naranjas_1", Fa), this.load.image("_caja_verduras_1", Ga), this.load.image("_caja_verduras_2", Xa), this.load.image("_cama_1", Ha), this.load.spritesheet("_craneo_1", La, { frameWidth: 133, frameHeight: 243 }), this.load.image("_cubeta_1", Ka), this.load.image("_cubeta_2", qa), this.load.image("_herramientas_1", Za), this.load.image("_lavadero_1", Va), this.load.image("_lenia_1", Wa), this.load.image("_letrero_1", $a), this.load.image("_meceta_1", es), this.load.image("_maiz_1", ts), this.load.image("_mesa_1", is), this.load.image("_mesa_2", as), this.load.image("_piedra_1", ss), this.load.image("_piedra_2", As), this.load.image("_piedra_3", os), this.load.image("_pozo_1", rs), this.load.image("_rabano_blanco_1", ns), this.load.image("_rabano_rojo_1", ls), this.load.image("_ropero_1", hs), this.load.image("_saco_1", ds), this.load.image("_silla_1", cs), this.load.image("_tomates_1", ps), this.load.spritesheet("_vela_1", gs, { frameWidth: 120, frameHeight: 181 }), this.load.image("_zanahoria_1", us) } create () { c(this, "_sprites_hombre", "walkDown_hombre", 0, 3), c(this, "_sprites_hombre", "walkUp_hombre", 4, 7), c(this, "_sprites_hombre", "walkLeft_hombre", 8, 11), c(this, "_sprites_hombre", "walkRight_hombre", 12, 15), c(this, "_sprites_hombre", "idleFront_hombre", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "idleBack_hombre", 20, 23, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "idleLeft_hombre", 24, 27, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "idleRight_hombre", 28, 31, { frecuencia_frames: 2.1 }), c(this, "_sprites_mujer", "walkDown_mujer", 0, 3), c(this, "_sprites_mujer", "walkUp_mujer", 4, 7), c(this, "_sprites_mujer", "walkLeft_mujer", 8, 11), c(this, "_sprites_mujer", "walkRight_mujer", 12, 15), c(this, "_sprites_mujer", "idleFront_mujer", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_mujer", "idleBack_mujer", 20, 23, { frecuencia_frames: 2.1 }), c(this, "_sprites_mujer", "idleLeft_mujer", 24, 27, { frecuencia_frames: 2.1 }), c(this, "_sprites_mujer", "idleRight_mujer", 28, 31, { frecuencia_frames: 2.1 }), c(this, "_sprites_juan_cupul", "walkDown_juan", 0, 3), c(this, "_sprites_juan_cupul", "walkUp_juan", 4, 7), c(this, "_sprites_juan_cupul", "walkLeft_juan", 8, 11), c(this, "_sprites_juan_cupul", "walkRight_juan", 12, 15), c(this, "_sprites_juan_cupul", "idleFront_juan", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_juan_cupul", "idleBack_juan", 20, 23, { frecuencia_frames: 2.1 }), c(this, "_sprites_juan_cupul", "idleLeft_juan", 24, 27, { frecuencia_frames: 2.1 }), c(this, "_sprites_juan_cupul", "idleRight_juan", 28, 31, { frecuencia_frames: 2.1 }), c(this, "_sprites_filberto", "walkDown_filberto", 0, 3), c(this, "_sprites_filberto", "walkUp_filberto", 4, 7), c(this, "_sprites_filberto", "walkLeft_filberto", 8, 11), c(this, "_sprites_filberto", "walkRight_filberto", 12, 15), c(this, "_sprites_filberto", "idleFront_filberto", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_filberto", "idleBack_filberto", 20, 23, { frecuencia_frames: 2.1 }), c(this, "_sprites_filberto", "idleLeft_filberto", 24, 27, { frecuencia_frames: 2.1 }), c(this, "_sprites_filberto", "idleRight_filberto", 28, 31, { frecuencia_frames: 2.1 }), c(this, "_sprites_novia_juan", "walkDown_novia_juan", 0, 3), c(this, "_sprites_novia_juan", "walkUp_novia_juan", 4, 7), c(this, "_sprites_novia_juan", "walkLeft_novia_juan", 8, 11), c(this, "_sprites_novia_juan", "walkRight_novia_juan", 12, 15), c(this, "_sprites_novia_juan", "idleFront_novia_juan", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_novia_juan", "idleBack_novia_juan", 20, 23, { frecuencia_frames: 2.1 }), c(this, "_sprites_novia_juan", "idleLeft_novia_juan", 24, 27, { frecuencia_frames: 2.1 }), c(this, "_sprites_novia_juan", "idleRight_novia_juan", 28, 31, { frecuencia_frames: 2.1 }), c(this, "_sprite_globo_dialogo", "idle_dialogo", 0, 4, { frecuencia_frames: 5.5, repeticion: 0 }), c(this, "_sprite_vendedor", "idle_vendedor", 0, 9, 5), c(this, "_sprite_vendedor_tienda", "idle_vendedro_tienda", 0, 8, { frecuencia_frames: 7, repeticion: 0 }), c(this, "_sprite_ojos_gato", "animacion_ojos_gato", 0, 6, { frecuencia_frames: 6, repeticion: 0 }), c(this, "_sprite_cesta_vendedor", "idle_cesta", 0, 6, { frecuencia_frames: 5 }), c(this, "_sprite_minijuego_pantalla_inicio", "animacion_minijuego_inicio", 0, 18, { frecuencia_frames: 6 }), c(this, "_vela_1", "idle_vela_1", 0, 3, { frecuencia_frames: 5 }), c(this, "_craneo_1", "idle_craneo_1", 0, 3, { frecuencia_frames: 5 }), this.scene.start("LoginScene") } update () { } } let Me = 200, fe = Me * Math.sqrt(.4), k, O, Ae = "idleFront"; class D { constructor(e) { this.escena = e, k = e.input.keyboard.addKeys({ up: "UP", left: "LEFT", down: "DOWN", right: "RIGHT" }), O = { idle: { front: "idleFront", back: "idleBack", left: "idleLeft", right: "idleRight" }, caminata: { up: "walkUp", down: "walkDown", left: "walkLeft", right: "walkRight" } } } movimientoPersonaje (e) { switch (!0) { case Ke(k, k.up, k.left): Ae = O.idle.back, ye(e, -fe, -fe, O.caminata.up); break; case Ke(k, k.up, k.right): Ae = O.idle.back, ye(e, fe, -fe, O.caminata.up); break; case Ke(k, k.down, k.left): Ae = O.idle.front, ye(e, -fe, fe, O.caminata.down); break; case Ke(k, k.down, k.right): Ae = O.idle.front, ye(e, fe, fe, O.caminata.down); break; case qe(k, k.right): Ae = O.idle.right, ye(e, Me, 0, O.caminata.right); break; case qe(k, k.left): Ae = O.idle.left, ye(e, -Me, 0, O.caminata.left); break; case qe(k, k.down): Ae = O.idle.front, ye(e, 0, Me, O.caminata.down); break; case qe(k, k.up): Ae = O.idle.back, ye(e, 0, -Me, O.caminata.up); break; default: e.anims.play(Ae, !0) } } modificarCursoresMovimiento (e, i, a, s) { k = void 0, k = this.escena.input.keyboard.addKeys({ up: `${e}`, left: `${i}`, down: `${a}`, right: `${s}` }) } definirAnimaciones ({ idleFront: e = "idleFront", idleBack: i = "idleBack", idleLeft: a = "idleLeft", idleRight: s = "idleRight", walkUp: o = "walkUp", walkDown: r = "walkDown", walkLeft: h = "walkLeft", walkRight: y = "walkRight" }) { Ae = e, O.caminata = { up: o, down: r, left: h, right: y }, O.idle = { front: e, back: i, left: a, right: s } } cambiarVelocidadMovimeinto (e) { Me = e } } function ye (t, e, i, a) { t.setVelocityX(e), t.setVelocityY(i), t.anims.play(a, !0) } function Ke (t, e, i) { return t && e && e.isDown && i && i.isDown } function qe (t, e) { return t && e && e.isDown } let te = [[], [], [], []], ze = [[], [], [], []], fs = ["+", "-", "√ó", "√∑", "‚àö", "¬≤"], Ce = [], Nt, Et, bt; class Bi {
    constructor(e, i = 4, a = 5) { this.escena = e, Nt = i, Et = a } crearMatriz ({ width: e = this.escena.game.canvas.width, height: i = this.escena.game.canvas.height } = {}) {
        te = [[], [], [], []], ze = [[], [], [], []], Ce = []; const a = e * .13, s = i * .175; for (let o = 0; o < Et; o++) {
            let r = Math.floor(Math.random() * (10 * o - 10 * (o - 1) + 1)) + 10 * (o - 1), h = fs[Math.floor(Math.random() * 6)], y = h == "‚àö" ? "‚àöx" : h == "¬≤" ? "x" + h : h == "√∑" && r == 0 ? "√∑1" : h + r, A = a + e * .04 * (o * 4 + 1); ze[0].push(this.escena.add.rectangle(A, s + i * .06, 200, 100, 12471347).setOrigin(.5)), o > 0 ? (Ce.push(h == "‚àö" ? "‚àö" : h == "¬≤" ? h : h + r), te[0].push(this.escena.add.text(A, s + i * .06, y, { fontFamily: "Arial", fontSize: 34, color: "#ffffff" })), te[0][o].setOrigin(.5)) : (te[0].push(this.escena.add.text(A, s + i * .06, `N√∫mero
Inicial`, { fontFamily: "Arial", fontSize: 30, color: "#ffffff", align: "center" })), te[0][o].setOrigin(.5))
        } for (let o = 1; o < Nt; o++) { let r = s + i * .06 * (o * 3 + 1), h = Math.floor(Math.random() * (98 * o - 150 * (o - 1) + 1)) + 150 * (o - 1); ze[o].push(this.escena.add.rectangle(a + e * .04, r, 200, 100, 15843509).setOrigin(.5)), te[o].push(this.escena.add.text(a + e * .04, r, h, { fontFamily: "Arial", fontSize: 34, color: "#2c2c2c" })), te[o][0].setOrigin(.5); for (let y = 1; y < Et; y++) { let A = a + e * .04 * (y * 4 + 1); ze[o].push(this.escena.add.rectangle(A, r, 200, 100, 11248241).setOrigin(.5)), te[o].push(this.escena.add.text(A, r, "", { fontFamily: "Arial", fontSize: 34, color: "#ffffff" })), te[o][y].setOrigin(.5) } } return { matrizOperaciones: te, matrizRectangulos: ze }
    } comprobarRespuesta (e, i, a, s = !1) { const o = Math.pow(10, 2); let r; switch (bt && !s ? r = bt : r = Number.parseInt(te[i][0].text), console.log(r), Ce[a - 1][0]) { case "‚àö": r = Math.floor(Math.sqrt(r) * o) / o, console.log("‚àö", r); break; case "¬≤": r = Math.floor(Math.pow(r, 2) * o) / o, console.log("¬≤", r); break; case "√∑": r = Math.floor(r / Number.parseInt(Ce[a - 1].slice(1)) * o) / o, console.log("√∑", r); break; case "√ó": r = Math.floor(r * Number.parseInt(Ce[a - 1].slice(1)) * o) / o, console.log("√ó", r); break; case "+": r = Math.floor((r + Number.parseInt(Ce[a - 1].slice(1))) * o) / o, console.log("+", r); break; case "-": r = Math.floor((r - Number.parseInt(Ce[a - 1].slice(1))) * o) / o, console.log("-", r); break }return r == e ? (bt = r, !0) : !1 }
} let Oe, we, Ze, Z, V, Ee = "numerico"; const Ut = 5; let ys = 4, Te, I = { col: 1, fila: 1 }, be; class Es extends b.Scene {
    constructor() { super({ key: "game" }) } preload () { } create () {
        this.Movimientos = new D(this); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_vegetacion").setDepth(-1), this.grupo1 = S(this, "_arbol_1", { repeticiones: 2, cellWidth: 4 }), this.idle = this.physics.add.sprite(e.x * .6, e.y * .8, "_sprites_mujer").setImmovable().setScale(3), this._sprite_vendedor = this.physics.add.sprite(e.x * 1.6, e.y * .8, "_sprite_vendedor").setOrigin(.48, .35).setScale(1.25, 1.25).setImmovable(), this.player = this.physics.add.sprite(e.x, e.y, "_sprites_hombre"), this.idle_dialogo = this.add.sprite(this._sprite_vendedor.x, this._sprite_vendedor.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8), c(this, "_sprites_mujer", "_idle_mujer", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "walkDown", 0, 3), c(this, "_sprites_hombre", "walkUp", 4, 7), c(this, "_sprites_hombre", "walkLeft", 8, 11), c(this, "_sprites_hombre", "walkRight", 12, 15), c(this, "_sprites_hombre", "idleFront", 16, 19, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "idleBack", 20, 23, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "idleLeft", 24, 27, { frecuencia_frames: 2.1 }), c(this, "_sprites_hombre", "idleRight", 28, 31, { frecuencia_frames: 2.1 }), c(this, "_sprite_vendedor", "idle_vendedor_estandar", 0, 9, { frecuencia_frames: 5 }), this._sprite_vendedor.anims.play("idle_vendedor_estandar"), this.idle_dialogo.visible = !1, this.physics.world.enable(this.player), this.player.setCollideWorldBounds(!0), this.physics.world.enable(this.grupo1), this.physics.add.collider(this.player, this.grupo1, () => { console.log(1) }, null, this), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), w(this.idle, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), this.g = !1, this.physics.add.overlap(this.player, this._sprite_vendedor, () => { this.g = !0 }, null, this), this.idle.anims.play("_idle_mujer"), this.timer = this.time.addEvent({ delay: 10, callback: () => { this.g ? this.idle_dialogo.anims.isPlaying ? this.g = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.g = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }), Oe = this.add.text(e.x, e.y * 1.8, "Texto: ", { fontFamily: "Arial", fontSize: 34, color: "#ffffff" }), Oe.setOrigin(.5), this.input.keyboard.on("keyup", function (s) { if (s.key === "Enter") { let o = Oe.text.substring(7); console.log("Texto ingresado:", o), Oe.text = "Texto: " } else Oe.text += s.key }), Te = this.add.graphics({ lineStyle: { width: 2, color: 16777215 } }), we = this.add.rectangle(200, 200, 200, 100), Ze = this.add.rectangle(400, 200, 200, 100), Te.strokeRectShape(we), Z = this.add.text(we.x, we.y, "", { fontFamily: "Arial", fontSize: 24, color: "#ffffff" }), V = this.add.text(Ze.x, Ze.y, "", { fontFamily: "Arial", fontSize: 24, color: "#808080" }), this.input.keyboard.on("keyup", function (s) {
            switch (!0) {
                case (s.key === "Enter" && Ee === "numerico"): Z.text += `
`; break; case (s.key === "Enter" && Ee === "texto"): V.text += `
`; break; case (s.key === "Backspace" && Ee === "numerico"): Z.text[Z.text.length - 2] === `
`? Z.text = Z.text.slice(0, -2) : Z.text = Z.text.slice(0, -1); break; case (s.key === "Backspace" && Ee === "texto"): V.text[V.text.length - 2] === `
`? V.text = V.text.slice(0, -2) : V.text = V.text.slice(0, -1); break; case (Ee === "texto" && Ve(s.key)): Jt(V, s.key); break; case (Ee === "numerico" && Ve(s.key, !0)): Jt(Z, s.key); break; case s.key === "ArrowLeft": Ee = "numerico", Pt(Z, V, we), Z.setColor("#ffffff"), V.setColor("#808080"), Te.strokeRectShape(we); break; case s.key === "ArrowRight": Ee = "texto", Pt(V, Z, Ze); break
            }
        }), this.basta = new Bi(this); let { matrizOperaciones: i, matrizRectangulos: a } = this.basta.crearMatriz(); a[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col], this.input.keyboard.on("keyup", function (s) { switch (!0) { case s.key === "ArrowDown": I.fila < i.length - 1 && (a[I.fila][I.col].fillColor = 8421504, I.fila++, a[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case s.key === "ArrowUp": I.fila > 1 && (a[I.fila][I.col].fillColor = 8421504, I.fila--, a[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case s.key === "ArrowLeft": I.col > 1 && (a[I.fila][I.col].fillColor = 8421504, I.col--, a[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case s.key === "ArrowRight": I.col < i[I.fila].length - 1 && (a[I.fila][I.col].fillColor = 8421504, I.col++, a[I.fila][I.col].fillColor = 0, be = i[I.fila][I.col]); break; case s.key === "Backspace": be.text = be.text.slice(0, -1); break } }), this.input.keyboard.on("keyup", function (s) { console.log(Ve(s.key, !0)), Ve(s.key, !0) && bs(be, s.key) }), console.log(this.basta.comprobarRespuesta("10", 1)), xs(this, this.idle, this.idle.x, this.idle.y, this.idle.x + 100, this.idle.y + 100, 3e3, "walkDown_mujer")
    } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > this.idle.y ? (this.player.setDepth(1), this.idle.setDepth(0)) : (this.player.setDepth(0), this.idle.setDepth(1)) }
} function Ve (t, e = !1) { let i; return e ? i = /^[0-9 +*/-]$/ : i = /^[A-Za-z.,;:¬°!¬ø? ]$/, i.test(t) } function Jt (t, e) {
    let a = t.text.split(`
`), s = a[a.length - 1]; a.length <= ys && (s.length < Ut ? t.text += e : s.length == Ut ? t.text += `
`: t.text += e)
} function bs (t, e) { let i = t.text.length; i == 4 ? t.text = e : i < 4 && (t.text += e) } function Pt (t, e, i, { colorSelec: a = "#ffffff", colorDeselec: s = "#808080" } = {}) { e.setColor(s), t.setColor(a), Te.clear(), Te.lineStyle(2, Number.parseInt(a.substring(1), 16)), Te.strokeRectShape(i) } function xs (t, e, i, a, s, o, r, h) { e.x = i, e.y = a, t.time.delayedCall(1e3, () => { t.tweens.add({ targets: e, x: s, y: o, duration: r, onComplete: () => { t.time.delayedCall(1e3, () => { t.tweens.add({ targets: e, x: s + (s - i), y: a, duration: r, onComplete: () => { e.anims.play("idleRight_mujer") } }), e.anims.play("walkUp_mujer") }), e.anims.play("idleFront_mujer") } }), e.anims.play(h) }) } class Ot { constructor(e, i) { this.escena = e, this.timer = e.time.addEvent(i), this.configTimer = i } crearTimer () { return this.timer } parpadeoLinea (e) { e.visible = !e.visible } reiniciar () { this.timer.reset(this.configTimer) } eliminarTimer () { this.timer.remove() } } function ft (t, e) { return t.time.addEvent(e) } let Ye = { movimiento: { flechas: void 0, letras: void 0 }, acciones: { confirmar: void 0 } }, oe = { mujer: void 0, hombre: void 0 }, xe = { mujer: void 0, hombre: void 0 }, G = { mujer: void 0, hombre: void 0 }, We = "Mujer", $e, et, Ft, _s = "Escoge tu personaje... (Usa A y D para seleccionar. Usa F para confirmar)"; class _A extends b.Scene { constructor() { super({ key: "seleccion_personaje" }) } init () { We = "mujer" } preload () { } create () { Ye.movimiento.flechas = this.input.keyboard.createCursorKeys(), Ye.acciones.confirmar = this.input.keyboard.addKey("F"); let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.add.image(e.x / 2, e.y / 2, "_fondo_vegetacion").setScale(.8).setDepth(-1), this.add.image(e.x / 2, e.y * .8, "_banner_dialogos").setScale(.8, 1), this.idle_Mujer = this.add.sprite(e.x * .32, e.y * .37, "_sprites_mujer").setScale(2.5), this.idle_Hombre = this.add.sprite(e.x * .66, e.y * .37, "_sprites_hombre").setScale(2.5), this.idle_Mujer.anims.play("idleFront_mujer"), this.idle_Hombre.anims.play("idleFront_hombre"), $e = { fontFamily: "Arial", fontSize: 35, fill: "white", align: "center" }, this.add.text(e.x * .1, e.y * .71, _s, $e).setOrigin(0), oe.mujer = this.add.text(e.x * .3, e.y * .84, "Mujer", $e), oe.mujer.setOrigin(.5), xe.mujer = oe.mujer.getBounds(), G.mujer = this.add.graphics(), G.mujer.fillStyle(16777215, 1), G.mujer.fillRect(oe.mujer.x - xe.mujer.width / 2, oe.mujer.y + xe.mujer.height - 10, xe.mujer.width, 5), oe.hombre = this.add.text(e.x * .66, e.y * .84, "Hombre", $e), oe.hombre.setOrigin(.5), xe.hombre = oe.hombre.getBounds(), G.hombre = this.add.graphics(), G.hombre.fillStyle(16777215, 1), G.hombre.fillRect(oe.hombre.x - xe.hombre.width / 2, oe.hombre.y + xe.hombre.height - 10, xe.hombre.width, 5), G.hombre.visible = !1, et = G.mujer, Ft = { delay: 700, callback: () => { this.manejadorParpade.parpadeoLinea(et) }, callbackScope: this, loop: !0 }, this.manejadorParpade = new Ot(this, Ft), this.manejadorParpade.crearTimer() } update () { Ye.movimiento.flechas.right.isDown ? (G.mujer.visible = !1, G.hombre.visible = !0, We = "hombre", et = G.hombre, this.manejadorParpade.reiniciar()) : Ye.movimiento.flechas.left.isDown ? (G.mujer.visible = !0, G.hombre.visible = !1, We = "mujer", et = G.mujer, this.manejadorParpade.reiniciar()) : Ye.acciones.confirmar.isDown && (this.manejadorParpade.eliminarTimer(), this.scene.start("confirmacion_seleccion_personaje", { personaje: We })) } } class Bs extends b.Scene { constructor() { super({ key: "pantalla_inicio" }) } preload () { } create () { this.Movimientos = new D(this); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x * .99, e.y * .975, "_fondo_pantalla_incio").setScale(.8), this.minijuego = this.physics.add.sprite(e.x * 1.0325, e.y * .476, "minijuego_incio").setScale(.65), this.minijuego.anims.play("animacion_minijuego_inicio"), this.player = this.physics.add.sprite(e.x * 1.0325, e.y * .7, "_sprites_juan_cupul").setScale(.8), this.player.anims.play("walkRight_juan"), this.add.image(e.x, e.y, "_vidrio").setScale(.8), this.btn_jugar = this.add.circle(e.x * 1.18, e.y * 1.38, 45, 0, 0), this.physics.world.enable(this.btn_jugar), this.btn_jugar.body.setCircle(35), this.btn_jugar.setInteractive(), this.btn_jugar.on("pointerdown", function (i) { this.scene.start("area_32_interior") }, this), this.btn_salir = this.add.circle(e.x * 1.345, e.y * 1.245, 45, 0, 0), this.physics.world.enable(this.btn_salir), this.btn_salir.body.setCircle(35), this.btn_salir.setInteractive(), this.btn_salir.on("pointerdown", function (i) { this.scene.start("LoginScene") }, this), this.add.text(800, 385, "Usa el mouse para seleccionar", { fontSize: "30px", fontStyle: "bold", color: "#000000" }).setOrigin(.5) } update () { } } let Ne = { movimiento: { flechas: void 0, letras: void 0 }, acciones: { confirmar: void 0 } }, he = "", _e = { aceptar: void 0, cancelar: void 0 }, X = { aceptar: void 0, cancelar: void 0 }, re = { aceptar: void 0, cancelar: void 0 }, Is = "¬øEst√°s seguro de tu elecci√≥n? (Usa F para confirmar)", tt, it, at, Gt; class BA extends b.Scene { constructor() { super({ key: "confirmacion_seleccion_personaje" }) } init (e) { e && (he = e.personaje, it = !0) } preload () { } create () { Ne.movimiento.flechas = this.input.keyboard.createCursorKeys(), Ne.acciones.confirmar = this.input.keyboard.addKey("F"); let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.add.image(e.x / 2, e.y / 2, "_fondo_vegetacion").setScale(.8).setDepth(-1), this.add.image(e.x / 2, e.y * .8, "_banner_dialogos").setScale(.8, 1), this.caminata_Frente_P = this.add.sprite(e.x * .2, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Der_P = this.add.sprite(e.x * .4, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Espalda_P = this.add.sprite(e.x * .6, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Izq_P = this.add.sprite(e.x * .8, e.y * .37, "_sprites_" + he).setScale(1.5), this.caminata_Frente_P.play("walkDown_" + he), this.caminata_Der_P.play("walkRight_" + he), this.caminata_Espalda_P.play("walkUp_" + he), this.caminata_Izq_P.play("walkLeft_" + he), tt = { fontFamily: "Arial", fontSize: 35, fill: "white", align: "center" }, this.add.text(e.x * .1, e.y * .71, Is, tt).setOrigin(0), re.aceptar = this.add.text(e.x * .3, e.y * .84, "S√≠", tt), re.aceptar.setOrigin(.5), _e.aceptar = re.aceptar.getBounds(), X.aceptar = this.add.graphics(), X.aceptar.fillStyle(16777215, 1), X.aceptar.fillRect(re.aceptar.x - _e.aceptar.width / 2, re.aceptar.y + _e.aceptar.height - 10, _e.aceptar.width, 5), re.cancelar = this.add.text(e.x * .66, e.y * .84, "No", tt), re.cancelar.setOrigin(.5), _e.cancelar = re.cancelar.getBounds(), X.cancelar = this.add.graphics(), X.cancelar.fillStyle(16777215, 1), X.cancelar.fillRect(re.cancelar.x - _e.cancelar.width / 2, re.cancelar.y + _e.cancelar.height - 10, _e.cancelar.width, 5), X.cancelar.visible = !1, at = X.aceptar, this.manejadorParpade = new Ot(this, Gt), Gt = { delay: 700, callback: () => { this.manejadorParpade.parpadeoLinea(at) }, callbackScope: this, loop: !0 }, this.timer = this.manejadorParpade.crearTimer() } update () { Ne.movimiento.flechas.right.isDown ? (X.aceptar.visible = !1, X.cancelar.visible = !0, it = !1, at = X.cancelar, this.manejadorParpade.reiniciar()) : Ne.movimiento.flechas.left.isDown ? (X.aceptar.visible = !0, X.cancelar.visible = !1, it = !0, at = X.aceptar, this.manejadorParpade.reiniciar()) : Ne.acciones.confirmar.isDown && (it ? (this.timer.remove(), this.scene.start("area_32_interior")) : (this.timer.remove(), this.scene.start("seleccion_personaje"))) } } let de = { movimiento: { flechas: void 0 }, acciones: { confirmar: void 0, cacelar: void 0 } }, ce = { comprar: void 0, preguntas: void 0, cancelar: void 0 }, Q = [void 0, void 0, void 0], W = [void 0, void 0, void 0], xt = ["Basta Matem√°tico", "Preguntas", "Cancelar"], T, Ue, De = { parpadeo: void 0, animacion: { vendedor: void 0, canasta: void 0 } }, ke, Je = { key: "a", posicion: { x: 10, y: 100 } }; class Cs extends b.Scene { constructor() { super({ key: "vendedor_pantalla_principal" }) } init (e) { e && (Je = e) } preload () { } create () { de.movimiento.flechas = this.input.keyboard.createCursorKeys(), de.acciones.confirmar = this.input.keyboard.addKey("ENTER"), de.acciones.cacelar = this.input.keyboard.addKey("ESC"); let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.idle_vendedor_pp = this.add.sprite(e.x * .25, e.y * .4, "_sprite_vendedor_tienda").setScale(3, 3), this.canasta = this.add.sprite(e.x * .25, e.y * .36, "_sprite_cesta_vendedor").setScale(3.5, 3.5), this.ojos_gato = this.add.sprite(e.x * .25, e.y * .36, "_sprite_ojos_gato").setScale(3.5, 3.5), this.add.image(e.x / 2, e.y / 2, "_fondo_vendedor_tienda").setScale(.8, .735).setDepth(-1), this.add.image(e.x / 2, e.y * .8, "_banner_dialogos").setAlpha(.7).setScale(.8, 1).setDepth(1), this.add.image(e.x * .75, e.y * .35, "_banner_contextos").setScale(.8, .8).setDepth(1), this.idle_vendedor_pp.anims.play("idle_vendedro_tienda"), this.canasta.anims.play("idle_cesta"), Ue = { fontFamily: "Arial", fontSize: 35, fill: "white", align: "center" }, this.add.text(e.x / 2, e.y * .8, "Bienvenido... Tengo algo que podria interesarte.", Ue).setOrigin(.5).setDepth(2), W[0] = this.add.text(e.x * .6, e.y * .2, xt[0], Ue).setDepth(2).setOrigin(0), ce.comprar = W[0].getBounds(), Q[0] = this.add.graphics(), Q[0].fillStyle(16777215, 1), Q[0].fillRect(W[0].x, W[0].y + ce.comprar.height, ce.comprar.width, 5), Q[0].setDepth(2), ke = Q[0], W[1] = this.add.text(e.x * .6, e.y * .3, xt[1], Ue).setDepth(2).setOrigin(0), ce.preguntas = W[1].getBounds(), Q[1] = this.add.graphics(), Q[1].fillStyle(16777215, 1), Q[1].fillRect(W[1].x, W[1].y + ce.preguntas.height, ce.preguntas.width, 5), Q[1].setDepth(2), Q[1].visible = !1, W[2] = this.add.text(e.x * .6, e.y * .4, xt[2], Ue).setDepth(2).setOrigin(0), ce.cancelar = W[2].getBounds(), Q[2] = this.add.graphics(), Q[2].fillStyle(16777215, 1), Q[2].fillRect(W[2].x, W[2].y + ce.cancelar.height, ce.cancelar.width, 5), Q[2].setDepth(2), Q[2].visible = !1, De.parpadeo = { delay: 700, callback: () => { this.manejadorParpadeo.parpadeoLinea(ke) }, callbackScope: this, loop: !0 }, this.manejadorParpadeo = new Ot(this, De.parpadeo), this.timer = this.manejadorParpadeo.crearTimer(), De.animacion.vendedor = { delay: 7e3, callback: () => { this.idle_vendedor_pp.anims.play("idle_vendedro_tienda") }, callbackScope: this, loop: !0 }, this.timer = ft(this, De.animacion.vendedor), De.animacion.canasta = { delay: 3150, callback: () => { this.ojos_gato.anims.play("animacion_ojos_gato") }, callbackScope: this, loop: !0 }, this.timer = ft(this, De.animacion.canasta), T = 0, this.timer = this.time.addEvent({ delay: 150, startAt: 150, callback: () => { this.seleccion() }, callbackScope: this, loop: !0 }) } seleccion () { switch (!0) { case de.movimiento.flechas.up.isDown: T == 0 ? (Q[T].visible = !1, T = 2, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()) : (Q[T--].visible = !1, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()); break; case de.movimiento.flechas.down.isDown: T == 2 ? (Q[T].visible = !1, T = 0, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()) : (Q[T++].visible = !1, Q[T].visible = !0, ke = Q[T], this.manejadorParpadeo.reiniciar()); break; case (de.acciones.confirmar.isDown && T == 0): this.scene.start("basta_matematico", Je); break; case (de.acciones.confirmar.isDown && T == 1): this.scene.start("pantalla_preguntas", Je); break; case (de.acciones.confirmar.isDown && T == 2 || de.acciones.cacelar.isDown): this.timer.remove(), this.scene.start(Je.key, { entrada: "vendedor", posicion: Je.posicion }); break } } update () { } } const Y = "https://api-rest-render-8ynf.onrender.com", N = `
    width: 150px;
    height: 40px;
    font-size: 20px;
    font-weight: bold;
    padding: 5px;
    background-color: #ffffff;
    border: 2px solid #0000000;
    border-radius: 6px;
    color: #000000;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s;
`, F = `
    width: 300px; 
    height: 30px; 
    font-size: 18px; 
    color: #000
    padding: 5px; 
    border: 2px solid #000;
    border-radius: 6px;
`, L = `
    width: 300px;
    height: 100px; 
    font-size: 20px;
    padding: 5px;
    border: 2px solid #000;
    border-radius: 6px;
    resize: none;
`, Ii = `
    width: 400px;
    height: 150px; 
    font-size: 20px;
    padding: 5px;
    border: 2px solid #000;
    border-radius: 6px;
    resize: none;
`; let st = { parpadeo: void 0, animacion: { vendedor: void 0, canasta: void 0 } }; const Tt = []; let ae, R, _t, $, ie, Be, U, ve, Bt; class vs extends b.Scene {
    constructor() { super({ key: "pantalla_preguntas" }) } init (e) { e && (Bt = e) } preload () { } create () { ae ? (R = Ht(), _t = R.contexto, $ = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: R.respQuien.split(","), respuesta: R.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: R.respQue.split(","), respuesta: R.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: R.respOperaciones.split(","), respuesta: R.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: R.preguntaProblema, respuestas: R.respProblema.split(","), respuesta: R.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena()) : fetch(Y + "/api/vendedor-preguntas", { method: "GET", headers: { "Content-Type": "application/json" } }).then(e => e.json()).then(e => { e && (e.data.forEach(i => { Tt.push({ contexto: i.attributes.contexto, respQuien: i.attributes.quien, respQue: i.attributes.que, respOperaciones: i.attributes.operaciones, preguntaProblema: i.attributes.pregunta, respProblema: i.attributes.resultado }) }), ae = [...Tt], R = Ht(), _t = R.contexto, $ = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: R.respQuien.split(","), respuesta: R.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: R.respQue.split(","), respuesta: R.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: R.respOperaciones.split(","), respuesta: R.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: R.preguntaProblema, respuestas: R.respProblema.split(","), respuesta: R.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena()) }).catch(e => { console.error(e) }) } update () { } crearEscena () {
        ve = !1, Be = 0, U = 0; let e = { x: this.game.canvas.width, y: this.game.canvas.height }; this.idle_vendedor_pp = this.add.sprite(e.x * .25, e.y * .4, "_sprite_vendedor_tienda").setScale(3, 3), this.canasta = this.add.sprite(e.x * .25, e.y * .36, "_sprite_cesta_vendedor").setScale(3.5, 3.5), this.ojos_gato = this.add.sprite(e.x * .25, e.y * .36, "_sprite_ojos_gato").setScale(3.5, 3.5), this.add.image(e.x / 2, e.y / 2, "_fondo_vendedor_tienda").setScale(.8, 1).setDepth(-1), this.add.image(e.x / 2, e.y * .82, "_banner_dialogos").setScale(.8, 1.1).setDepth(1), this.add.image(e.x * .75, e.y * .35, "_banner_contextos").setScale(.8, .8).setDepth(1), this.idle_vendedor_pp.anims.play("idle_vendedro_tienda"), this.canasta.anims.play("idle_cesta"), this.add.text(e.x * .75, e.y * .35, _t, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: 525, useAdvancedWrap: !0 } }).setOrigin(.5).setDepth(2), st.animacion.vendedor = { delay: 7e3, callback: () => { this.idle_vendedor_pp.anims.play("idle_vendedro_tienda") }, callbackScope: this, loop: !0 }, this.timer = ft(this, st.animacion.vendedor), st.animacion.canasta = { delay: 3150, callback: () => { this.ojos_gato.anims.play("animacion_ojos_gato") }, callbackScope: this, loop: !0 }, this.timer = ft(this, st.animacion.canasta); for (let i = 0; i <= 3; i++)$[i].areaTexto = this.add.text(e.x * .1, e.y * .71, $[i].pregunta, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: e.x * .8, useAdvancedWrap: !0 } }).setDepth(2), $[i].areaTexto.visible = !1; $[Be].areaTexto.visible = !0, ie = Qs(this, It($[0].respuestas)), ie[U].setColor("#FFFFFF"), this.retro = { texto: void 0, background: void 0 }, this.retro.texto = this.add.text(e.x * .13, e.y * .77, `La respuesta ha sido incorrecta.
Analiza de nuevo el problema e intentalo de nuevo`, { fontFamily: "Arial", fontSize: 32, color: "#FFFFFF" }).setOrigin(0).setDepth(7), this.retro.texto.visible = !1, this.retro.background = this.add.image(e.x / 2, e.y * .82, "_banner_dialogos").setScale(.8, 1.1).setDepth(6), this.retro.background.visible = !1, this.input.keyboard.on("keyup", function (i) { if (ve) switch (!0) { case i.key == "ArrowLeft": ie[U].setColor("#cacaca"), U <= 0 ? U = 3 : U -= 1, ie[U].setColor("#FFFFFF"); break; case i.key == "ArrowRight": ie[U].setColor("#cacaca"), U >= 3 ? U = 0 : U += 1, ie[U].setColor("#FFFFFF"); break; case i.key == "Enter": ie[U].text.split(") ")[1] == $[Be].respuesta ? Be < 3 ? (ve = !1, $[Be++].areaTexto.visible = !1, $[Be].areaTexto.visible = !0, Xt(It($[Be].respuestas), ie), U = 0, ie.forEach(a => { a.setColor("#cacaca") }), ie[U].setColor("#ffffff"), this.time.delayedCall(2e3, () => { ve = !0 })) : (this.retro.texto.text = "¬°¬°¬°Felicidades!!! Haz logrado resolver todo correctamente.", this.retro.texto.visible = !0, this.retro.background.visible = !0, this.time.delayedCall(4e3, () => { this.scene.start("vendedor_pantalla_principal", Bt) })) : (ve = !1, this.retro.texto.visible = !0, this.retro.background.visible = !0, Xt(It($[Be].respuestas), ie), this.time.delayedCall(4e3, () => { ve = !0, this.retro.background.visible = !1, this.retro.texto.visible = !1 })); break; case i.key == "Escape": this.scene.start("vendedor_pantalla_principal", Bt); break } }, this), this.time.delayedCall(4e3, () => { ve = !0 })
    }
} function Qs (t, e) { const i = t.game.canvas.width, a = t.game.canvas.height, s = i * .08; let o = []; for (let r = 0; r <= 3; r++) { let h = s + i * .05 * (r * 4 + 1); o.push(t.add.text(h, a * .89, r + 1 + ") " + e[r], { fontFamily: "Arial", fontSize: 30, color: "#cacaca", align: "left", wordWrap: { width: 220, useAdvancedWrap: !0 } }).setOrigin(0, .5).setDepth(3)) } return o } function It (t) { let e = t, i = t.length, a, s; for (; i !== 0;)s = Math.floor(Math.random() * i), i--, a = e[i], e[i] = e[s], e[s] = a; return e } function Xt (t, e) { for (let i = 0; i <= 3; i++)e[i].text = i + 1 + ") " + t[i] } function Ht () { let t, e; return ae.length != 0 ? (t = Math.floor(Math.random() * ae.length), e = ae[t], ae.splice(t, 1)) : (ae = [...Tt], console.log(ae), t = Math.floor(Math.random() * ae.length), e = ae[t], ae.splice(t, 1)), e } let z, K, p, ee, Pe, Ct = !0, Fe = !1, Ge = !1, Re; class Ss extends b.Scene { constructor() { super({ key: "basta_matematico" }) } preload () { } create () { z = void 0, K = void 0, p = { col: 1, fila: 1 }, Pe = 0, Re = [], this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.text(80, 60, "Presiona ESC para salir", { fontSize: "24px", fontStyle: "bold", color: "#000000" }).setOrigin(0).setDepth(1); let e; Ct ? (Re.push(this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_instruccion_basta_4").setOrigin(.5).setScale(.756).setDepth(1)), Re.push(this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_instruccion_basta_3").setOrigin(.5).setScale(.756).setDepth(1)), Re.push(this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_instruccion_basta_2").setOrigin(.5).setScale(.756).setDepth(1)), Re.push(this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_instruccion_basta_1").setOrigin(.5).setScale(.756).setDepth(1)), this.time.delayedCall(2e3, () => { Fe = !0 }, [], this), this.basta = new Bi(this), e = this.basta.crearMatriz()) : (e = this.basta.crearMatriz(), this.time.delayedCall(2e3, () => { Ge = !0 }, [], this)), z = e.matrizOperaciones, K = e.matrizRectangulos, K[p.fila][p.col].fillColor = 15195555, z[p.fila][p.col].setTint(2894892), ee = z[p.fila][p.col], console.log(ee.text), this.input.keyboard.on("keyup", function (a) { switch (!0) { case a.key === "ArrowDown": p.fila < z.length - 1 && (K[p.fila][p.col].fillColor = 11248241, z[p.fila][p.col].setTint(16185078), p.fila++, K[p.fila][p.col].fillColor = 15195555, z[p.fila][p.col].setTint(2894892), ee = z[p.fila][p.col]); break; case a.key === "ArrowUp": p.fila > 1 && (K[p.fila][p.col].fillColor = 11248241, z[p.fila][p.col].setTint(16185078), p.fila--, K[p.fila][p.col].fillColor = 15195555, z[p.fila][p.col].setTint(2894892), ee = z[p.fila][p.col]); break; case a.key === "ArrowLeft": p.col > 1 && (K[p.fila][p.col].fillColor = 11248241, z[p.fila][p.col].setTint(16185078), p.col--, K[p.fila][p.col].fillColor = 15195555, z[p.fila][p.col].setTint(2894892), ee = z[p.fila][p.col]); break; case a.key === "ArrowRight": p.col < z[p.fila].length - 1 && (K[p.fila][p.col].fillColor = 11248241, z[p.fila][p.col].setTint(16185078), p.col++, K[p.fila][p.col].fillColor = 15195555, z[p.fila][p.col].setTint(2894892), ee = z[p.fila][p.col]); break; case a.key === "Backspace": ee.text = ee.text.slice(0, -1); break } }); let i = 3; this.input.keyboard.on("keyup", a => { if (ws(a.key, !0) && Ds(ee, a.key), Ct) Fe && (Fe = !1, i >= 0 ? (Re[i--].visible = !1, this.time.delayedCall(2e3, () => { Fe = !0 }, [], this)) : (Fe = !1, Ct = !1, this.time.delayedCall(1e3, () => { Ge = !0 }, [], this))); else if (Ge) if (a.key === "Enter") { Ge = !1; const s = ee.text, o = z.findIndex(y => y.includes(ee)), r = z[p.fila].indexOf(ee); console.log(`Fila: ${o}, Columna: ${r}, Valor: ${s}`); let h; Pe % 4 == 0 || Pe < 1 ? h = this.basta.comprobarRespuesta(s, o, r, !0) : h = this.basta.comprobarRespuesta(s, o, r), h ? (console.log("Respuesta correcta"), K[o][r].fillColor = 65280, Pe++, Pe == 12 && (console.log("¬°Todas las respuestas correctas!"), this.scene.start("vendedor_pantalla_principal"))) : (console.log("Respuesta incorrecta"), K[o][r].fillColor = 16711680), this.time.delayedCall(2e3, () => { Ge = !0 }, [], this) } else a.key === "Escape" && this.scene.start("vendedor_pantalla_principal") }) } update () { } } function ws (t, e = !1) { let i; return e ? i = /^[0-9 +*/.-]$/ : i = /^[A-Za-z.,;:¬°!¬ø? ]$/, i.test(t) } function Ds (t, e) { let i = t.text.length; i == 9 ? t.text = e : i < 9 && (t.text += e) } class ks extends b.Scene {
    constructor() { super({ key: "LoginScene" }) } preload () { } create () {
        this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = "width: 200px; height: 30px; font-size: 16px; padding: 5px; background-color: white; border: 1px solid black;", i = `
            width: 210px;
            height: 50px;
            font-size: 20px;
            font-weight: bold;
            padding: 5px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            color: #000;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        `; this.add.text(774, 180, "Bienvenido a Conquista Matem√°tica", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 240, "Introduzca sus datos para iniciar sesi√≥n", { fontSize: "28px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(530, 320, "Usuario:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(774, 335).createFromHTML(`<input id="user" type="text" style="${e}">`), this.add.text(500, 400, "Contrase√±a:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(774, 415).createFromHTML(`<input id="contra" type="password" style="${e}">`); const a = this.add.dom(774, 500).createFromHTML(`<button style="${i}">Login</button>`); a.addListener("click"), a.on("click", function () { const o = document.querySelector("#user"), r = document.querySelector("#contra"), h = o.value, y = r.value; let A = "", n = ""; if (h.trim() === "" || y.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } fetch(Y + "/api/usuarios", { method: "GET", headers: { "Content-Type": "application/json;charset=UTF-8" } }).then(d => { if (d.ok) return d.json(); throw new Error("Error en la autenticaci√≥n") }).then(d => { const C = d.data.find(_ => _.attributes.nombre === h && _.attributes.contrasena === y); if (C) A = C.attributes.tipo, n = C.id; else { alert("Usuario y/o contrase√±a incorrectos."); return } switch (A) { case "estudiante": localStorage.setItem("userId", n), localStorage.setItem("userTipo", A), this.scene.start("pantalla_inicio"); break; case "profesor": localStorage.setItem("userId", n), localStorage.setItem("userTipo", A), this.scene.start("EleccionScene"); break; case "admin": localStorage.setItem("userId", n), localStorage.setItem("userTipo", A), this.scene.start("Eleccion_Admin"); break; default: console.error("Error de autenticaci√≥n del tipo"); return } }).catch(d => { console.error(d) }) }, this); const s = this.add.dom(774, 560).createFromHTML(`<button style="${i}">Registro</button>`); s.addListener("click"), s.on("click", function () { this.scene.start("RegistroScene") }, this)
    }
} class Rs extends b.Scene { constructor() { super({ key: "RegistroScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = "width: 200px; height: 30px; font-size: 16px; padding: 5px; background-color: white; border: 1px solid black;"; this.add.text(774, 100, "Bienvenido a Ecos de la Historia", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus datos para crear su cuenta", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(530, 185, "Usuario:", { fontSize: "25px", color: "#000000" }), this.add.dom(774, 200).createFromHTML(`<input id="user" type="text" style="${e}">`), this.add.text(500, 240, "Contrase√±a:", { fontSize: "25px", color: "#000000" }), this.add.dom(774, 250).createFromHTML(`<input id="contra" type="password" style="${e}">`), this.add.text(580, 290, "Tipo:", { fontSize: "25px", color: "#000000" }), this.add.dom(774, 300).createFromHTML(`<input id="tipo" type="text" style="${e}">`); const i = this.add.dom(774, 350).createFromHTML(`<button style="${N}">Registrar</button>`); i.addListener("click"), i.on("click", function () { const s = document.querySelector("#user"), o = document.querySelector("#contra"), r = document.querySelector("#tipo"), h = s.value, y = o.value, A = r.value.toLowerCase(); if (h.trim() === "" || y.trim() === "") { alert("Por favor, ingrese nombre de usuario y contrase√±a."); return } switch (y.length < 5 && alert("La contrase√±a debe tener al menos 5 caracteres"), A) { case "estudiante": console.log("Tipo correcto"); break; case "profesor": console.log("Tipo Correcto"); break; default: alert("Tipo solo acepta la palabra estudiante y profesor"); return }const n = { data: { nombre: h, contrasena: y, tipo: A } }; fetch(`${Y}/api/usuarios?filters[nombre][$eq]=${h}`).then(d => { if (d.ok) return d.json(); throw new Error("Error al verificar si el usuario existe") }).then(d => { if (d.data.length > 0) { console.log("El usuario ya existe: ", h, " No se puede registrar."), alert("El usuario ya existe: ", h, " No se puede registrar."); return } else return fetch(`${Y}/api/usuarios`, { method: "POST", body: JSON.stringify(n), headers: { "Content-Type": "application/json" } }) }).then(d => { if (d && d.ok) return d.json(); throw new Error("Error en el registro") }).then(d => { console.log("Registro exitoso:", d), this.scene.start("LoginScene") }).catch(d => { console.error("Error al registrar usuario:", d) }) }, this); const a = this.add.dom(774, 400).createFromHTML(`<button style="${N}">Volver</button>`); a.addListener("click"), a.on("click", function () { this.scene.start("LoginScene") }, this) } } const Ci = "/assets/info-260416de.png"; class js extends b.Scene { constructor() { super({ key: "agregarScene" }) } preload () { this.load.image("imagenInfo", Ci) } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = this.add.image(1250, 150, "imagenInfo"); e.setInteractive(), e.setDisplaySize(80, 80), e.setTint(16777215), e.on("pointerdown", () => { this.scene.start("instrucciones_preguntas") }), this.add.text(1250, 200, "C√≥mo agregar preguntas", { fontSize: "15px", fontStyle: "bold", color: "#000000", wordWrap: { width: 150, useAdvancedWrap: !0 } }).setOrigin(.5), this.add.text(774, 160, "Sea bienvenido maestro(a)", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 190, "Introduzca los datos para agregar m√°s preguntas", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(280, 260, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(630, 330).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${Ii}"></textarea>`), this.add.text(870, 260, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1160, 290).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${L}"></textarea>`), this.add.text(255, 432, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 444).createFromHTML(`<input id="quien" type="text" placeholder="op-correcta, op-erronea1, op-erronea2, op-erronea3" style="${F}">`), this.add.text(255, 488, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 500).createFromHTML(`<input id="que" type="text" placeholder="op-correcta, op-erronea1, op-erronea2, op-erronea3" style="${F}">`), this.add.text(250, 570, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", wordWrap: { width: 260, useAdvancedWrap: !0 }, fontStyle: "bold", color: "#000000" }), this.add.dom(700, 600).createFromHTML(`<textarea id="operaciones" placeholder="op-correcta, op-erronea1, op-erronea2, op-erronea3" style="${L}"></textarea>`), this.add.text(950, 400, "Cu√°l es la respuesta al problema:", { fontSize: "25px", wordWrap: { width: 350, useAdvancedWrap: !0 }, fontStyle: "bold", color: "#000000" }), this.add.dom(1100, 560).createFromHTML(`<textarea id="respuesta" placeholder="op-correcta, op-erronea1, op-erronea2, op-erronea3" style="${L}"></textarea>`); const i = this.add.dom(774, 690).createFromHTML(`<button style="${N}">Agregar</button>`); i.addListener("click"), i.on("click", function () { const s = document.querySelector("#contexto"), o = document.querySelector("#pregunta"), r = document.querySelector("#que"), h = document.querySelector("#quien"), y = document.querySelector("#operaciones"), A = document.querySelector("#respuesta"), n = s.value, d = o.value, C = r.value, _ = h.value, m = y.value, B = A.value; if (n.trim() === "" || d.trim() === "" || C.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (At(C) === !1 || At(_) === !1 || At(m) === !1 || At(B) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const g = { data: { pregunta: d, que: C, quien: _, operaciones: m, resultado: B, contexto: n } }; fetch(`${Y}/api/vendedor-preguntas`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(g) }).then(x => { if (x.ok) return x.json(); throw new Error("Error en el registro") }).then(x => { console.log("Registro exitoso:", x), this.scene.start("EleccionScene") }).catch(x => { console.error("Error al registrar usuario:", x) }) }, this); const a = this.add.dom(320, 150).createFromHTML(`<button style="${N}">Volver</button>`); a.addListener("click"), a.on("click", function () { localStorage.getItem("userTipo") === "admin" ? this.scene.start("Eleccion_Admin") : this.scene.start("EleccionScene") }, this) } } function At (t) { return t.split(",").length - 1 !== 3 ? !1 : (console.log("N√∫mero correcto de comas."), !0) } class Ms extends b.Scene {
    constructor() { super({ key: "EleccionScene" }) } preload () { } create () {
        this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = `
            width: 220px;
            height: 50px;
            font-size: 20px;
            font-weight: bold;
            padding: 5px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            color: #000000;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        `; this.add.text(774, 180, "Bienvenido a Conquista Matem√°tica", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 240, "¬øQue desea hacer?", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5); const i = this.add.dom(774, 350).createFromHTML(`<button style="${e}">Jugar</button>`); i.addListener("click"), i.on("click", function () { this.scene.start("pantalla_inicio") }, this); const a = this.add.dom(774, 420).createFromHTML(`<button style="${e}">Agregar Preguntas</button>`); a.addListener("click"), a.on("click", function () { this.scene.start("agregarScene") }, this); const s = this.add.dom(774, 490).createFromHTML(`<button style="${e}">Ver Preguntas</button>`); s.addListener("click"), s.on("click", function () { this.scene.start("ver_preguntas") }, this); const o = this.add.dom(774, 560).createFromHTML(`<button style="${e}">Cerrar Sesi√≥n</button>`); o.addListener("click"), o.on("click", function () { localStorage.clear(), this.scene.start("LoginScene") }, this)
    }
} const Yt = "/assets/edit-27c8725e.png", yt = "/assets/cleare-6490d46e.png"; class Ts extends b.Scene { constructor() { super({ key: "ver_preguntas" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(1), this.add.text(774, 100, "Preguntas", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/vendedor-preguntas`).then(i => i.json()).then(i => { const a = this.add.dom(60, 125).createElement("div"), s = document.createElement("table"), o = ["Contexto", "Pregunta", "Qu√©", "Qui√©n", "Operaciones", "Resultado", " ", " "], r = document.createElement("tr"); o.forEach(A => { const n = document.createElement("th"); n.textContent = A, r.appendChild(n) }), s.appendChild(r), i.data.forEach(A => { const n = A.attributes, d = document.createElement("tr");[n.contexto, n.pregunta, n.que, n.quien, n.operaciones, n.resultado].forEach(x => { const v = document.createElement("td"); v.textContent = x, d.appendChild(v) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = Yt, m.style.width = "50px", m.style.height = "50px", m.style.cursor = "pointer", m.onclick = () => { console.log("Hiciste clic en la primera imagen de la fila con ID:", A.id); const x = JSON.stringify(A), v = localStorage.setItem("itemModificar", x); console.log(v), this.scene.start("modificarScene") }, _.appendChild(m), d.appendChild(_); const B = document.createElement("td"), g = document.createElement("img"); g.src = yt, g.style.width = "70px", g.style.height = "70px", g.style.cursor = "pointer", g.onclick = () => { const x = A.id; fetch(`${Y}/api/vendedor-preguntas/${x}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(v => { v.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${x}`), this.scene.start("ver_preguntas")) : console.error(`No se pudo eliminar el elemento con ID: ${x}`) }).catch(v => { console.error("Error al intentar eliminar:", v) }) }, B.appendChild(g), d.appendChild(B), s.appendChild(d) }), a.node.style.marginTop = "20px", a.node.style.fontFamily = "Arial, sans-serif", a.node.style.maxWidth = "1450px", a.node.style.height = "500px", a.node.style.overflowY = "auto"; const h = s.getElementsByTagName("td"); Array.from(h).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.maxWidth = "500px", A.style.backgroundColor = "rgba(255, 255, 255, 0.5)" }); const y = s.getElementsByTagName("th"); Array.from(y).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.backgroundColor = "#f2f2f2", A.style.fontStyle = "bold" }), a.node.appendChild(s) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 700).createFromHTML(`<button style="${N}">Volver</button>`); e.addListener("click"), e.on("click", function () { localStorage.getItem("userTipo") === "admin" ? this.scene.start("Eleccion_Admin") : this.scene.start("EleccionScene") }, this) } } class zs extends b.Scene {
    constructor() { super({ key: "Eleccion_Admin" }) } preload () { } create () {
        this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = `
            width: 220px;
            height: 60px;
            font-size: 20px;
            font-weight: bold;
            padding: 5px;
            background-color: #fff;
            border: 2px solid #000;
            border-radius: 6px;
            color: #000000;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        `; this.add.text(774, 180, "Bienvenido a Conquista Matem√°tica", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 240, "¬øQue desea hacer?", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5); const i = this.add.dom(774, 350).createFromHTML(`<button style="${e}">Jugar</button>`); i.addListener("click"), i.on("click", function () { this.scene.start("pantalla_inicio") }, this); const a = this.add.dom(620, 427.5).createFromHTML(`<button style="${e}">Agregar Preguntas</button>`); a.addListener("click"), a.on("click", function () { this.scene.start("agregarScene") }, this); const s = this.add.dom(905, 427.5).createFromHTML(`<button style="${e}">Ver Preguntas</button>`); s.addListener("click"), s.on("click", function () { this.scene.start("ver_preguntas") }, this); const o = this.add.dom(620, 505).createFromHTML(`<button style="${e}">Agregar QTE</button>`); o.addListener("click"), o.on("click", function () { this.scene.start("agregarQTEScene") }, this); const r = this.add.dom(905, 505).createFromHTML(`<button style="${e}">Ver QTE</button>`); r.addListener("click"), r.on("click", function () { this.scene.start("ver_QTE") }, this); const h = this.add.dom(620, 582.5).createFromHTML(`<button style="${e}">Posiciones Guardadas</button>`); h.addListener("click"), h.on("click", function () { this.scene.start("ver_posicion") }, this); const y = this.add.dom(905, 582.5).createFromHTML(`<button style="${e}">Ver Usuarios</button>`); y.addListener("click"), y.on("click", function () { this.scene.start("ver_usuarios") }, this); const A = this.add.dom(774, 660).createFromHTML(`<button style="${e}">Cerrar Sesi√≥n</button>`); A.addListener("click"), A.on("click", function () { localStorage.clear(), this.scene.start("LoginScene") }, this)
    }
} class Os extends b.Scene { constructor() { super({ key: "ver_usuarios" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756), this.add.text(774, 180, "Usuarios", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/usuarios`).then(i => i.json()).then(i => { const a = this.add.dom(500, 210).createElement("div"), s = document.createElement("table"), o = ["ID", "Nombre", "Contrase√±a", "Tipo de usuario", " ", " "], r = document.createElement("tr"); o.forEach(A => { const n = document.createElement("th"); n.textContent = A, r.appendChild(n) }), s.appendChild(r), i.data.forEach(A => { const n = A.attributes, d = document.createElement("tr");[A.id, n.nombre, n.contrasena, n.tipo].forEach(B => { const g = document.createElement("td"); g.textContent = B, d.appendChild(g) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = yt, m.style.width = "70px", m.style.height = "70px", m.style.cursor = "pointer", m.onclick = () => { const B = A.id; fetch(`${Y}/api/usuarios/${B}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(g => { g.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${B}`), this.scene.start("ver_usuarios")) : console.error(`No se pudo eliminar el elemento con ID: ${B}`) }).catch(g => { console.error("Error al intentar eliminar:", g) }) }, _.appendChild(m), d.appendChild(_), s.appendChild(d) }), a.node.style.marginTop = "20px", a.node.style.fontFamily = "Arial, sans-serif", a.node.style.maxWidth = "1450px", a.node.style.height = "450px", a.node.style.overflowY = "auto"; const h = s.getElementsByTagName("td"); Array.from(h).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.maxWidth = "500px", A.style.backgroundColor = "rgba(255, 255, 255, 0.5)" }); const y = s.getElementsByTagName("th"); Array.from(y).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.backgroundColor = "#f2f2f2", A.style.fontStyle = "bold" }), a.node.appendChild(s) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 700).createFromHTML(`<button style="${N}">Volver</button>`); e.addListener("click"), e.on("click", function () { localStorage.getItem("userTipo") === "admin" ? this.scene.start("Eleccion_Admin") : this.scene.start("EleccionScene") }, this) } } class Ys extends b.Scene { constructor() { super({ key: "instrucciones_preguntas" }) } preload () { } create () { let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(e.x, e.y - 30, "_fondo_instrucciones_preguntas").setOrigin(.5).setScale(.956); const i = this.add.dom(774, 750).createFromHTML(`<button style="${N}">Volver</button>`); i.addListener("click"), i.on("click", function () { localStorage.getItem("itemModificar") ? this.scene.start("modificarScene") : this.scene.start("agregarScene") }, this) } } class Ns extends b.Scene { constructor() { super({ key: "modificarScene" }) } preload () { this.load.image("imagenInfo", Ci) } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756); const e = localStorage.getItem("itemModificar"), i = JSON.parse(e), a = this.add.image(1250, 150, "imagenInfo"); a.setInteractive(), a.setDisplaySize(80, 80), a.on("pointerdown", () => { this.scene.start("instrucciones_preguntas") }), this.add.text(1250, 200, "C√≥mo modificar preguntas", { fontSize: "15px", fontStyle: "bold", color: "#000000", wordWrap: { width: 150, useAdvancedWrap: !0 } }).setOrigin(.5), this.add.text(774, 160, "Para modificar", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 190, "Introduzca sus correcciones", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(280, 260, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(630, 330).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${L}">${i.attributes.contexto}</textarea>`), this.add.text(870, 260, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1160, 290).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${L}">${i.attributes.pregunta}</textarea>`), this.add.text(255, 432, "¬øA qui√©n se refiere?:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 444).createFromHTML(`<input id="quien" type="text" value=${i.attributes.quien} placeholder="A qui√©n se refiere el contexto : Juan" style="${F}">`), this.add.text(255, 488, "¬øA qu√© se refiere?:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 500).createFromHTML(`<input id="que" type="text" value=${i.attributes.que} placeholder="A qu√© se refiere el contexto : Bomba" style="${F}">`), this.add.text(250, 570, "¬øQu√© operaci√≥n necesita seguir?:", { fontSize: "25px", fontStyle: "bold", wordWrap: { width: 260, useAdvancedWrap: !0 }, color: "#000000" }), this.add.dom(700, 600).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${L}">${i.attributes.operaciones}</textarea>`), this.add.text(950, 400, "¬øCu√°l es la respuesta?:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1100, 560).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${L}">${i.attributes.resultado}</textarea>`); const s = this.add.dom(774, 690).createFromHTML(`<button style="${N}">Modificar</button>`); s.addListener("click"), s.on("click", function () { const r = document.querySelector("#contexto"), h = document.querySelector("#pregunta"), y = document.querySelector("#que"), A = document.querySelector("#quien"), n = document.querySelector("#operaciones"), d = document.querySelector("#respuesta"), C = r.value, _ = h.value, m = y.value, B = A.value, g = n.value, x = d.value; if (C.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "" || g.trim() === "" || x.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (ot(m) === !1 || ot(B) === !1 || ot(g) === !1 || ot(x) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const v = { data: { pregunta: _, que: m, quien: B, operaciones: g, resultado: x, contexto: C } }; fetch(`${Y}/api/vendedor-preguntas/${i.id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(v) }).then(me => { if (me.ok) return me.json(); throw new Error("Error al actualizar el recurso") }).then(me => { console.log("Registro exitoso:", me), localStorage.removeItem("itemModificar"), this.scene.start("ver_preguntas") }).catch(me => { console.error("Error al actualizar el recurso:", me) }) }, this); const o = this.add.dom(320, 150).createFromHTML(`<button style="${N}">Volver</button>`); o.addListener("click"), o.on("click", function () { localStorage.removeItem("itemModificar"), this.scene.start("ver_preguntas") }, this) } } function ot (t) { return t.split(",").length - 1 !== 3 ? !1 : (console.log("N√∫mero correcto de comas."), !0) } class Us extends b.Scene { constructor() { super({ key: "ver_posicion" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756), this.add.text(774, 180, "Posiciones Guardadas", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/posicions`).then(i => i.json()).then(i => { const a = this.add.dom(500, 225).createElement("div"), s = document.createElement("table"), o = ["Evento", "QTE", "Jugador", "Posicion X", "Posicion Y", " ", " "], r = document.createElement("tr"); o.forEach(A => { const n = document.createElement("th"); n.textContent = A, r.appendChild(n) }), s.appendChild(r), i.data.forEach(A => { const n = A.attributes, d = document.createElement("tr");[n.evento, n.QTE, n.jugador, n.posicionX, n.posicionY].forEach(x => { const v = document.createElement("td"); v.textContent = x, d.appendChild(v) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = Yt, m.style.width = "50px", m.style.height = "50px", m.style.cursor = "pointer", m.onclick = () => { const x = JSON.stringify(A); localStorage.setItem("itemModificarPosicion", x), this.scene.start("modificarPosicionScene") }, _.appendChild(m), d.appendChild(_); const B = document.createElement("td"), g = document.createElement("img"); g.src = yt, g.style.width = "70px", g.style.height = "70px", g.style.cursor = "pointer", g.onclick = () => { const x = A.id; fetch(`${Y}/api/posicions/${x}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(v => { v.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${x}`), this.scene.start("ver_posicion")) : console.error(`No se pudo eliminar el elemento con ID: ${x}`) }).catch(v => { console.error("Error al intentar eliminar:", v) }) }, B.appendChild(g), d.appendChild(B), s.appendChild(d) }), a.node.style.marginTop = "20px", a.node.style.fontFamily = "Arial, sans-serif", a.node.style.maxWidth = "1400px", a.node.style.height = "400px", a.node.style.overflowY = "auto"; const h = s.getElementsByTagName("td"); Array.from(h).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.maxWidth = "500px", A.style.backgroundColor = "rgba(255, 255, 255, 0.5)" }); const y = s.getElementsByTagName("th"); Array.from(y).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.backgroundColor = "#f2f2f2", A.style.fontStyle = "bold" }), a.node.appendChild(s) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 680).createFromHTML(`<button style="${N}">Volver</button>`); e.addListener("click"), e.on("click", function () { this.scene.start("Eleccion_Admin") }, this) } } class Js extends b.Scene { constructor() { super({ key: "modificarPosicionScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = localStorage.getItem("itemModificarPosicion"), i = JSON.parse(e); this.add.text(774, 100, "Para modificar ", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus correcciones", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(400, 365, "Evento:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 380).createFromHTML(`<input id="evento" type="text" value=${i.attributes.evento} placeholder="Evento" style="${F}">`), this.add.text(400, 410, "QTE:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 430).createFromHTML(`<input id="QTE" type="text" value=${i.attributes.QTE} placeholder="QTE" style="${F}">`), this.add.text(400, 465, "Jugador:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 480).createFromHTML(`<input id="jugador"  placeholder="Jugador" value=${i.attributes.jugador} style="${F}"></input>`), this.add.text(985, 355, "Posici√≥n en X:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 400).createFromHTML(`<input id="posicionX" type="number" step="any" value=${i.attributes.posicionX} placeholder="Posici√≥n en x" style="${F}"></input>`), this.add.text(985, 435, "Posici√≥n en Y:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 480).createFromHTML(`<input id="posicionY" type="number" step="any" value=${i.attributes.posicionY} placeholder="Posici√≥n en y" style="${F}"></input>`); const a = this.add.dom(774, 650).createFromHTML(`<button style="${N}">Modificar</button>`); a.addListener("click"), a.on("click", function () { const o = document.querySelector("#evento"), r = document.querySelector("#QTE"), h = document.querySelector("#jugador"), y = document.querySelector("#posicionX"), A = document.querySelector("#posicionY"), n = o.value, d = r.value, C = h.value, _ = y.value, m = A.value; if (n.trim() === "" || d.trim() === "" || C.trim() === "" || _.trim() === "" || m.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } const B = { data: { evento: n, QTE: d, jugador: C, posicionX: _, posicionY: m } }; fetch(`${Y}/api/posicions/${i.id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(B) }).then(g => { if (g.ok) return g.json(); throw new Error("Error al actualizar el recurso") }).then(g => { console.log("Registro exitoso:", g), localStorage.removeItem("itemModificarPosicion"), this.scene.start("ver_posicion") }).catch(g => { console.error("Error al actualizar el recurso:", g) }) }, this); const s = this.add.dom(774, 700).createFromHTML(`<button style="${N}">Volver</button>`); s.addListener("click"), s.on("click", function () { localStorage.removeItem("itemModificarPosicion"), this.scene.start("ver_posicion") }, this) } } class Ps extends b.Scene { constructor() { super({ key: "ver_QTE" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(1), this.add.text(774, 100, "QTEs", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), fetch(`${Y}/api/preguntas?pagination[page]=1&pagination[pageSize]=80`).then(i => i.json()).then(i => { const a = this.add.dom(20, 125).createElement("div"), s = document.createElement("table"), o = ["QTE", "Contexto", "Pregunta", "Qu√©", "Qui√©n", "Operaciones", "Resultado", " ", " "], r = document.createElement("tr"); o.forEach(A => { const n = document.createElement("th"); n.textContent = A, r.appendChild(n) }), s.appendChild(r), i.data.forEach(A => { const n = A.attributes, d = document.createElement("tr");[n.QTE, n.contexto, n.pregunta, n.que, n.quien, n.operaciones, n.respuesta].forEach(x => { const v = document.createElement("td"); v.textContent = x, d.appendChild(v) }); const _ = document.createElement("td"), m = document.createElement("img"); m.src = Yt, m.style.width = "50px", m.style.height = "50px", m.style.cursor = "pointer", m.onclick = () => { const x = JSON.stringify(A); localStorage.setItem("itemModificarQTE", x), this.scene.start("modificarQTEScene") }, _.appendChild(m), d.appendChild(_); const B = document.createElement("td"), g = document.createElement("img"); g.src = yt, g.style.width = "70px", g.style.height = "70px", g.style.cursor = "pointer", g.onclick = () => { const x = A.id; fetch(`${Y}/api/preguntas/${x}`, { method: "DELETE", headers: { "Content-Type": "application/json" } }).then(v => { v.ok ? (console.log(`Se elimin√≥ el elemento con ID: ${x}`), this.scene.start("ver_QTE")) : console.error(`No se pudo eliminar el elemento con ID: ${x}`) }).catch(v => { console.error("Error al intentar eliminar:", v) }) }, B.appendChild(g), d.appendChild(B), s.appendChild(d) }), a.node.style.marginTop = "20px", a.node.style.fontFamily = "Arial, sans-serif", a.node.style.maxWidth = "1525px", a.node.style.height = "500px", a.node.style.overflowY = "auto"; const h = s.getElementsByTagName("td"); Array.from(h).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.maxWidth = "200px", A.style.backgroundColor = "rgba(255, 255, 255, 0.5)", A.style.overflow = "auto" }); const y = s.getElementsByTagName("th"); Array.from(y).forEach(A => { A.style.border = "1px solid #dddddd", A.style.padding = "8px", A.style.backgroundColor = "#f2f2f2", A.style.fontStyle = "bold" }), a.node.appendChild(s) }).catch(i => { console.error("Error al obtener los datos:", i) }); const e = this.add.dom(774, 700).createFromHTML(`<button style="${N}">Volver</button>`); e.addListener("click"), e.on("click", function () { this.scene.start("Eleccion_Admin") }, this) } } class Fs extends b.Scene { constructor() { super({ key: "agregarQTEScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756), this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_formularios").setOrigin(.5).setScale(.756), this.add.text(774, 160, "Agregar m√°s preguntas a los QTE", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 190, "Introduzca los datos para agregar m√°s preguntas", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(900, 650, "QTE:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1120, 660).createFromHTML(`<input id="QTE" placeholder="QTE-1" style="${F}"></input>`), this.add.text(280, 260, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(630, 330).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${Ii}"></textarea>`), this.add.text(870, 260, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1160, 290).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${L}"></textarea>`), this.add.text(255, 432, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 444).createFromHTML(`<input id="quien" type="text" placeholder="A qui√©n se refiere el contexto : Juan" style="${F}">`), this.add.text(255, 488, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(700, 500).createFromHTML(`<input id="que" type="text" placeholder="A qu√© se refiere el contexto : Bomba" style="${F}">`), this.add.text(250, 570, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", wordWrap: { width: 260, useAdvancedWrap: !0 }, fontStyle: "bold", color: "#000000" }), this.add.dom(700, 600).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${L}"></textarea>`), this.add.text(950, 400, "Cu√°l es la respuesta al problema:", { fontSize: "25px", wordWrap: { width: 350, useAdvancedWrap: !0 }, fontStyle: "bold", color: "#000000" }), this.add.dom(1100, 560).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${L}"></textarea>`); const e = this.add.dom(774, 690).createFromHTML(`<button style="${N}">Agregar</button>`); e.addListener("click"), e.on("click", function () { const a = document.querySelector("#QTE"), s = document.querySelector("#contexto"), o = document.querySelector("#pregunta"), r = document.querySelector("#que"), h = document.querySelector("#quien"), y = document.querySelector("#operaciones"), A = document.querySelector("#respuesta"), n = a.value, d = s.value, C = o.value, _ = r.value, m = h.value, B = y.value, g = A.value; if (n.trim() === "" || d.trim() === "" || C.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "" || g.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (rt(_) === !1 || rt(m) === !1 || rt(B) === !1 || rt(g) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const x = { data: { QTE: n, contexto: d, pregunta: C, que: _, quien: m, operaciones: B, respuesta: g } }; fetch(`${Y}/api/preguntas`, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(x) }).then(v => { if (v.ok) return v.json(); throw new Error("Error en el registro") }).then(v => { console.log("Registro exitoso:", v), this.scene.start("Eleccion_Admin") }).catch(v => { console.error("Error al registrar usuario:", v) }) }, this); const i = this.add.dom(320, 150).createFromHTML(`<button style="${N}">Volver</button>`); i.addListener("click"), i.on("click", function () { this.scene.start("Eleccion_Admin") }, this) } } function rt (t) { return t.split(",").length - 1 === 3 } class Gs extends b.Scene { constructor() { super({ key: "modificarQTEScene" }) } preload () { } create () { this.add.image(this.game.canvas.width / 2, this.game.canvas.height / 2, "_fondo_basta_mate").setOrigin(.5).setScale(.756); const e = localStorage.getItem("itemModificarQTE"), i = JSON.parse(e); this.add.text(774, 100, "Para modificar ", { fontSize: "40px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(774, 140, "Introduzca sus correcciones", { fontSize: "25px", fontStyle: "bold", color: "#000000" }).setOrigin(.5), this.add.text(80, 185, "QTE:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(204, 230).createFromHTML(`<input id="QTE" value=${i.attributes.QTE}  placeholder="QTE-1" style="${F}"></input>`), this.add.text(380, 185, "Contexto:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 230).createFromHTML(`<textarea id="contexto" placeholder="Juan necesita hacer una bomba..." style="${L}">${i.attributes.contexto}</textarea>`), this.add.text(850, 185, "Pregunta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 230).createFromHTML(`<textarea id="pregunta" placeholder="¬øCu√°nto es 7 - 2?" style="${L}">${i.attributes.pregunta}</textarea>`), this.add.text(230, 365, "A qui√©n se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 380).createFromHTML(`<input id="quien" type="text" value=${i.attributes.quien} placeholder="A qui√©n se refiere el contexto : Juan" style="${F}">`), this.add.text(255, 410, "A qu√© se refiere:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(675, 430).createFromHTML(`<input id="que" type="text" value=${i.attributes.que} placeholder="A qu√© se refiere el contexto : Bomba" style="${F}">`), this.add.text(65, 465, "Qu√© operaci√≥n necesita seguir:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(624, 510).createFromHTML(`<textarea id="operaciones" placeholder="Qu√© operaci√≥n realizas : Restar" style="${L}">${i.attributes.operaciones}</textarea>`), this.add.text(985, 365, "Cu√°l es la respuesta:", { fontSize: "25px", fontStyle: "bold", color: "#000000" }), this.add.dom(1095, 450).createFromHTML(`<textarea id="respuesta" placeholder="La respuesta a tu pregunta : 5" style="${L}">${i.attributes.respuesta}</textarea>`); const a = this.add.dom(774, 650).createFromHTML(`<button style="${N}">Modificar</button>`); a.addListener("click"), a.on("click", function () { const o = document.querySelector("#QTE"), r = document.querySelector("#contexto"), h = document.querySelector("#pregunta"), y = document.querySelector("#que"), A = document.querySelector("#quien"), n = document.querySelector("#operaciones"), d = document.querySelector("#respuesta"), C = o.value, _ = r.value, m = h.value, B = y.value, g = A.value, x = n.value, v = d.value; if (C.trim() === "" || _.trim() === "" || m.trim() === "" || B.trim() === "" || g.trim() === "" || x.trim() === "" || v.trim() === "") { alert("Por favor, ingrese datos en los campos que faltan."); return } if (nt(B) === !1 || nt(g) === !1 || nt(x) === !1 || nt(v) === !1) { alert('El n√∫mero de comas es incorrecto. Deben ser tres comas (",") en la cadena de Qui√©n, Qu√©, Operaci√≥n y Respuesta.'); return } const me = { data: { QTE: C, contexto: _, pregunta: m, que: B, quien: g, operaciones: x, respuesta: v } }; fetch(`${Y}/api/preguntas/${i.id}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(me) }).then(Se => { if (Se.ok) return Se.json(); throw new Error("Error al actualizar el recurso") }).then(Se => { console.log("Registro exitoso:", Se), localStorage.removeItem("itemModificarQTE"), this.scene.start("ver_QTE") }).catch(Se => { console.error("Error al actualizar el recurso:", Se) }) }, this); const s = this.add.dom(774, 700).createFromHTML(`<button style="${N}">Volver</button>`); s.addListener("click"), s.on("click", function () { localStorage.removeItem("itemModificar"), this.scene.start("ver_QTE") }, this) } } function nt (t) { return t.split(",").length - 1 === 3 } let Lt; class Xs extends b.Scene { constructor() { super({ key: "area_02" }) } init (e) { e && (Lt = e.entrada) } preload () { } create () { console.log("area 02"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_02").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Lt, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_03", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), E(this, this.player, "area_33", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.grupo1 = S(this, "_arbol_7", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * 1.5, cellWidth: 350, escalaElemento: .75, sizeWidth: 450, sizeHeight: 100, origenX: .65, origenY: 1.1 }), this.grupo2 = S(this, "_arbol_7", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * .2, cellWidth: 350, escalaElemento: .75, sizeWidth: 50, sizeHeight: 60, origenX: .65, origenY: 1.1 }), this.grupo1.setDepth(3), this.grupo2.setDepth(1), this.r2 = this.add.rectangle(e.x, e.y * .3, e.x * 2, e.y * .2), this.physics.world.enable([this.grupo1, this.grupo2, this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 248 ? (this.player.setDepth(2), this.grupo2.setDepth(1)) : (this.player.setDepth(1), this.grupo2.setDepth(2)) } } let Kt; class Hs extends b.Scene { constructor() { super({ key: "area_03" }) } init (e) { e && (Kt = e.entrada) } preload () { } create () { console.log("area 03"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_03").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Kt, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_04", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), E(this, this.player, "area_02", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.grupo1 = S(this, "_arbol_6", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * 1.5, cellWidth: 350, escalaElemento: .75, sizeWidth: 450, sizeHeight: 100, origenX: .65, origenY: 1.1 }), this.grupo2 = S(this, "_arbol_6", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * .2, cellWidth: 350, escalaElemento: .75, sizeWidth: 50, sizeHeight: 60, origenX: .65, origenY: 1.1 }), this.grupo1.setDepth(3), this.grupo2.setDepth(1), this.r2 = this.add.rectangle(e.x, e.y * .3, e.x * 2, e.y * .2), this.physics.world.enable([this.grupo1, this.grupo2, this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let qt; class Ls extends b.Scene { constructor() { super({ key: "area_04" }) } init (e) { e && (qt = e.entrada) } preload () { } create () { console.log("area 04"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_04").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", qt, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_32", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "camino" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), E(this, this.player, "area_05", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), E(this, this.player, "area_03", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.grupo1 = S(this, "_arbol_5", { width: 4, repeticiones: 4, posicionX: e.x * .15, posicionY: e.y * 1.5, cellWidth: 350, escalaElemento: .75, sizeWidth: 450, sizeHeight: 100, origenX: .65, origenY: 1.1 }), this.grupo2 = S(this, "_arbol_5", { width: 4, repeticiones: 4, posicionX: e.x * .05, posicionY: e.y * .2, cellWidth: 400, escalaElemento: .75, sizeWidth: 50, sizeHeight: 60, origenX: .65, origenY: 1.1 }), this.grupo1.setDepth(3), this.grupo2.setDepth(1), this.r1 = this.add.rectangle(e.x * .44, 0, e.x * .865, e.y * .19), this.r2 = this.add.rectangle(e.x * 1.56, 0, e.x * .865, e.y * .19), this.physics.world.enable([this.grupo1, this.grupo2, this.r2, this.r1]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Zt; class Ks extends b.Scene { constructor() { super({ key: "area_05" }) } init (e) { e && (Zt = e.entrada) } preload () { } create () { console.log("area 05"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_05").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Zt, { escalaPersonaje: 1.25, esteY: e.y * 1.55 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_06", { posicionX: e.x * 2.015, posicionY: e.y * 1.55, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), E(this, this.player, "area_04", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.grupo1 = S(this, "_arbol_2", { width: 2, repeticiones: 2, posicionX: e.x * .05, posicionY: e.y * .08, cellWidth: 350, escalaElemento: .8, sizeWidth: 50, sizeHeight: 60, origenX: .6, origenY: 1.07 }), this.grupo2 = S(this, "_arbol_2", { width: 2, repeticiones: 2, posicionX: e.x * 1.03, posicionY: e.y * .6, cellWidth: 350, escalaElemento: .8, sizeWidth: 50, sizeHeight: 60, origenX: .6, origenY: 1.07 }), this.grupo1.setDepth(1), this.grupo2.setDepth(1), this.add.image(e.x * .2, e.y * 1.5, "_arbol_5").setScale(.8).setDepth(3), this.add.image(e.x * .6, e.y * 1.7, "_arbol_5").setScale(.8).setDepth(3), this.r1 = this.add.rectangle(e.x, e.y * 1.98, e.x * 2, e.y * .2), this.r2 = this.add.rectangle(e.x, e.y * .3, e.x * 2, e.y * .2), this.physics.world.enable([this.grupo1, this.grupo2, this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.grupo1, this.grupo2, this.r1, this.r2], null) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Vt; class qs extends b.Scene { constructor() { super({ key: "area_06" }) } init (e) { e && (Vt = e.entrada) } preload () { } create () { console.log("area 06"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_06").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Vt, { escalaPersonaje: 1.25, oesteY: e.y * 1.55 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_08", { posicionX: e.x * .95, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), E(this, this.player, "area_05", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.55, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.add.image(e.x * .53, e.y * .51, "_casa_pueblo").setScale(.82).setDepth(0), this.add.image(e.x * 1.48, e.y * .52, "_casa_pueblo").setScale(.82).setDepth(0), this.add.image(e.x * 1, e.y * 1, "_barda_1").setScale(.82).setDepth(0), this.r2 = this.add.rectangle(e.x, e.y * 1.18, e.x * 2, e.y * .2), this.physics.world.enable([this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Wt; class Zs extends b.Scene { constructor() { super({ key: "area_08" }) } init (e) { e && (Wt = e.entrada) } preload () { } create () { console.log("area 08"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_08").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Wt, { escalaPersonaje: 1.25 }), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_06", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_14", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.r1 = this.add.rectangle(e.x * .378, e.y * .8, e.x * .73, e.y * 1.55), this.r2 = this.add.rectangle(e.x * 1.622, e.y * .8, e.x * .73, e.y * 1.55), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let $t; class Vs extends b.Scene { constructor() { super({ key: "area_13" }) } init (e) { e && ($t = e.entrada) } preload () { } create () { console.log("area 13"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_13").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", $t, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_16", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), E(this, this.player, "area_14", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), this.CasaPueblo = this.physics.add.image(e.x * .41, e.y * .51, "_casa_pueblo").setScale(.82).setDepth(0).setImmovable(), this.arbol1 = this.physics.add.image(e.x * .08, e.y * 1, "_arbol_5").setScale(.82).setDepth(1).setImmovable(), this.arbol2 = this.physics.add.image(e.x * 1.7, e.y * 1.5, "_arbol_5").setScale(.82).setDepth(1).setImmovable(), this.cuveta1 = this.physics.add.image(e.x * 1.4, e.y * 1.7, "_cubeta_2").setScale(.82).setDepth(1).setImmovable(), this.pozo1 = this.physics.add.image(e.x * 1.25, e.y * 1.65, "_pozo_1").setScale(.82).setDepth(1).setImmovable(), this.lavadero1 = this.physics.add.image(e.x * .25, e.y * 1.8, "_lavadero_1").setScale(.82).setDepth(1).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .25), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .75), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .25), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .75), this.pozo1.setSize(this.pozo1.width, this.pozo1.height * .45), this.pozo1.setOffset(0, this.pozo1.height * .35), this.r2 = this.add.rectangle(e.x * 1.225, e.y * .4, e.x, e.y * .8), this.physics.world.enable([this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.CasaPueblo, this.arbol1, this.lavadero1, this.cuveta1, this.arbol2, this.pozo1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 696 ? (this.pozo1.setDepth(0), this.cuveta1.setDepth(0)) : (this.pozo1.setDepth(2), this.cuveta1.setDepth(2)) } } let ei; class Ws extends b.Scene { constructor() { super({ key: "area_14" }) } init (e) { e && (ei = e.entrada) } preload () { } create () { console.log("area 14"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_14").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ei, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_08", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_17", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), E(this, this.player, "area_13", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbol1 = this.physics.add.image(e.x * .6, e.y * .2, "_arbol_5").setScale(.82).setDepth(0).setImmovable(), this.arbol2 = this.physics.add.image(e.x * .35, e.y * 1.44, "_arbol_5").setScale(.82).setDepth(2).setImmovable(), this.arbusto1 = this.physics.add.image(e.x * .2, e.y * .5, "_arbol_1").setScale(.82).setDepth(0).setImmovable(), this.arbusto2 = this.physics.add.image(e.x * .7, e.y * 1.65, "_arbol_1").setScale(.82).setDepth(0).setImmovable(), this.add.image(e.x * 1.27, e.y * .4, "_arbol_5").setScale(.82).setDepth(1), this.add.image(e.x * 1.4, e.y * 1.74, "_arbol_1").setScale(.82).setDepth(1), this.add.image(e.x * 1.8, e.y * 1.74, "_arbol_1").setScale(.82).setDepth(1), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbusto1.setSize(this.arbusto1.width, this.arbusto1.height * .5), this.arbusto1.setOffset(0, this.arbusto1.height * .5), this.arbusto2.setSize(this.arbusto2.width, this.arbusto2.height * .5), this.arbusto2.setOffset(0, this.arbusto2.height * .5), this.r2 = this.add.rectangle(e.x * 1.58, e.y, e.x * .75, e.y * 2), this.physics.world.enable([this.r2]), this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbusto1, this.arbusto2, this.r2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 287 ? (this.arbol1.setDepth(0), this.arbusto1.setDepth(0)) : (this.arbol1.setDepth(2), this.arbusto1.setDepth(2)), this.player.y > 748 ? this.arbusto2.setDepth(0) : this.arbusto2.setDepth(2) } } let ti; class $s extends b.Scene { constructor() { super({ key: "area_16" }) } init (e) { e && (ti = e.entrada) } preload () { } create () { console.log("area 16"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_16").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ti, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_13", { posicionX: e.x * 1.015, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_22", { posicionX: e.x * 1.015, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), E(this, this.player, "area_17", { posicionX: e.x * 2.015, posicionY: e.y, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), this.arbol1 = this.physics.add.image(e.x * 1.322, e.y * .145, "_arbol_5").setScale(.82).setDepth(2).setImmovable(), this.cuveta1 = this.physics.add.image(e.x * 1.37, e.y * .7, "_cubeta_2").setScale(.82).setDepth(2).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.r1 = this.add.rectangle(e.x * .425, e.y * .57, e.x * .85, e.y), this.r2 = this.add.rectangle(e.x * .46, e.y * 1.601, e.x * .85, e.y * .8), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2, this.arbol1, this.cuveta1]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 265 ? (this.arbol1.setDepth(0), this.cuveta1.setDepth(0)) : (this.arbol1.setDepth(2), this.cuveta1.setDepth(2)) } } let ii; class eA extends b.Scene { constructor() { super({ key: "area_17" }) } init (e) { e && (ii = e.entrada) } preload () { } create () { console.log("area 17"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_17").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ii, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_14", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_23", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), E(this, this.player, "area_16", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbol1 = this.physics.add.image(e.x * 1.65, e.y * 1.44, "_arbol_5").setScale(.82).setDepth(1).setImmovable(), this.arbol2 = this.physics.add.image(e.x * 1.343, e.y * .14, "_arbol_2").setScale(.9, .82).setDepth(1).setImmovable(), this.arbol3 = this.physics.add.image(e.x * 1.926, e.y * .137, "_arbol_2").setScale(.9, .82).setDepth(1).setImmovable(), this.caja = this.physics.add.image(e.x * 1.28, e.y * 1.74, "_caja_naranjas_1").setScale(.82).setDepth(1).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbol3.setSize(this.arbol3.width * .2, this.arbol3.height * .15), this.arbol3.setOffset(this.arbol3.width * .38, this.arbol3.height * .85), this.caja.setSize(this.caja.width, this.caja.height * .7), this.caja.setOffset(0, this.caja.height * .15), this.r1 = this.add.rectangle(e.x * .425, e.y * .32, e.x * .85, e.y * .7), this.r2 = this.add.rectangle(e.x * 1.625, e.y * .65, e.x * .485, e.y * .35), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbol3, this.caja, this.r1, this.r2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y > 295 ? (this.arbol2.setDepth(0), this.arbol3.setDepth(0)) : (this.arbol2.setDepth(2), this.arbol3.setDepth(2)), this.player.y < 600 ? this.caja.setDepth(2) : this.caja.setDepth(0) } } let ai; class tA extends b.Scene { constructor() { super({ key: "area_22" }) } init (e) { e && (ai = e.entrada) } preload () { } create () { console.log("area 22"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_22").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ai, { escalaPersonaje: 1.25 }), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_16", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_26", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.r1 = this.add.rectangle(e.x * .77, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.22, e.y, 100, e.y * 2), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let si; class iA extends b.Scene { constructor() { super({ key: "area_23" }) } init (e) { e && (si = e.entrada) } preload () { } create () { console.log("area 23"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_23").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", si, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_17", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_24", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), this.CasaPueblo = this.physics.add.image(e.x * 1.6, e.y * 0, "_casa_pueblo").setScale(.82).setDepth(0).setImmovable(), this.Maseta1 = this.physics.add.image(e.x * 1.34, e.y * .55, "_meceta_1").setScale(.82).setDepth(0).setImmovable(), this.Maseta2 = this.physics.add.image(e.x * 1.86, e.y * .55, "_meceta_1").setScale(.82).setDepth(0).setImmovable(), this.Maseta1.setSize(this.Maseta1.width, this.Maseta1.height * .8), this.Maseta1.setOffset(0, 0), this.Maseta2.setSize(this.Maseta2.width, this.Maseta2.height * .8), this.Maseta2.setOffset(0, 0), this.r1 = this.add.rectangle(e.x * .79, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.25, e.y * 1.4, e.x * 1.5, 100), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.CasaPueblo, this.Maseta1, this.Maseta2, this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let Ai; class aA extends b.Scene { constructor() { super({ key: "area_24" }) } init (e) { e && (Ai = e.entrada) } preload () { } create () { console.log("area 24"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_24").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Ai, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_31", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_28", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), E(this, this.player, "area_25", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "izq" } }), E(this, this.player, "area_23", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbolCentro = this.physics.add.image(e.x * 1, e.y * .92, "_arbol_centro").setScale(.82).setDepth(2).setImmovable(), this.arbolCentro.setSize(this.arbolCentro.width * .46, this.arbolCentro.height * .272), this.arbolCentro.setOffset(this.arbolCentro.width * .265, this.arbolCentro.height * .52), this.c1 = this.add.circle(e.x * .495, e.y * 1.08, 50), this.c2 = this.add.circle(e.x * 1.336, e.y * 1.08, 50), this.physics.world.enable([this.c1, this.c2]), this.c1.body.immovable = !0, this.c1.body.setCircle(115), this.c2.body.immovable = !0, this.c2.body.setCircle(115), this.physics.add.collider(this.player, [this.arbolCentro, this.c1, this.c2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 428 ? this.arbolCentro.setDepth(2) : this.arbolCentro.setDepth(0) } } let oi; class sA extends b.Scene { constructor() { super({ key: "area_25" }) } init (e) { e && (oi = e.entrada) } preload () { } create () { console.log("area 25"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_25").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", oi, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_24", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .25, valoresSiguienteEscena: { entrada: "der" } }), this.arbusto1 = this.physics.add.image(e.x * .4, e.y * .5, "_arbol_1").setScale(.82).setDepth(0).setImmovable(), this.arbusto2 = this.physics.add.image(e.x * .4, e.y * 1.6, "_arbol_1").setScale(.82).setDepth(2).setImmovable(), this.add.image(e.x * 1.85, e.y * 1.6, "_arbol_1").setScale(.82), this.add.image(e.x * 1.85, e.y * .25, "_arbol_1").setScale(.82), this.add.image(e.x * 1.2, e.y * 1.7, "_arbol_1").setScale(.82), this.add.image(e.x * 1.2, e.y * .15, "_arbol_1").setScale(.82), this.arbusto1.setSize(this.arbusto1.width, this.arbusto1.height * .5), this.arbusto1.setOffset(0, this.arbusto1.height * .5), this.arbusto2.setSize(this.arbusto2.width, this.arbusto2.height * .5), this.arbusto2.setOffset(0, this.arbusto2.height * .5), this.r2 = this.add.rectangle(e.x * 1.1, e.y, 100, e.y * 2), this.c1 = this.add.circle(e.x * .98, e.y * 1.05, 275), this.physics.world.enable([this.r2, this.c1]), this.r2.body.immovable = !0, this.c1.body.immovable = !0, this.c1.body.setCircle(275), this.physics.add.collider(this.player, [this.arbusto1, this.arbusto2, this.r2, this.c1]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 156 ? this.arbusto1.setDepth(2) : this.arbusto1.setDepth(0), this.player.y < 592 ? this.arbusto2.setDepth(2) : this.arbusto2.setDepth(0) } } let ri; class AA extends b.Scene { constructor() { super({ key: "area_26" }) } init (e) { e && (ri = e.entrada) } preload () { } create () { console.log("area 26"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_26").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ri, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_22", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_30", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.arbol1 = this.physics.add.image(e.x * .6, e.y * .4, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol2 = this.physics.add.image(e.x * 1.7, e.y * .2, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol3 = this.physics.add.image(e.x * 1.85, e.y * 1.2, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol4 = this.physics.add.image(e.x * .2, e.y * 1, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol5 = this.physics.add.image(e.x * 1.4, e.y * 1.45, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol6 = this.physics.add.image(e.x * .6, e.y * 1.45, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.letrero1 = this.physics.add.image(e.x * 1.34, e.y * .45, "_letrero_1").setScale(.55).setDepth(2).setImmovable(), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbol3.setSize(this.arbol3.width * .2, this.arbol3.height * .15), this.arbol3.setOffset(this.arbol3.width * .38, this.arbol3.height * .85), this.arbol4.setSize(this.arbol4.width * .2, this.arbol4.height * .15), this.arbol4.setOffset(this.arbol4.width * .38, this.arbol4.height * .85), this.arbol5.setSize(this.arbol5.width * .2, this.arbol5.height * .15), this.arbol5.setOffset(this.arbol5.width * .38, this.arbol5.height * .85), this.arbol6.setSize(this.arbol6.width * .2, this.arbol6.height * .15), this.arbol6.setOffset(this.arbol6.width * .38, this.arbol6.height * .85), this.letrero1.setSize(this.letrero1.width * .3, this.letrero1.height * .55), this.letrero1.setOffset(this.letrero1.width * .38, this.letrero1.height * .45), this.r1 = this.add.rectangle(e.x * .05, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.97, e.y, 100, e.y * 2), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbol3, this.arbol4, this.arbol5, this.arbol6, this.letrero1, this.r1, this.r2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 191 ? this.arbol2.setDepth(2) : this.arbol2.setDepth(0), this.player.y < 193 ? this.letrero1.setDepth(2) : this.letrero1.setDepth(0), this.player.y < 270 ? this.arbol1.setDepth(2) : this.arbol1.setDepth(0), this.player.y < 508 ? this.arbol4.setDepth(2) : this.arbol4.setDepth(0), this.player.y < 587 ? this.arbol3.setDepth(2) : this.arbol3.setDepth(0) } } let ni; class oA extends b.Scene { constructor() { super({ key: "area_28" }) } init (e) { e && (ni = e.entrada) } preload () { } create () { console.log("area 28"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_28").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", ni, { escalaPersonaje: 1.25 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_24", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), this.r1 = this.add.rectangle(e.x, e.y * .94, e.x * 2, 100), this.physics.world.enable(this.r1), this.r1.body.immovable = !0, this.physics.add.collider(this.player, this.r1) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let li; class rA extends b.Scene { constructor() { super({ key: "area_30" }) } init (e) { e && (li = e.entrada) } preload () { } create () { console.log("area 30"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_30").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", li, { escalaPersonaje: 1.25, surX: e.x * .28 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_26", { posicionX: e.x, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), E(this, this.player, "area_34", { posicionX: e.x * .28, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.arbusto1 = this.physics.add.image(e.x * .35, e.y * .45, "_arbol_8").setScale(.82).setDepth(2).setImmovable(), this.arbusto2 = this.physics.add.image(e.x * 1.15, e.y * 1.4, "_arbol_8").setScale(.82).setDepth(2).setImmovable(), this.arbusto3 = this.physics.add.image(e.x * 1.65, e.y * 1.05, "_arbol_8").setScale(.82).setDepth(2).setImmovable(), this.arbol1 = this.physics.add.image(e.x * .6, e.y * .1, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol2 = this.physics.add.image(e.x * .1, e.y * .5, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol3 = this.physics.add.image(e.x * 1.8, e.y * .2, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol4 = this.physics.add.image(e.x * 1.3, e.y * .7, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.arbol5 = this.physics.add.image(e.x * .8, e.y * 1.6, "_arbol_7").setScale(.82).setDepth(2).setImmovable(), this.add.image(e.x * 1.6, e.y * 1.9, "_arbol_7").setScale(.82).setDepth(2), this.arbol1.setSize(this.arbol1.width * .2, this.arbol1.height * .15), this.arbol1.setOffset(this.arbol1.width * .38, this.arbol1.height * .85), this.arbol2.setSize(this.arbol2.width * .2, this.arbol2.height * .15), this.arbol2.setOffset(this.arbol2.width * .38, this.arbol2.height * .85), this.arbol3.setSize(this.arbol3.width * .2, this.arbol3.height * .15), this.arbol3.setOffset(this.arbol3.width * .38, this.arbol3.height * .85), this.arbol4.setSize(this.arbol4.width * .2, this.arbol4.height * .15), this.arbol4.setOffset(this.arbol4.width * .38, this.arbol4.height * .85), this.arbol5.setSize(this.arbol5.width * .2, this.arbol5.height * .15), this.arbol5.setOffset(this.arbol5.width * .38, this.arbol5.height * .85), this.arbusto1.setSize(this.arbusto1.width, this.arbusto1.height * .5), this.arbusto1.setOffset(0, this.arbusto1.height * .5), this.arbusto2.setSize(this.arbusto2.width, this.arbusto2.height * .5), this.arbusto2.setOffset(0, this.arbusto2.height * .5), this.arbusto3.setSize(this.arbusto3.width, this.arbusto3.height * .5), this.arbusto3.setOffset(0, this.arbusto3.height * .5), this.r1 = this.add.rectangle(e.x * .05, e.y, 100, e.y * 2), this.r2 = this.add.rectangle(e.x * 1.97, e.y, 100, e.y * 2), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.arbol1, this.arbol2, this.arbol3, this.arbol4, this.arbol5, this.arbusto1, this.arbusto2, this.arbusto3, this.r1, this.r2]), this.input.keyboard.on("keydown", i => { i.key == "Enter" && console.log(this.player.y) }) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 151 ? (this.arbol1.setDepth(2), this.arbusto1.setDepth(2)) : (this.arbol1.setDepth(0), this.arbusto1.setDepth(0)), this.player.y < 191 ? this.arbol3.setDepth(2) : this.arbol3.setDepth(0), this.player.y < 310 ? this.arbol2.setDepth(2) : this.arbol2.setDepth(0), this.player.y < 376 ? this.arbusto3.setDepth(2) : this.arbusto3.setDepth(0), this.player.y < 389 ? this.arbol4.setDepth(2) : this.arbol4.setDepth(0), this.player.y < 611 ? this.arbusto2.setDepth(2) : this.arbusto2.setDepth(0) } } let hi; class nA extends b.Scene { constructor() { super({ key: "area_31" }) } init (e) { e && (hi = e.entrada) } preload () { } create () { console.log("area 31"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_31").setScale(.855, .785).setDepth(-1), this.add.image(e.x * .35, e.y * .6, "_arbol_2").setScale(.6).setDepth(-1), this.add.image(e.x * 1.65, e.y, "_arbol_2").setScale(.6).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", hi, { escalaPersonaje: 1.25 }), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_24", { posicionX: e.x, posicionY: e.y * 2.05, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "arriba" } }), this.r1 = this.add.rectangle(e.x * .48, e.y * 1.8, 200, 200), this.r2 = this.add.rectangle(e.x * 1.55, e.y * 1.8, 200, 200), this.r3 = this.add.rectangle(e.x * .69, e.y * 1.92, e.x * .4, 50), this.r4 = this.add.rectangle(e.x * 1.335, e.y * 1.92, e.x * .45, 50), this.r5 = this.add.rectangle(e.x * .69, e.y * 1.65, e.x * .4, 50), this.r6 = this.add.rectangle(e.x * 1.335, e.y * 1.65, e.x * .45, 50), this.entradaIglesia = this.add.rectangle(e.x, e.y * 1.62, e.x * .25, 50), this.physics.world.enable([this.r1, this.r2, this.r3, this.r4, this.r5, this.r6, this.entradaIglesia]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.r3.body.immovable = !0, this.r4.body.immovable = !0, this.r5.body.immovable = !0, this.r6.body.immovable = !0, this.entradaIglesia.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2, this.r3, this.r4, this.r5, this.r6]), this.physics.add.collider(this.player, this.entradaIglesia) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player) } } let vt = [], di = "", Qt = !1, f, ne, pe = { novia: void 0, filberto: void 0 }, St, lt = { acciones: { interactuar: void 0, pasarDialogo: void 0 } }, ht = !1, wt = !1; class lA extends b.Scene {
    constructor() { super({ key: "area_32" }) } init (e) { e && (di = e.entrada) } preload () { } create () {
        console.log("area 32"), lt.acciones.interactuar = this.input.keyboard.addKey("F"), lt.acciones.pasarDialogo = this.input.keyboard.addKey("SPACE"), pe.filberto = [`Filiberto Tun:

Buenos d√≠as, Juan, te traigo buenas noticias o tal vez no tan buenas para ti.`, `Juan Cupul:

Buenos d√≠as, Filiberto, que quieres decirme con eso.`, `Filiberto Tun:

El plan se llevar√° a cabo pronto, pero para tu mala suerte ser√° ma√±ana y se
decidi√≥ que cuidar√≠as de la bomba esta noche.`, `Juan Cupul:

¬°¬°En serio!! ... Pero ma√±ana es mi boda‚Ä¶ `, `Filiberto Tun:

Ya lo se ... Lo siento `, `Juan Cupul:

No te preocupes entiendo la importancia de esto y por eso lo hare, solo necesito
explicarle esto a mi novia.`, `Filiberto Tun:

Entiendo, me adelantar√©. Te veo en la milpa del Oeste.`, `Juan Cupul:

Ah√≠ estar√©.`], pe.filberto = [`Filiberto Tun:

Buenos d√≠as, Juan, te traigo buenas noticias o tal vez no tan buenas para ti.`], pe.novia = [`${ci(40)}Juan le explica a Dolores lo que sucede...`, `Mar√≠a Dolores:

Ya veo, entonces eso es lo que paso.`, `Juan Cupul:

Lo siento, ma√±ana se supone que ser√≠a importante.`, `Mar√≠a Dolores:

No te preocupes, se lo importante que es esto, te estar√© esperando aqu√≠.`, `Juan Cupul:

¬°¬°Gracias!!`, `Filiberto Tun:

JeJe cuando te sientas cansado puedes volver aqu√≠, te dir√© lo que necesites.`, `Juan Cupul:

Nos vemos luego. Regresare.`, `Juan Cupul:

Te lo prometo.`, `Mar√≠a Dolores:

Nos vemos.`, `${ci(40)}Ve a la casa de la milpa que est√° al Oeste`], St = pe.filberto.length, this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), f = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }, this.add.image(f.x, f.y, "_fondo_area_32").setScale(.8, .735).setDepth(-1), this.arbolesGrupo1 = S(this, "_arbol_1", { repeticiones: 8, width: 8, cellWidth: 190, cellHeight: 120, posicionX: 15, posicionY: 10, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo2 = S(this, "_arbol_1", { repeticiones: 8, height: 8, cellWidth: 190, cellHeight: 120, posicionX: -5, posicionY: 130, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo3 = S(this, "_arbol_1", { repeticiones: 8, height: 8, cellWidth: 190, cellHeight: 120, posicionX: 1460, posicionY: 130, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo4 = S(this, "_arbol_1", { repeticiones: 3, width: 3, cellWidth: 190, cellHeight: 120, posicionX: 90, posicionY: 750, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), this.arbolesGrupo5 = S(this, "_arbol_1", { repeticiones: 3, width: 3, cellWidth: 190, cellHeight: 120, posicionX: 890, posicionY: 750, escalaElemento: .65, origenX: .75, sizeWidth: 180 }), vt.push(this.add.rectangle(f.x * .62, f.y * .92, f.x * .5, f.y * .95, 65535, 0)), vt.push(this.add.rectangle(f.x * 1.35, f.y * .92, f.x * .5, f.y * .95, 65535, 0)), this.limitesCasa = this.physics.add.group(vt), this.limitesCasa.children.iterate(e => { e.body.immovable = !0 }), this.physics.world.enable(this.limitesCasa), this.add.image(f.x * .985, f.y * .699, "_casa_juan").setScale(.8), this.cubeta = this.physics.add.image(f.x * 1.88, f.y * 1.12, "_cubeta_1").setScale(.65).setImmovable(!0), this.pozo = this.physics.add.image(f.x * 1.8, f.y * 1.18, "_pozo_1").setScale(.8).setImmovable(!0), di === "casa" ? this.player = this.physics.add.sprite(f.x * .985, f.y * 1.35, "_sprites_juan_cupul").setScale(1.25) : this.player = this.physics.add.sprite(f.x * .985, f.y * 1.85, "_sprites_juan_cupul").setScale(1.25), this.player.setCollideWorldBounds(!0), this.player.setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), this.physics.world.enable([this.arbolesGrupo1, this.arbolesGrupo2, this.arbolesGrupo3, this.arbolesGrupo4, this.arbolesGrupo5]), this.physics.add.collider(this.player, [this.arbolesGrupo1, this.arbolesGrupo2, this.arbolesGrupo3, this.arbolesGrupo4, this.arbolesGrupo5, this.limitesCasa, this.pozo, this.cubeta], null, null, this), this.salidathis = E(this, this.player, "area_04", { posicionX: f.x * 1.015, posicionY: f.y * 2.05, altoSalida: f.y * .15, anchoSalida: f.x * .35, valoresSiguienteEscena: { entrada: "arriba" }, funcionesExtra: () => { this.timer && this.timer.remove() } }), this.puerta = E(this, this.player, "area_32_interior", { posicionX: f.x * .985, posicionY: f.y * 1.08, anchoSalida: f.x * .25, altoSalida: f.y * .4, valoresSiguienteEscena: { entradaPuerta: !0 } }), wt || hA(this, { x: f.x * 1.3, y: f.y * 1.55 }), this.indexTexto = 0, this.movimientoLimitado = !1, this.teclaPrecionada = !1, this.timer2 = this.time.addEvent({}), this.permitirCambio = !1, this.contrlesEnPantalla = !1, this.interaccionFilberto = !1
    } update () { this.player.setVelocity(0), this.movimientoLimitado || this.Movimientos.movimientoPersonaje(this.player), lt.acciones.interactuar.isDown && (wt || (this.interaccionFilberto || this.interaccionNoviaJuan) && (!this.bannerTxt && !this.finTexto && (this.movimientoLimitado = !0, this.bannerTxt = this.add.image(f.x * 1.015, f.y * 1.72, "_banner_dialogos").setScale(.8, .9).setDepth(5)), !ne && !this.finTexto && (Qt ? (ne = this.add.text(f.x * .2, f.y * 1.55, pe.novia[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })) : (ne = this.add.text(f.x * .2, f.y * 1.55, pe.filberto[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))))), lt.acciones.pasarDialogo.isDown && (this.finTexto ? (ne && ne.destroy(), this.bannerTxt && this.bannerTxt.destroy(), Qt || (Qt = !0, this.movimientoLimitado = !0, this.time.delayedCall(400, () => { this.tweens.add({ targets: this.filberto, x: f.x * 1.015, y: f.y * 1.55, duration: 800, onComplete: () => { this.time.delayedCall(150, () => { this.tweens.add({ targets: this.filberto, x: f.x * 1.015, y: f.y * 2, duration: 800, onComplete: () => { this.filberto.destroy(), this.areaFilberto.destroy(), this.crearPersonajeNovia() } }), this.filberto.anims.play("walkDown_filberto") }), this.filberto.anims.play("idleFront_filberto") } }), this.filberto.anims.play("walkLeft_filberto") }, [], this)), ht && (wt = !0), this.time.delayedCall(800, () => { St = pe.novia.length, ht ? this.movimientoLimitado = !1 : (ht = !0, ne = void 0, this.bannerTxt = void 0, this.indexTexto = 0, this.permitirCambio = !1, this.finTexto = !1), console.log(ne) }, [], this)) : ne && this.permitirCambio && (this.permitirCambio = !1, ht ? ne.text = pe.novia[this.indexTexto++] : ne.text = pe.filberto[this.indexTexto++], this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))), this.indexTexto <= St ? this.finTexto = !1 : this.finTexto = !0, this.filberto && this.player.y < this.filberto.y ? this.filberto.setDepth(2) : this.filberto && this.filberto.setDepth(0), this.novia_juan && this.player.y < this.novia_juan.y ? this.novia_juan.setDepth(2) : this.novia_juan && this.novia_juan.setDepth(0) } crearPersonajeNovia () { this.novia_juan = this.physics.add.sprite(f.x, f.y, "_sprites_novia_juan").setScale(1.25), this.novia_juan.anims.play("idleBack_novia_juan"), this.areaNovia = He(this, this.novia_juan, { ancho: this.novia_juan.width * .8, alto: this.novia_juan.height * .4 }), this.idle_dialogo = this.add.sprite(this.novia_juan.x, this.novia_juan.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), this.idle_dialogo.visible = !1, this.physics.add.overlap(this.player, this.novia_juan, () => { this.idle_dialogo.x = this.novia_juan.x, this.idle_dialogo.y = this.novia_juan.y * .93, this.areaNovia.x = this.novia_juan.x, this.areaNovia.y = this.novia_juan.y + this.novia_juan.width * .3, this.interaccionNoviaJuan = !0 }, null, this), this.physics.add.collider(this.player, this.areaNovia), this.timerInteraccion = this.time.addEvent({ delay: 10, callback: () => { this.interaccionNoviaJuan ? this.idle_dialogo.anims.isPlaying ? this.interaccionNoviaJuan = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.interaccionNoviaJuan = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }), this.time.delayedCall(100, () => { this.tweens.add({ targets: this.novia_juan, x: f.x * 1.015, y: f.y * 1.4, duration: 2e3, onComplete: () => { this.time.delayedCall(150, () => { this.tweens.add({ targets: this.novia_juan, x: f.x * 1.08, y: f.y * 1.4, duration: 400, onComplete: () => { this.novia_juan.anims.play("idleFront_novia_juan"), this.movimientoLimitado = !1 } }), this.novia_juan.anims.play("walkRight_novia_juan") }), this.novia_juan.anims.play("idleRight_novia_juan") } }), this.novia_juan.anims.play("walkDown_novia_juan") }) }
} function ci (t) {
    return `

`+ " ".repeat(t)
} function hA (t, e = { x: 100, y: 100 }) { t.filberto = t.physics.add.sprite(e.x, e.y, "_sprites_filberto").setScale(1.25), t.filberto.anims.play("idleLeft_filberto"), t.idle_dialogo = t.add.sprite(t.filberto.x, t.filberto.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), t.idle_dialogo.visible = !1, t.areaFilberto = He(t, t.filberto, { ancho: t.filberto.width * .8, alto: t.filberto.height * .4 }), t.physics.add.overlap(t.player, t.filberto, () => { t.idle_dialogo.x = t.filberto.x, t.idle_dialogo.y = t.filberto.y * .93, t.areaFilberto.x = t.filberto.x, t.areaFilberto.y = t.filberto.y + t.filberto.width * .3, t.interaccionFilberto = !0 }, null, t), t.physics.add.collider(t.player, t.areaFilberto), t.timerInteraccion = t.time.addEvent({ delay: 10, callback: () => { t.interaccionFilberto ? (t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !0, t.idle_dialogo.anims.play("idle_dialogo")), t.interaccionFilberto = !1) : t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !1, t.idle_dialogo.anims.stop()) }, callbackScope: t, loop: !0 }) } const dA = !1, cA = "Hola", pA = { ayudaControlesNPC: dA, entrada: cA }; let pi = pA.ayudaControlesNPC; class gA { constructor() { } ayudaControlesNPC_Disponible () { return pi } actualzizarAyudaControlesNPC_Disponible () { pi = !0 } } let dt = { acciones: { interactuar: void 0, pasarDialogo: void 0 } }, je = [], gi = [], ui = !1, Qe, ct = { controles: void 0, novia: void 0 }, mi, Dt = !1, u, P; class uA extends b.Scene {
    constructor() { super({ key: "area_32_interior" }) } init (e) { e && (ui = e.entradaPuerta) } preload () { } create () {
        this.datosJg = new gA, dt.acciones.interactuar = this.input.keyboard.addKey("F"), dt.acciones.pasarDialogo = this.input.keyboard.addKey("SPACE"), ct.novia = [`Mar√≠a Dolores:

(sorprendida) Buenos d√≠as, veo que apenas te levantas.`, `Juan Cupul:

Buenos d√≠as, los preparativos para la boda de ma√±ana me dejaron despierto hasta tarde.`, `Mar√≠a Dolores:

Bueno, no te sobre esfuerces, no queremos que ma√±ana no estes disponible.`, `Juan Cupul:

No te preocupes, es lo que menos quiero.`, `Mar√≠a Dolores:

Bueno, ven a desayunar que Filiberto ha llegado y dice que quiere hablar contigo.`, `Juan Cupul:

Ya voy, debe de ser importante.`, `Mar√≠a Dolores:

No olvides que puedes moverte con las flechas del teclado.`, `Juan Cupul:

Gracias.`], mi = ct.novia.length - 1, this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), u = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }, this.pantallControles = this.add.image(u.x, u.y, "_pantalla_controles").setDepth(6).setScale(.6), this.pantallControles.visible = !1, this.pantallNarracion = this.add.image(u.x, u.y, "_pantalla_narracion").setDepth(6).setScale(.8), this.pantallNarracion.visible = !1, this.add.image(u.x, u.y, "_fondo_interior_casa_juan").setScale(.8, .735), this.cama = this.physics.add.image(u.x * .5, u.y * 1.1, "_cama_1").setScale(1.7, 1.6), this.mesa_1 = this.physics.add.image(u.x * 1.4, u.y * 1.2, "_mesa_1").setScale(1.3, 1.4), this.mesa_2 = this.physics.add.image(u.x * 1.4, u.y * .69, "_mesa_2").setScale(1.25, 1), this.mesa_2.setSize(this.mesa_2.width * .9, this.mesa_2.height * .5), this.mesa_2.setOffset(this.mesa_2.width * .05, this.mesa_2.height * .18), this.ropero = this.physics.add.image(u.x, u.y * .55, "_ropero_1").setScale(1.4, 1.2), this.machete = this.physics.add.image(u.x * 1.5, u.y * 1.7, "_machete_1").setImmovable().setScale(.6, .7), gi.push(this.cama, this.mesa_1, this.mesa_2, this.ropero), this.decoracionesCasa = this.physics.add.group(gi), this.decoracionesCasa.children.iterate(e => { e.body.immovable = !0 }), ui ? (P = this.physics.add.sprite(u.x * 1.015, u.y * 1.68, "_sprites_juan_cupul").setScale(1.25), P.anims.play("idleFront_juan"), this.datosJg.actualzizarAyudaControlesNPC_Disponible()) : (P = this.physics.add.sprite(u.x * .8, u.y, "_sprites_juan_cupul").setScale(1.25), P.anims.play("idleRight_juan")), P.setDepth(1), w(P, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), this.physics.add.collider(P, this.machete, (e, i) => { this.movimientoLimitado = !0, i.destroy(), this.time.delayedCall(200, () => this.movimientoLimitado = !1, [], this) }, null, this), je.push(this.add.rectangle(u.x * .2, u.y, u.x * .15, u.y * 2, 65535, 0)), je.push(this.add.rectangle(u.x * 1.8, u.y, u.x * .15, u.y * 2, 65280, 0)), je.push(this.add.rectangle(u.x, u.y * .42, u.x * 2, u.y * .5, 16777215, 0)), je.push(this.add.rectangle(u.x * .51, u.y * 1.8, u.x * .8, u.y * .15, 0, 0)), je.push(this.add.rectangle(u.x * 1.52, u.y * 1.8, u.x * .8, u.y * .15, 0, 0)), this.limitesCasa = this.physics.add.group(je), this.physics.world.enable(this.limitesCasa), this.limitesCasa.children.iterate(e => { e.body.immovable = !0 }), this.physics.add.collider(P, this.limitesCasa, null, null, this), this.physics.add.collider(P, this.decoracionesCasa, null, null, this), this.interaccionNoviaJuan = !1, this.datosJg.ayudaControlesNPC_Disponible() ? (fi(this, { x: u.x * 1.1, y: u.y }), this.novia_juan.anims.play("idleFront_novia_juan")) : (this.pantallNarracion.visible = !0, this.time.delayedCall(6e3, () => { this.pantallNarracion.destroy(), this.time.delayedCall(100, () => { this.pantallControles.visible = !0, this.time.delayedCall(6e3, () => { this.pantallControles.destroy(), this.time.delayedCall(1500, () => { fi(this, { x: u.x * 1.015, y: u.y * 1.68 }), mA(this, this.novia_juan, u) }, [], this) }) }, [], this) }), this.finTexto = !1, this.input.keyboard.on("keyup", e => { e.key == "Escape" && this.scene.start("pantalla_inicio") })), E(this, P, "area_32", { posicionX: u.x * 1.015, posicionY: u.y * 1.87, anchoSalida: u.x * .25, altoSalida: u.y * .15, valoresSiguienteEscena: { entrada: "casa" }, funcionesExtra: () => { this.timerTexto && this.timerTexto.destroy() } }), this.indexTexto = 0, this.movimientoLimitado = !1, this.teclaPrecionada = !1, this.permitirCambio = !1, this.contrlesEnPantalla = !1
    } update () { P.setVelocity(0), this.datosJg.ayudaControlesNPC_Disponible() && !this.movimientoLimitado && this.Movimientos.movimientoPersonaje(P), dt.acciones.interactuar.isDown && this.interaccionNoviaJuan && (Dt ? this.contrlesEnPantalla || (this.finTexto = !1, this.movimientoLimitado = !0, this.pantallControles.visible = !0, this.time.delayedCall(3e3, () => { this.contrlesEnPantalla = !0 })) : (!this.bannerTxt && !this.finTexto && (this.movimientoLimitado = !0, this.bannerTxt = this.add.image(u.x * 1.015, u.y * 1.72, "_banner_dialogos").setScale(.8, .9)), !Qe && !this.finTexto && (Qe = this.add.text(u.x * .2, u.y * 1.55, ct.novia[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })))), dt.acciones.pasarDialogo.isDown && (this.contrlesEnPantalla && (this.pantallControles.visible = !1, this.movimientoLimitado = !1, this.finTexto = !0), this.finTexto ? (Qe && Qe.destroy(), this.bannerTxt && this.bannerTxt.destroy(), this.movimientoLimitado = !1, this.time.delayedCall(800, () => { Dt = !0, this.contrlesEnPantalla = !1, Dt || (Qe = void 0, this.bannerTxt = void 0, this.indexTexto = 0, this.permitirCambio = !1, this.movimientoLimitado = !1, this.finTexto = !1) }, [], this), this.datosJg.ayudaControlesNPC_Disponible() || (this.movimientoLimitado = !0, this.datosJg.actualzizarAyudaControlesNPC_Disponible())) : Qe && this.permitirCambio && (this.permitirCambio = !1, Qe.text = ct.novia[this.indexTexto++], this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))), this.indexTexto < mi ? this.finTexto = !1 : this.finTexto = !0, this.novia_juan && P.y < this.novia_juan.y ? this.novia_juan.setDepth(2) : this.novia_juan && this.novia_juan.setDepth(0) }
} function fi (t, e = { x: 100, y: 100 }) { t.novia_juan = t.physics.add.sprite(e.x, e.y, "_sprites_novia_juan").setScale(1.25), t.novia_juan.anims.play("idleBack_novia_juan"), t.areaNovia = He(t, t.novia_juan, { ancho: t.novia_juan.width * .8, alto: t.novia_juan.height * .4 }), t.idle_dialogo = t.add.sprite(t.novia_juan.x, t.novia_juan.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), t.idle_dialogo.visible = !1, t.physics.add.overlap(P, t.novia_juan, () => { t.idle_dialogo.x = t.novia_juan.x, t.idle_dialogo.y = t.novia_juan.y * .93, t.areaNovia.x = t.novia_juan.x, t.areaNovia.y = t.novia_juan.y + t.novia_juan.width * .3, t.interaccionNoviaJuan = !0 }, null, this), t.physics.add.collider(P, t.areaNovia), t.timerInteraccion = t.time.addEvent({ delay: 10, callback: () => { t.interaccionNoviaJuan ? (t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !0, t.idle_dialogo.anims.play("idle_dialogo")), t.interaccionNoviaJuan = !1) : t.idle_dialogo.anims.isPlaying || (t.idle_dialogo.visible = !1, t.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }) } function mA (t, e, i) { t.time.delayedCall(100, () => { t.tweens.add({ targets: e, x: i.x * 1.015, y: i.y, duration: 2e3, onComplete: () => { t.time.delayedCall(150, () => { t.tweens.add({ targets: e, x: i.x * .93, y: i.y, duration: 700, onComplete: () => { e.anims.play("idleLeft_novia_juan") } }), e.anims.play("walkLeft_novia_juan") }), e.anims.play("idleLeft_novia_juan") } }), e.anims.play("walkUp_novia_juan") }) } let yi; class fA extends b.Scene { constructor() { super({ key: "area_33" }) } init (e) { e && (yi = e.entrada) } preload () { } create () { console.log("area 33"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_33").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", yi, { escalaPersonaje: 1.25, esteY: e.y * 1.085, oesteY: e.y * 1.085 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_02", { posicionX: e.x * 2.015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .236, valoresSiguienteEscena: { entrada: "izq" } }), E(this, this.player, "area_35", { posicionX: 0 - e.x * .015, posicionY: e.y * 1.085, anchoSalida: e.y * .15, altoSalida: e.x * .236, valoresSiguienteEscena: { entrada: "der" } }), this.rabanosRojos = S(this, "_rabano_rojo_1", { repeticiones: 6, width: 3, height: 2, cellWidth: 140, cellHeight: 120, posicionX: e.x * .28, posicionY: e.y * .28, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.rabanosBlancos = S(this, "_rabano_blanco_1", { repeticiones: 6, width: 3, height: 2, cellWidth: 140, cellHeight: 120, posicionX: e.x * 1.02, posicionY: e.y * 1.3, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(2), this.tomates1 = S(this, "_tomates_1", { repeticiones: 2, width: 5, cellWidth: 170, posicionX: e.x * 1, posicionY: e.y * .2, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.tomates2 = S(this, "_tomates_1", { repeticiones: 2, width: 5, cellWidth: 170, posicionX: e.x * 1.1, posicionY: e.y * .46, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.zanahorias = S(this, "_zanahoria_1", { repeticiones: 6, width: 3, height: 2, cellWidth: 140, cellHeight: 120, posicionX: e.x * .26, posicionY: e.y * 1.25, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(2), this.physics.world.enable([this.tomates1, this.tomates2, this.rabanosBlancos, this.rabanosRojos, this.zanahorias]), this.tomates1.getChildren().forEach(i => { i.body.immovable = !0 }), this.tomates2.getChildren().forEach(i => { i.body.immovable = !0 }), this.rabanosBlancos.getChildren().forEach(i => { i.body.immovable = !0 }), this.rabanosRojos.getChildren().forEach(i => { i.body.immovable = !0 }), this.zanahorias.getChildren().forEach(i => { i.body.immovable = !0 }), this.CajaVerduras1 = this.physics.add.image(e.x * 1.75, e.y * 1.6, "_caja_verduras_1").setScale(.7).setDepth(2).setImmovable(), this.CajaVerduras1.setSize(this.CajaVerduras1.width * .65, this.CajaVerduras1.height * .4), this.CajaVerduras1.setOffset(0, this.CajaVerduras1.height * .6), this.CajaVerduras2 = this.physics.add.image(e.x * 1.7, e.y * .28, "_caja_verduras_1").setScale(.7).setDepth(0).setImmovable(), this.CajaVerduras2.setSize(this.CajaVerduras2.width * .65, this.CajaVerduras2.height * .4), this.CajaVerduras2.setOffset(0, this.CajaVerduras2.height * .6), this.CajaVerduras3 = this.physics.add.image(e.x * 1.85, e.y * .5, "_caja_verduras_1").setScale(.7).setDepth(0).setImmovable(), this.CajaVerduras3.setSize(this.CajaVerduras3.width * .65, this.CajaVerduras3.height * .4), this.CajaVerduras3.setOffset(0, this.CajaVerduras3.height * .6), this.physics.add.collider(this.player, [this.CajaVerduras1, this.CajaVerduras2, this.CajaVerduras3, this.rabanosBlancos, this.rabanosRojos, this.zanahorias, this.tomates1, this.tomates2]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), this.player.y < 180 ? (this.rabanosRojos.setDepth(2), this.tomates1.setDepth(2), this.tomates2.setDepth(2)) : this.player.y > 716 ? (this.rabanosBlancos.setDepth(0), this.zanahorias.setDepth(0)) : (this.rabanosRojos.setDepth(0), this.tomates1.setDepth(0), this.tomates2.setDepth(0), this.rabanosBlancos.setDepth(2), this.zanahorias.setDepth(2)), this.player.y < 170 ? this.CajaVerduras3.setDepth(2) : this.CajaVerduras3.setDepth(0), this.player.y < 82 ? this.CajaVerduras2.setDepth(2) : this.CajaVerduras2.setDepth(0), this.player.y < 605 ? this.CajaVerduras1.setDepth(2) : this.CajaVerduras1.setDepth(0) } } let Ei = { acciones: { confirmar: void 0 } }, Xe = { key: "area_04", posicion: { x: 0, y: 0 }, entrada_a_escena: void 0 }; class yA extends b.Scene { constructor() { super({ key: "area_34" }) } init (e) { e && (Xe.entrada_a_escena = e.entrada, e.posicion && (Xe.posicion = e.posicion)) } preload () { } create () { console.log("area 34"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), Ei.acciones.confirmar = this.input.keyboard.addKey("F"); let e = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }; this.add.image(e.x, e.y, "_fondo_area_34").setScale(.854, .78).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", Xe.entrada_a_escena, { escalaPersonaje: 1.25, xPersonaje: Xe.posicion.x, yPersonaje: Xe.posicion.y, norteX: e.x * .28 }).setDepth(1), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_30", { posicionX: e.x * .28, posicionY: e.y * .02, anchoSalida: e.x * .25, altoSalida: e.y * .15, valoresSiguienteEscena: { entrada: "abajo" } }), this.sprite_vendedor = this.physics.add.sprite(e.x * 1.35, e.y * 1.2, "_sprite_vendedor").setOrigin(.48, .35).setScale(2), this.idle_dialogo = this.add.sprite(this.sprite_vendedor.x, this.sprite_vendedor.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8), this.sprite_vendedor.anims.play("idle_vendedor"), this.sprite_vendedor.setSize(this.sprite_vendedor.width * .9, this.sprite_vendedor.height * .7), this.sprite_vendedor.setOffset(this.sprite_vendedor.width * .025, this.sprite_vendedor.height * .35), this.idle_dialogo.visible = !1, this.interaccionVendedor = !1, this.physics.add.overlap(this.player, this.sprite_vendedor, () => { this.interaccionVendedor = !0 }, null, this), this.colisionVendedor = He(this, this.sprite_vendedor, { ancho: this.sprite_vendedor.width * .65, alto: this.sprite_vendedor.height * .45, posicionX: this.sprite_vendedor.x * .998, posicionY: this.sprite_vendedor.y * 1.18 }), this.physics.add.collider(this.player, this.colisionVendedor, null, null, this), this.timer = this.time.addEvent({ delay: 10, callback: () => { this.interaccionVendedor ? this.idle_dialogo.anims.isPlaying ? this.interaccionVendedor = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.interaccionVendedor = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }), this.piedra1 = this.physics.add.image(e.x * .13, e.y * 1.7, "_piedra_3").setOrigin(.5).setScale(.8).setImmovable(), this.piedra2 = this.physics.add.image(e.x * .655, e.y * 1.111, "_piedra_2").setOrigin(.5).setScale(.8).setImmovable(), this.piedra3 = this.physics.add.image(e.x * 1.805, e.y * 1.72, "_piedra_1").setOrigin(.5).setScale(.8).setImmovable(), this.physics.world.enable(this.piedra1), this.physics.world.enable(this.piedra2), this.physics.world.enable(this.piedra3), this.vela1 = this.physics.add.sprite(e.x * .08, e.y * .65, "_vela_1").setOrigin(.5).setScale(.75).setImmovable(), this.vela1.anims.play("idle_vela_1"), this.vela1.setSize(this.vela1.width * .95, this.vela1.height * .5), this.vela1.setOffset(0, this.vela1.height * .4), this.vela2 = this.physics.add.sprite(e.x * .67, e.y * .89, "_vela_1").setOrigin(.5).setScale(.8), this.vela2.anims.play("idle_vela_1"), this.vela3 = this.physics.add.sprite(e.x * .13, e.y * 1.51, "_vela_1").setOrigin(.5).setScale(.8), this.vela3.anims.play("idle_vela_1"), this.vela4 = this.physics.add.sprite(e.x * 1.58, e.y * 1.61, "_vela_1").setOrigin(.5).setScale(.8).setImmovable(), this.vela4.anims.play("idle_vela_1"), this.vela5 = this.physics.add.sprite(e.x * 1.015, e.y * 1.6, "_vela_1").setOrigin(.5).setScale(.8).setImmovable(), this.vela5.anims.play("idle_vela_1"), this.vela6 = this.physics.add.sprite(e.x * 1.85, e.y * 1.5, "_craneo_1").setOrigin(.5).setScale(.8), this.vela6.anims.play("idle_craneo_1"), this.r1 = this.add.rectangle(e.x * 1.3, e.y * 1.25, e.x * .8, e.y * .4), this.r2 = this.add.rectangle(e.x * .75, e.y * .53, e.x * .4, e.y), this.r3 = this.add.rectangle(e.x * .85, e.y * 1.4, e.x * .3, e.y * .5), this.r4 = this.add.rectangle(e.x * .02, e.y, 40, e.y * 2), this.r5 = this.add.rectangle(e.x, e.y * 1.98, e.x * 2, 40), this.physics.world.enable([this.r1, this.r2, this.r3, this.r4, this.r5]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.r3.body.immovable = !0, this.r4.body.immovable = !0, this.r5.body.immovable = !0, this.physics.add.collider(this.player, [this.piedra1, this.piedra2, this.piedra3, this.vela1, this.vela4, this.vela5, this.r1, this.r2, this.r3, this.r4, this.r5]) } update () { this.player.setVelocity(0), this.Movimientos.movimientoPersonaje(this.player), Ei.acciones.confirmar.isDown && this.interaccionVendedor && this.scene.start("vendedor_pantalla_principal", { key: "area_34", posicion: { x: this.player.x, y: this.player.y } }), this.player.y < 202 ? this.vela1.setDepth(2) : this.vela1.setDepth(0), this.player.y < 586 ? (this.vela3.setDepth(2), this.piedra1.setDepth(2)) : (this.vela3.setDepth(0), this.piedra1.setDepth(0)) } } let bi, l, ge, Ie = { filberto1: void 0, filberto2: void 0 }, kt, pt = { acciones: { interactuar: void 0, pasarDialogo: void 0 } }, gt = !1, ut = !1, Rt = !1, mt = !1; const zt = []; let se, j, jt, H, q, ue, J, le; class EA extends b.Scene {
    constructor() { super({ key: "area_35" }) } init (e) { e && (bi = e.entrada) } preload () { } create () {
        console.log("area 35"), this.Movimientos = new D(this), this.Movimientos.definirAnimaciones({ idleFront: "idleFront_juan", idleBack: "idleBack_juan", idleLeft: "idleLeft_juan", idleRight: "idleRight_juan", walkUp: "walkUp_juan", walkDown: "walkDown_juan", walkLeft: "walkLeft_juan", walkRight: "walkRight_juan" }), l = { x: this.game.canvas.width / 2, y: this.game.canvas.height / 2 }, this.add.image(l.x, l.y, "_fondo_area_35").setScale(.855, .785).setDepth(-1), this.player = M(this, "_sprites_juan_cupul", bi, { escalaPersonaje: 1.25 }).setDepth(2), w(this.player, { sizeX: .28125, sizeY: .1875, offsetX: .375, offsetY: .578125 }), E(this, this.player, "area_33", { posicionX: l.x * 2.015, posicionY: l.y, anchoSalida: l.y * .15, altoSalida: l.x * .236, valoresSiguienteEscena: { entrada: "izq" } }), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * .1, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), this.grupoMaiz2 = S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .67, posicionY: l.y * .18, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * .36, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(0), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * 1.1, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(4), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .67, posicionY: l.y * 1.28, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(4), S(this, "_maiz_1", { repeticiones: 5, width: 5, cellWidth: 169, posicionX: l.x * .78, posicionY: l.y * 1.46, escalaElemento: .8, origenX: .6, origenY: .85 }).setDepth(4), this.r1 = this.add.rectangle(l.x * .67, 0, l.x * 1.2, l.y * .75, 0, 0).setOrigin(0), this.r2 = this.add.rectangle(l.x * .67, l.y * 1.26, l.x * 1.2, l.y * .7, 0, 0).setOrigin(0), this.casa = this.physics.add.image(l.x * .318, l.y * .85, "_casa_milpa").setScale(.82).setDepth(1).setImmovable(), this.casa.setSize(this.casa.width, this.casa.height * .75), this.casa.setOffset(0, this.casa.height * .25), this.saco = this.physics.add.image(l.x * .5, l.y * 1.45, "_saco_1").setScale(.82).setDepth(2).setImmovable(), this.caja = this.physics.add.image(l.x * .37, l.y * 1.455, "_caja_verduras_2").setScale(.75).setDepth(2).setImmovable(), this.lenia = this.physics.add.image(l.x * .2, l.y * 1.48, "_lenia_1").setScale(.7).setDepth(2).setImmovable(), this.herramientas = this.physics.add.image(l.x * .24, l.y * 1.8, "_herramientas_1").setScale(.75).setDepth(2).setImmovable(), this.physics.world.enable([this.r1, this.r2]), this.r1.body.immovable = !0, this.r2.body.immovable = !0, this.physics.add.collider(this.player, [this.r1, this.r2, this.casa, this.saco, this.caja, this.lenia, this.herramientas, this.bomba]), pt.acciones.interactuar = this.input.keyboard.addKey("F"), pt.acciones.pasarDialogo = this.input.keyboard.addKey("SPACE"), ut || (this.crearPersonajeFilberto(), this.bomba = this.physics.add.image(l.x * .8, l.y, "_bomba_1").setDepth(0).setScale(.75).setImmovable(), this.bomba.setSize(this.bomba.width, this.bomba.height * .5), this.bomba.setOffset(0, this.bomba.height * .5), this.physics.add.collider(this.player, this.bomba)), Ie.filberto1 = [`Juan Cupul:

¬øQu√© haces?`, `Filiberto Tun:

Estaba checando la bomba para ver si estaba lista.`, `Juan Cupul:

¬øEn serio?, ¬øY entonces c√≥mo est√°?`, `Filiberto Tun:

Supongo que bien...`, `Filiberto Tun:

Oye necesito tu ayuda con algo.`], Ie.filberto2 = [`Filiberto Tun:

Vaya esa respuesta fue r√°pida, ¬øqu√© hiciste?`, `Juan Cupul:

Simplemente pens√© en el problema, me surgieron diferentes respuestas y escog√≠ la correcta.`, `Filiberto Tun:

Vaya eso es incre√≠ble.`, `Juan Cupul:

Eso no es nada.`, `Filiberto Tun:

Bueno ir√© a ver al brujo que esta al sur para asegurar un buen presagio. Acompa√±ame.`, `Juan Cupul:

Solo terminare de verificar algunas cosas aqu√≠, te alcanzo luego.`, "Visita al brujo que est√° en el monte al SUR del pueblo."], kt = Ie.filberto1.length, this.indexTexto = 0, this.movimientoLimitado = !1, this.teclaPrecionada = !1, this.timer2 = this.time.addEvent({}), this.permitirCambio = !1, this.contrlesEnPantalla = !1, this.interaccionFilberto = !1
    } update () { this.player.setVelocity(0), !this.movimientoLimitado && !mt && this.Movimientos.movimientoPersonaje(this.player), pt.acciones.interactuar.isDown && !ut && !mt && this.interaccionFilberto && (!this.bannerTxt && !this.finTexto && (this.movimientoLimitado = !0, this.bannerTxt = this.add.image(l.x * 1.015, l.y * 1.72, "_banner_dialogos").setScale(.8, .9).setDepth(5)), !ge && !this.finTexto && (Rt ? (ge = this.add.text(l.x * .2, l.y * 1.55, Ie.filberto2[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left", wordWrap: { width: l.x * 1.7, useAdvancedWrap: !0 } }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })) : (ge = this.add.text(l.x * .2, l.y * 1.55, Ie.filberto1[this.indexTexto++], { fontFamily: "Arial", fontSize: 32, color: "#ffffff", align: "left" }).setOrigin(0).setDepth(5), this.time.delayedCall(3e3, () => { this.permitirCambio = !0 })))), pt.acciones.pasarDialogo.isDown && (this.finTexto ? (this.finTexto = !1, ge && ge.destroy(), this.bannerTxt && this.bannerTxt.destroy(), Rt || (Rt = !0, this.time.delayedCall(850, () => { this.crearQTE() }, [], this)), gt && !ut && (ut = !0, this.movimientoLimitado = !0, this.time.delayedCall(400, () => { this.areaFilberto.destroy(), this.tweens.add({ targets: this.filberto, x: l.x * 2, y: l.y, duration: 4e3, onComplete: () => { this.time.delayedCall(150, () => { this.filberto.destroy() }), this.filberto.anims.play("idleRight_filberto") } }), this.filberto.anims.play("walkRight_filberto") }, [], this)), this.time.delayedCall(800, () => { kt = Ie.filberto2.length, gt ? this.movimientoLimitado = !1 : (gt = !0, ge = void 0, this.bannerTxt = void 0, this.indexTexto = 0, this.permitirCambio = !1), console.log("b") }, [], this)) : ge && this.permitirCambio && (this.permitirCambio = !1, gt ? ge.text = Ie.filberto2[this.indexTexto++] : ge.text = Ie.filberto1[this.indexTexto++], this.time.delayedCall(3e3, () => { this.permitirCambio = !0 }))), this.indexTexto <= kt ? this.finTexto = !1 : this.finTexto = !0, this.player.y > 577 ? (this.player.setDepth(3), this.casa.setDepth(1)) : (this.player.setDepth(1), this.casa.setDepth(2)), this.filberto && this.player.y < this.filberto.y ? this.filberto.setDepth(2) : this.filberto && this.filberto.setDepth(0), this.bomba && this.player.y < this.bomba.y ? this.bomba.setDepth(2) : this.bomba && this.bomba.setDepth(0) } crearEscena () {
        le = !1, ue = 0, J = 0, this.bannerPreguntas = this.add.image(l.x, l.y * 1.64, "_banner_dialogos").setScale(.8, 1.1).setDepth(5), this.bannerContexto = this.add.image(l.x * 1.5, l.y * .7, "_banner_contextos").setScale(.8, .8).setDepth(5), this.contextoP = this.add.text(l.x * 1.5, l.y * .7, jt, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: 525, useAdvancedWrap: !0 } }).setOrigin(.5).setDepth(6); for (let e = 0; e <= 3; e++)H[e].areaTexto = this.add.text(l.x * .2, l.y * 1.42, H[e].pregunta, { fontFamily: "Arial", fontSize: 36, fill: "white", wordWrap: { width: l.x * 1.6, useAdvancedWrap: !0 } }).setDepth(6), H[e].areaTexto.visible = !1; H[ue].areaTexto.visible = !0, q = bA(this, Mt(H[0].respuestas)), q[J].setColor("#FFFFFF"), this.retro = { texto: void 0, background: void 0 }, this.retro.texto = this.add.text(l.x * .26, l.y * 1.54, `La respuesta ha sido incorrecta.
Analiza de nuevo el problema e intentalo de nuevo`, { fontFamily: "Arial", fontSize: 32, color: "#FFFFFF" }).setOrigin(0).setDepth(7), this.retro.texto.visible = !1, this.retro.background = this.add.image(l.x, l.y * 1.64, "_banner_dialogos").setScale(.8, 1.1).setDepth(6), this.retro.background.visible = !1, this.input.keyboard.on("keyup", function (e) { if (le) switch (!0) { case e.key == "ArrowLeft": q[J].setColor("#cacaca"), J <= 0 ? J = 3 : J -= 1, q[J].setColor("#FFFFFF"); break; case e.key == "ArrowRight": q[J].setColor("#cacaca"), J >= 3 ? J = 0 : J += 1, q[J].setColor("#FFFFFF"); break; case e.key == "Enter": q[J].text.split(") ")[1] == H[ue].respuesta ? ue < 3 ? (le = !1, H[ue++].areaTexto.visible = !1, H[ue].areaTexto.visible = !0, xi(Mt(H[ue].respuestas), q), J = 0, q.forEach(i => { i.setColor("#cacaca") }), q[J].setColor("#ffffff"), this.time.delayedCall(2e3, () => { le = !0 })) : (mt = !1, le = !1, this.retro.background.visible = !1, this.retro.texto.visible = !1, this.bannerPreguntas.destroy(), this.bannerContexto.destroy(), this.contextoP.destroy(), H.forEach(i => i.areaTexto.destroy()), q.forEach(i => i.destroy()), this.input.keyboard.removeListener("keyup")) : ue < 3 ? (le = !1, this.retro.texto.visible = !0, this.retro.background.visible = !0, xi(Mt(H[ue].respuestas), q), this.time.delayedCall(4e3, () => { le = !0, this.retro.background.visible = !1, this.retro.texto.visible = !1 })) : (le = !1, this.retro.texto.text = "Has fallado. Intentalo de nuevo", this.retro.texto.visible = !0, this.retro.background.visible = !0, this.time.delayedCall(4e3, () => { le = !0, this.retro.background.visible = !1, this.retro.texto.visible = !1, this.bannerPreguntas.destroy(), this.bannerContexto.destroy(), this.contextoP.destroy(), H.forEach(i => i.areaTexto.destroy()), q.forEach(i => i.destroy()), this.input.keyboard.removeListener("keyup"), this.crearQTE() })); break; case e.key == "Escape": break } }, this), this.time.delayedCall(4e3, () => { le = !0 })
    } crearQTE () { se ? (j = _i(), jt = j.contexto, H = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: j.respQuien.split(","), respuesta: j.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: j.respQue.split(","), respuesta: j.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: j.respOperaciones.split(","), respuesta: j.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: j.preguntaProblema, respuestas: j.respProblema.split(","), respuesta: j.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena()) : (console.log(1), fetch(Y + "/api/preguntas?filters[QTE][$eq]=QTE-1", { method: "GET", headers: { "Content-Type": "application/json" } }).then(e => e.json()).then(e => { e && (e.data.forEach(i => { zt.push({ contexto: i.attributes.contexto, respQuien: i.attributes.quien, respQue: i.attributes.que, respOperaciones: i.attributes.operaciones, preguntaProblema: i.attributes.pregunta, respProblema: i.attributes.respuesta }) }), se = [...zt], j = _i(), jt = j.contexto, H = [{ pregunta: "¬øDe qui√©n se habla en el problema?", respuestas: j.respQuien.split(","), respuesta: j.respQuien.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øDe qu√© se habla en el problema?", respuestas: j.respQue.split(","), respuesta: j.respQue.split(",")[0], areaTexto: void 0 }, { pregunta: "¬øQu√© operaciones deberia hacer para resolver el problema?", respuestas: j.respOperaciones.split(","), respuesta: j.respOperaciones.split(",")[0], areaTexto: void 0 }, { pregunta: j.preguntaProblema, respuestas: j.respProblema.split(","), respuesta: j.respProblema.split(",")[0], areaTexto: void 0 }], this.crearEscena(), mt = !0) }).catch(e => { this.movimientoLimitado = !1, console.error(e) })) } crearPersonajeFilberto () { this.filberto = this.physics.add.sprite(l.x, l.y, "_sprites_filberto").setScale(1.25), this.filberto.anims.play("idleLeft_filberto"), this.idle_dialogo = this.add.sprite(this.filberto.x, this.filberto.y, "_sprite_globo_dialogo").setOrigin(.5, 1).setScale(.8).setDepth(5), this.idle_dialogo.visible = !1, this.areaFilberto = He(this, this.filberto, { ancho: this.filberto.width * .8, alto: this.filberto.height * .4 }), this.physics.add.overlap(this.player, this.filberto, () => { this.idle_dialogo.x = this.filberto.x, this.idle_dialogo.y = this.filberto.y * .93, this.areaFilberto.x = this.filberto.x, this.areaFilberto.y = this.filberto.y + this.filberto.width * .3, this.interaccionFilberto = !0 }, null, this), this.physics.add.collider(this.player, this.areaFilberto), this.timerInteraccion = this.time.addEvent({ delay: 10, callback: () => { this.interaccionFilberto ? this.idle_dialogo.anims.isPlaying ? this.interaccionFilberto = !1 : (this.idle_dialogo.visible = !0, this.idle_dialogo.anims.play("idle_dialogo"), this.interaccionFilberto = !1) : this.idle_dialogo.anims.isPlaying || (this.idle_dialogo.visible = !1, this.idle_dialogo.anims.stop()) }, callbackScope: this, loop: !0 }) }
} function bA (t, e) { const i = t.game.canvas.width, a = t.game.canvas.height, s = i * .08; let o = []; for (let r = 0; r <= 3; r++) { let h = s + i * .05 * (r * 4 + 1); o.push(t.add.text(h, a * .89, r + 1 + ") " + e[r], { fontFamily: "Arial", fontSize: 30, color: "#cacaca", align: "left", wordWrap: { width: 220, useAdvancedWrap: !0 } }).setOrigin(0, .5).setDepth(6)) } return o } function Mt (t) { let e = t, i = t.length, a, s; for (; i !== 0;)s = Math.floor(Math.random() * i), i--, a = e[i], e[i] = e[s], e[s] = a; return e } function xi (t, e) { for (let i = 0; i <= 3; i++)e[i].text = i + 1 + ") " + t[i] } function _i () { let t, e; return se.length != 0 ? (t = Math.floor(Math.random() * se.length), e = se[t], se.splice(t, 1)) : (se = [...zt], console.log(se), t = Math.floor(Math.random() * se.length), e = se[t], se.splice(t, 1)), e } const IA = [ms, Es, Ns, Os, Ys, ks, Rs, js, Ms, Ts, zs, Bs, vs, Ss, Xs, Hs, Ls, Ks, qs, Zs, Vs, Ws, , $s, eA, tA, iA, aA, sA, AA, oA, rA, nA, lA, uA, fA, yA, EA, Cs, Us, Js, Ps, Fs, Gs]; export { IA as _lista_escenas };
